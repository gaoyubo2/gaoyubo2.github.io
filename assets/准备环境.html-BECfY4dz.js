import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,b as a,e as n,f as e,d as l}from"./app-D1py-eEI.js";const i={},d=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言"},[a("span",null,"前言")])],-1),r={href:"https://gaoyubo2.github.io/blogs/4dbff8ff.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/gaoyubo2/jvmgo",target:"_blank",rel:"noopener noreferrer"},g=l(`<h2 id="准备环境" tabindex="-1"><a class="header-anchor" href="#准备环境"><span>准备环境</span></a></h2><p>操作系统：Windows 11</p><h3 id="jdk版本" tabindex="-1"><a class="header-anchor" href="#jdk版本"><span>JDK版本</span></a></h3><p>openjdk version &quot;1.8.0_382&quot;</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/87d47561a2ae11304c6388f804c969eb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="go版本" tabindex="-1"><a class="header-anchor" href="#go版本"><span>Go版本</span></a></h3><p>go version go1.21.0 windows/amd64</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/15/65774b1cf98a88b46e181b0142714763.png" alt="" style="zoom:80%;"><h3 id="配置go工作空间" tabindex="-1"><a class="header-anchor" href="#配置go工作空间"><span>配置Go工作空间</span></a></h3><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/dc2359093e4a77b59cac20353f37b5c4.png" alt="" style="zoom:50%;"><h3 id="java命令指示" tabindex="-1"><a class="header-anchor" href="#java命令指示"><span>java命令指示</span></a></h3><p>Java虚拟机的工作是运行Java应用程序。和其他类型的应用程序一样，Java应用程序也需要一个入口点，这个入口点就是我们熟知的<code>main()</code>方法。最简单的Java程序是 只有一个<code>main()</code>方法的类，如著名的HelloWorld程序。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM如何知道从哪个类启动呢，虚拟机规范并没有明确，而是需要虚拟机实现。比如<strong>Oracle的JVM就是通过<code>java</code>命令启动的，主类名由命令行参数决定</strong>。</p><p>java命令有如下4种形式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> class <span class="token punctuation">[</span>args<span class="token punctuation">]</span>
<span class="token function">java</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token parameter variable">-jar</span> jarfile <span class="token punctuation">[</span>args<span class="token punctuation">]</span>
javaw <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> class <span class="token punctuation">[</span>args<span class="token punctuation">]</span>
javaw <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token parameter variable">-jar</span> jarfile <span class="token punctuation">[</span>args<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以向<code>java</code>命令传递三组参数：选项、主类名(或者JAR文件名) 和<code>main()</code>方法参数。选项由减号(–)开头。通常，第一个非选项参数 给出主类的完全限定名(fully qualified class name)。但是如果用户提供了–jar选项，则第一个非选项参数表示JAR文件名，<code>java</code>命令必须从这个JAR文件中寻找主类。<code>javaw</code>命令和java命令几乎一样，唯 一的差别在于，<code>javaw</code>命令不显示命令行窗口，因此特别适合用于启 动GUI(图形用户界面)应用程序。</p><p>选项可以分为两类：标准选项和非标准选项。标准选项比较稳定，不会轻易变动。非标准选项以-X开头，</p><table><thead><tr><th>选项</th><th>用途</th></tr></thead><tbody><tr><td>-version</td><td>输出版本信息，然后退出</td></tr><tr><td>-? / -help</td><td>输出帮助信息，然后退出</td></tr><tr><td>-cp / -classpath</td><td>指定用户类路径</td></tr><tr><td>-Dproperty=value</td><td>设置Java系统属性</td></tr><tr><td>-Xms&lt;size&gt;</td><td>设置初始<code>堆空间</code>大小</td></tr><tr><td>-Xmx&lt;size&gt;</td><td>设置最大<code>堆空间</code>大小</td></tr><tr><td>-Xss&lt;size&gt;</td><td>设置线程<code>栈空间</code>大小</td></tr></tbody></table>`,19);function v(h,m){const s=o("ExternalLinkIcon");return p(),c("div",null,[d,a("p",null,[n("所需前置知识为：JAVA语言、JVM知识、"),a("a",r,[n("Go笔记"),e(s)])]),a("p",null,[n("对应项目："),a("a",u,[n("jvmgo"),e(s)])]),g])}const b=t(i,[["render",v],["__file","准备环境.html.vue"]]),A=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83.html","title":"准备环境","lang":"zh-CN","frontmatter":{"title":"准备环境","order":1,"description":"前言 所需前置知识为：JAVA语言、JVM知识、Go笔记 对应项目：jvmgo 准备环境 操作系统：Windows 11 JDK版本 openjdk version \\"1.8.0_382\\" Go版本 go version go1.21.0 windows/amd64 配置Go工作空间 java命令指示 Java虚拟机的工作是运行Java应用程序。和其他...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"准备环境"}],["meta",{"property":"og:description","content":"前言 所需前置知识为：JAVA语言、JVM知识、Go笔记 对应项目：jvmgo 准备环境 操作系统：Windows 11 JDK版本 openjdk version \\"1.8.0_382\\" Go版本 go version go1.21.0 windows/amd64 配置Go工作空间 java命令指示 Java虚拟机的工作是运行Java应用程序。和其他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang%E5%AE%9E%E7%8E%B0JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/2023/12/14/87d47561a2ae11304c6388f804c969eb.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"准备环境\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang%E5%AE%9E%E7%8E%B0JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/2023/12/14/87d47561a2ae11304c6388f804c969eb.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"准备环境","slug":"准备环境","link":"#准备环境","children":[{"level":3,"title":"JDK版本","slug":"jdk版本","link":"#jdk版本","children":[]},{"level":3,"title":"Go版本","slug":"go版本","link":"#go版本","children":[]},{"level":3,"title":"配置Go工作空间","slug":"配置go工作空间","link":"#配置go工作空间","children":[]},{"level":3,"title":"java命令指示","slug":"java命令指示","link":"#java命令指示","children":[]}]}],"git":{},"readingTime":{"minutes":2.07,"words":621},"filePathRelative":"book/Go实现Java虚拟机/解析Class文件/准备环境.md","autoDesc":true}');export{b as comp,A as data};

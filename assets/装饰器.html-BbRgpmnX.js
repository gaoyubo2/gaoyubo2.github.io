import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as l,b as s,e as n,f as e,d as t}from"./app-D1py-eEI.js";const c={},r=t(`<p><strong>亦称：</strong> 装饰者模式、装饰器模式、Wrapper、Decorator</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>装饰模式</strong>是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281703144.png" alt="装饰设计模式" tabindex="0" loading="lazy"><figcaption>装饰设计模式</figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>假设你正在开发一个提供通知功能的库， 其他程序可使用它向用户发送关于重要事件的通知。</p><p>库的最初版本基于 <code>通知器</code>Notifier类， 其中只有很少的几个成员变量， 一个构造函数和一个 <code>send</code>发送方法。 该方法可以接收来自客户端的消息参数， 并将该消息发送给一系列的邮箱， 邮箱列表则是通过构造函数传递给通知器的。 作为客户端的第三方程序仅会创建和配置通知器对象一次， 然后在有重要事件发生时对其进行调用。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281703313.png" alt="使用装饰模式前的库结构" tabindex="0" loading="lazy"><figcaption>使用装饰模式前的库结构</figcaption></figure><p>程序可以使用通知器类向预定义的邮箱发送重要事件通知。</p><p>此后某个时刻， 你会发现库的用户希望使用除邮件通知之外的功能。 许多用户会希望接收关于紧急事件的手机短信， 还有些用户希望在微信上接收消息， 而公司用户则希望在 QQ 上接收消息。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281704032.png" alt="实现其他类型通知后的库结构" tabindex="0" loading="lazy"><figcaption>实现其他类型通知后的库结构</figcaption></figure><blockquote><p>每种通知类型都将作为通知器的一个子类得以实现</p></blockquote><p>这有什么难的呢？ 首先扩展 <code>通知器</code>类， 然后在新的子类中加入额外的通知方法。 现在客户端要对所需通知形式的对应类进行初始化， 然后使用该类发送后续所有的通知消息。</p><p>但是很快有人会问： “为什么不同时使用多种通知形式呢？ 如果房子着火了， 你大概会想在所有渠道中都收到相同的消息吧。”</p><p>你可以尝试创建一个特殊子类来将多种通知方法组合在一起以解决该问题。 但这种方式会使得代码量迅速膨胀， 不仅仅是程序库代码， 客户端代码也会如此。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281704008.png" alt="创建组合类后的程序库结构" tabindex="0" loading="lazy"><figcaption>创建组合类后的程序库结构</figcaption></figure><p>子类组合数量爆炸。</p><p>你必须找到其他方法来规划通知类的结构， 否则它们的数量会在不经意之间打破吉尼斯纪录。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>当你需要更改一个对象的行为时， 第一个跳入脑海的想法就是扩展它所属的类。 但是， 你不能忽视继承可能引发的几个严重问题。</p><ul><li>继承是静态的。 你无法在运行时更改已有对象的行为， 只能使用由不同子类创建的对象来替代当前的整个对象。</li><li>子类只能有一个父类。 大部分编程语言不允许一个类同时继承多个类的行为。</li></ul><p>其中一种方法是用<em><strong>聚合</strong></em>或<em><strong>组合</strong></em> ， 而不是<em>继承</em>。</p><p>两者的工作方式几乎一模一样： 一个对象<em>包含</em>指向另一个对象的引用， 并将部分工作委派给引用对象； 继承中的对象则继承了父类的行为， 它们自己<em>能够</em>完成这些工作。</p><p>你可以使用这个新方法来轻松替换各种连接的 “小帮手” 对象， 从而能在运行时改变容器的行为。 一个对象可以使用多个类的行为， 包含多个指向其他对象的引用， 并将各种工作委派给引用对象。 聚合 （或组合） 组合是许多设计模式背后的关键原则 （包括装饰在内）。 记住这一点后， 让我们继续关于模式的讨论。</p><div class="hint-container info"><p class="hint-container-title">聚合与组合</p><p>**聚合：**对象A包含对象B；B可以独立于A存在。</p><p>**组合：**对象A由对象B构成；A负责管理B的生命周期。B无法独立于A存在。</p></div><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281705162.png" alt="继承与聚合的对比" tabindex="0" loading="lazy"><figcaption>继承与聚合的对比</figcaption></figure><p><em>封装器</em>是装饰模式的别称， 这个称谓明确地表达了该模式的主要思想。 “封装器” 是一个能与其他 “目标” 对象连接的对象。 封装器包含与目标对象相同的一系列方法， 它会将所有接收到的请求委派给目标对象。 但是， 封装器可以在将请求委派给目标前后对其进行处理， 所以可能会改变最终结果。</p><p>那么什么时候一个简单的封装器可以被称为是真正的装饰呢？ 正如之前提到的， 封装器实现了与其封装对象相同的接口。 因此从客户端的角度来看， 这些对象是完全一样的。 封装器中的引用成员变量可以是遵循相同接口的任意对象。 这使得你可以将一个对象放入多个封装器中， 并在对象中添加所有这些封装器的组合行为。</p><p>比如在消息通知示例中， 我们可以将简单邮件通知行为放在基类 <code>通知器</code>中， 但将所有其他通知方法放入装饰中。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706350.png" alt="装饰模式解决方案" tabindex="0" loading="lazy"><figcaption>装饰模式解决方案</figcaption></figure><blockquote><p>将各种通知方法放入装饰</p></blockquote><p>客户端代码必须将基础通知器放入一系列自己所需的装饰中。 因此最后的对象将形成一个栈结构。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706811.png" alt="程序可以配置由通知装饰构成的复杂栈" tabindex="0" loading="lazy"><figcaption>程序可以配置由通知装饰构成的复杂栈</figcaption></figure><p>程序可以配置由通知装饰构成的复杂栈。</p><p>实际与客户端进行交互的对象将是最后一个进入栈中的装饰对象。 由于所有的装饰都实现了与通知基类相同的接口， 客户端的其他代码并不在意自己到底是与 “纯粹” 的通知器对象， 还是与装饰后的通知器对象进行交互。</p><p>我们可以使用相同方法来完成其他行为 （例如设置消息格式或者创建接收人列表）。 只要所有装饰都遵循相同的接口， 客户端就可以使用任意自定义的装饰来装饰对象。</p><h2 id="真实世界类比" tabindex="-1"><a class="header-anchor" href="#真实世界类比"><span>真实世界类比</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706214.png" alt="装饰模式示例" tabindex="0" loading="lazy"><figcaption>装饰模式示例</figcaption></figure><p>穿上多件衣服将获得组合性的效果。</p><p>穿衣服是使用装饰的一个例子。 觉得冷时， 你可以穿一件毛衣。 如果穿毛衣还觉得冷， 你可以再套上一件夹克。 如果遇到下雨， 你还可以再穿一件雨衣。 所有这些衣物都 “扩展” 了你的基本行为， 但它们并不是你的一部分， 如果你不再需要某件衣物， 可以方便地随时脱掉。</p><h2 id="装饰模式结构" tabindex="-1"><a class="header-anchor" href="#装饰模式结构"><span>装饰模式结构</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706691.png" alt="装饰设计模式的结构" tabindex="0" loading="lazy"><figcaption>装饰设计模式的结构</figcaption></figure><ol><li><strong>部件</strong> （Component） 声明封装器和被封装对象的公用接口。</li><li><strong>具体部件</strong> （Concrete Component） 类是被封装对象所属的类。 它定义了基础行为， 但装饰类可以改变这些行为。</li><li><strong>基础装饰</strong> （Base Decorator） 类拥有一个指向被封装对象的引用成员变量。 该变量的类型应当被声明为通用部件接口， 这样它就可以引用具体的部件和装饰。 装饰基类会将所有操作委派给被封装的对象。</li><li><strong>具体装饰类</strong> （Concrete Decorators） 定义了可动态添加到部件的额外行为。 具体装饰类会重写装饰基类的方法， 并在调用父类方法之前或之后进行额外的行为。</li><li><strong>客户端</strong> （Client） 可以使用多层装饰来封装部件， 只要它能使用通用接口与所有对象互动即可。</li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>在本例中， <strong>装饰</strong>模式能够对敏感数据进行压缩和加密， 从而将数据从使用数据的代码中独立出来。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281707994.png" alt="装饰模式示例的结构" tabindex="0" loading="lazy"><figcaption>装饰模式示例的结构</figcaption></figure><p>加密和压缩装饰的示例。</p><p>程序使用一对装饰来封装数据源对象。 这两个封装器都改变了从磁盘读写数据的方式：</p><ul><li>当数据即将被<strong>写入磁盘</strong>前， 装饰对数据进行加密和压缩。 在原始类对改变毫无察觉的情况下， 将加密后的受保护数据写入文件。</li><li>当数据刚<strong>从磁盘读出</strong>后， 同样通过装饰对数据进行解压和解密。</li></ul><p>装饰和数据源类实现同一接口， 从而能在客户端代码中相互替换。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 装饰可以改变组件接口所定义的操作。</span>
<span class="token keyword">interface</span> <span class="token class-name">DataSource</span> is
    method <span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    method <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>data

<span class="token comment">// 具体组件提供操作的默认实现。这些类在程序中可能会有几个变体。</span>
<span class="token keyword">class</span> <span class="token class-name">FileDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> is
    constructor <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>

    method <span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> is
        <span class="token comment">// 将数据写入文件。</span>

    method <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>data is
        <span class="token comment">// 从文件读取数据。</span>

<span class="token comment">// 装饰基类和其他组件遵循相同的接口。该类的主要任务是定义所有具体装饰的封</span>
<span class="token comment">// 装接口。封装的默认实现代码中可能会包含一个保存被封装组件的成员变量，并</span>
<span class="token comment">// 且负责对其进行初始化。</span>
<span class="token keyword">class</span> <span class="token class-name">DataSourceDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> is
    <span class="token keyword">protected</span> field wrappee<span class="token operator">:</span> <span class="token class-name">DataSource</span>

    constructor <span class="token class-name">DataSourceDecorator</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token class-name">DataSource</span><span class="token punctuation">)</span> is
        wrappee <span class="token operator">=</span> source

    <span class="token comment">// 装饰基类会直接将所有工作分派给被封装组件。具体装饰中则可以新增一些</span>
    <span class="token comment">// 额外的行为。</span>
    method <span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> is
        wrappee<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

    <span class="token comment">// 具体装饰可调用其父类的操作实现，而不是直接调用被封装对象。这种方式</span>
    <span class="token comment">// 可简化装饰类的扩展工作。</span>
    method <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>data is
        <span class="token keyword">return</span> wrappee<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 具体装饰必须在被封装对象上调用方法，不过也可以自行在结果中添加一些内容。</span>
<span class="token comment">// 装饰必须在调用封装对象之前或之后执行额外的行为。</span>
<span class="token keyword">class</span> <span class="token class-name">EncryptionDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">DataSourceDecorator</span> is
    method <span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> is
        <span class="token comment">// 1. 对传递数据进行加密。</span>
        <span class="token comment">// 2. 将加密后数据传递给被封装对象 writeData（写入数据）方法。</span>

    method <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>data is
        <span class="token comment">// 1. 通过被封装对象的 readData（读取数据）方法获取数据。</span>
        <span class="token comment">// 2. 如果数据被加密就尝试解密。</span>
        <span class="token comment">// 3. 返回结果。</span>

<span class="token comment">// 你可以将对象封装在多层装饰中。</span>
<span class="token keyword">class</span> <span class="token class-name">CompressionDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">DataSourceDecorator</span> is
    method <span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> is
        <span class="token comment">// 1. 压缩传递数据。</span>
        <span class="token comment">// 2. 将压缩后数据传递给被封装对象 writeData（写入数据）方法。</span>

    method <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>data is
        <span class="token comment">// 1. 通过被封装对象的 readData（读取数据）方法获取数据。</span>
        <span class="token comment">// 2. 如果数据被压缩就尝试解压。</span>
        <span class="token comment">// 3. 返回结果。</span>


<span class="token comment">// 选项 1：装饰组件的简单示例</span>
<span class="token keyword">class</span> <span class="token class-name">Application</span> is
    method <span class="token function">dumbUsageExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;somefile.dat&quot;</span><span class="token punctuation">)</span>
        source<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span>
        <span class="token comment">// 已将明码数据写入目标文件。</span>

        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionDecorator</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        source<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span>
        <span class="token comment">// 已将压缩数据写入目标文件。</span>

        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptionDecorator</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        <span class="token comment">// 源变量中现在包含：</span>
        <span class="token comment">// Encryption &gt; Compression &gt; FileDataSource</span>
        source<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span>
        <span class="token comment">// 已将压缩且加密的数据写入目标文件。</span>


<span class="token comment">// 选项 2：客户端使用外部数据源。SalaryManager（工资管理器）对象并不关心</span>
<span class="token comment">// 数据如何存储。它们会与提前配置好的数据源进行交互，数据源则是通过程序配</span>
<span class="token comment">// 置器获取的。</span>
<span class="token keyword">class</span> <span class="token class-name">SalaryManager</span> is
    field source<span class="token operator">:</span> <span class="token class-name">DataSource</span>

    constructor <span class="token class-name">SalaryManager</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token class-name">DataSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>

    method <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    method <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        source<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span>
    <span class="token comment">// ……其他有用的方法……</span>


<span class="token comment">// 程序可在运行时根据配置或环境组装不同的装饰堆桟。</span>
<span class="token keyword">class</span> <span class="token class-name">ApplicationConfigurator</span> is
    method <span class="token function">configurationExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;salary.dat&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>enabledEncryption<span class="token punctuation">)</span>
            source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptionDecorator</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>enabledCompression<span class="token punctuation">)</span>
            source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionDecorator</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>

        logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalaryManager</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
        salary <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰模式适合应用场景" tabindex="-1"><a class="header-anchor" href="#装饰模式适合应用场景"><span>装饰模式适合应用场景</span></a></h2><p>如果你希望在无需修改代码的情况下即可使用对象， 且希望在运行时为对象新增额外的行为， 可以使用装饰模式。</p><p>装饰能将业务逻辑组织为层次结构， 你可为各层创建一个装饰， 在运行时将各种不同逻辑组合成对象。 由于这些对象都遵循通用接口， 客户端代码能以相同的方式使用这些对象。</p><p>如果用继承来扩展对象行为的方案难以实现或者根本不可行， 你可以使用该模式。</p><p>许多编程语言使用 <code>final</code>最终关键字来限制对某个类的进一步扩展。 复用最终类已有行为的唯一方法是使用装饰模式： 用封装器对其进行封装。</p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><ol><li>确保业务逻辑可用一个基本组件及多个额外可选层次表示。</li><li>找出基本组件和可选层次的通用方法。 创建一个组件接口并在其中声明这些方法。</li><li>创建一个具体组件类， 并定义其基础行为。</li><li>创建装饰基类， 使用一个成员变量存储指向被封装对象的引用。 该成员变量必须被声明为组件接口类型， 从而能在运行时连接具体组件和装饰。 装饰基类必须将所有工作委派给被封装的对象。</li><li>确保所有类实现组件接口。</li><li>将装饰基类扩展为具体装饰。 具体装饰必须在调用父类方法 （总是委派给被封装对象） 之前或之后执行自身的行为。</li><li>客户端代码负责创建装饰并将其组合成客户端所需的形式。</li></ol><h2 id="装饰模式优缺点" tabindex="-1"><a class="header-anchor" href="#装饰模式优缺点"><span>装饰模式优缺点</span></a></h2><ul><li>你无需创建新子类即可扩展对象的行为。</li><li>你可以在运行时添加或删除对象的功能。</li><li>你可以用多个装饰封装对象来组合几种行为。</li><li><em>单一职责原则</em>。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</li></ul><div class="hint-container warning"><p class="hint-container-title">缺点</p><ul><li>在封装器栈中删除特定封装器比较困难。</li><li>实现行为不受装饰栈顺序影响的装饰比较困难。</li><li>各层的初始化配置代码看上去可能会很糟糕。</li></ul></div><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>`,62),d={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},u={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},m=s("em",null,"装饰",-1),g=s("em",null,"适配器",-1),k={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/proxy",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},b={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},f={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},_=s("em",null,"装饰",-1),D={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},w={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},E=t("<p><em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。</p><p>但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</p>",2),x={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},A={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},j={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},B={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},S={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},C={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},z={href:"https://refactoringguru.cn/design-patterns/proxy",target:"_blank",rel:"noopener noreferrer"},N=s("em",null,"代理",-1),F=s("em",null,"装饰",-1),q=s("p",null,"原文：https://refactoringguru.cn/design-patterns/decorator",-1);function M(R,V){const a=i("ExternalLinkIcon");return p(),l("div",null,[r,s("ul",null,[s("li",null,[s("p",null,[s("a",d,[n("适配器模式"),e(a)]),n("可以对已有对象的接口进行修改， "),s("a",u,[n("装饰模式"),e(a)]),n("则能在不改变对象接口的前提下强化对象功能。 此外， "),m,n("还支持递归组合， "),g,n("则无法实现。")])]),s("li",null,[s("p",null,[s("a",k,[n("适配器"),e(a)]),n("能为被封装对象提供不同的接口， "),s("a",v,[n("代理模式"),e(a)]),n("能为对象提供相同的接口， "),s("a",h,[n("装饰"),e(a)]),n("则能为对象提供加强的接口。")])]),s("li",null,[s("p",null,[s("a",b,[n("责任链模式"),e(a)]),n("和"),s("a",f,[n("装饰模式"),e(a)]),n("的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。")]),s("p",null,[s("a",y,[n("责任链"),e(a)]),n("的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种"),_,n("可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。")])]),s("li",null,[s("p",null,[s("a",D,[n("组合模式"),e(a)]),n("和"),s("a",w,[n("装饰"),e(a)]),n("的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。")]),E]),s("li",null,[s("p",null,[n("大量使用"),s("a",x,[n("组合"),e(a)]),n("和"),s("a",A,[n("装饰"),e(a)]),n("的设计通常可从对于"),s("a",j,[n("原型模式"),e(a)]),n("的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。")])]),s("li",null,[s("p",null,[s("a",B,[n("装饰"),e(a)]),n("可让你更改对象的外表， "),s("a",S,[n("策略模式"),e(a)]),n("则让你能够改变其本质。")])]),s("li",null,[s("p",null,[s("a",C,[n("装饰"),e(a)]),n("和"),s("a",z,[n("代理"),e(a)]),n("有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于"),N,n("通常自行管理其服务对象的生命周期， 而"),F,n("的生成则总是由客户端进行控制。")])])]),q])}const I=o(c,[["render",M],["__file","装饰器.html.vue"]]),L=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8.html","title":"装饰模式","lang":"zh-CN","frontmatter":{"title":"装饰模式","description":"亦称： 装饰者模式、装饰器模式、Wrapper、Decorator 简介 装饰模式是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。 装饰设计模式装饰设计模式 问题 假设你正在开发一个提供通知功能的库， 其他程序可使用它向用户发送关于重要事件的通知。 库的最初版本基于 通知器Notifier类， 其中只有很少的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"装饰模式"}],["meta",{"property":"og:description","content":"亦称： 装饰者模式、装饰器模式、Wrapper、Decorator 简介 装饰模式是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。 装饰设计模式装饰设计模式 问题 假设你正在开发一个提供通知功能的库， 其他程序可使用它向用户发送关于重要事件的通知。 库的最初版本基于 通知器Notifier类， 其中只有很少的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281703144.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰模式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281703144.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281703313.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281704032.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281704008.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281705162.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706350.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706811.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706214.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281706691.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281707994.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"真实世界类比","slug":"真实世界类比","link":"#真实世界类比","children":[]},{"level":2,"title":"装饰模式结构","slug":"装饰模式结构","link":"#装饰模式结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"装饰模式适合应用场景","slug":"装饰模式适合应用场景","link":"#装饰模式适合应用场景","children":[]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":2,"title":"装饰模式优缺点","slug":"装饰模式优缺点","link":"#装饰模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{},"readingTime":{"minutes":14.04,"words":4213},"filePathRelative":"guide/设计模式/结构型模式/装饰器.md","autoDesc":true}');export{I as comp,L as data};

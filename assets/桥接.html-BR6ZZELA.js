import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,b as s,e as n,f as e,d as t}from"./app-D1py-eEI.js";const l={},r=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>桥接模式</strong>是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为<strong>抽象和实现</strong>两个独立的层次结构， 从而能在开发时分别使用。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281451978.png" alt="桥接设计模式" tabindex="0" loading="lazy"><figcaption>桥接设计模式</figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p><em>抽象？ 实现？</em> 听上去挺吓人？ 让我们慢慢来， 先考虑一个简单的例子。</p><p>假如你有一个几何 <code>形状</code>Shape类， 从它能扩展出两个子类： <code>圆形</code>Circle和 <code>方形</code>Square 。 你希望对这样的类层次结构进行扩展以使其包含颜色， 所以你打算创建名为 <code>红色</code>Red和 <code>蓝色</code>Blue的形状子类。 但是， 由于你已有两个子类， 所以总共需要创建四个类才能覆盖所有组合， 例如 <code>蓝色圆形</code>Blue­Circle和 <code>红色方形</code>Red­Square 。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281455948.png" alt="桥接模式解决的问题" tabindex="0" loading="lazy"><figcaption>桥接模式解决的问题</figcaption></figure><blockquote><p>所有组合类的数量将以几何级数增长。</p></blockquote><p>在层次结构中新增形状和颜色将导致代码复杂程度指数增长。 例如添加三角形状， 你需要新增两个子类， 也就是每种颜色一个； 此后新增一种新颜色需要新增三个子类， 即每种形状一个。 如此以往， 情况会越来越糟糕。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>问题的根本原因是我们试图在两个独立的维度——形状与颜色——上扩展形状类。 这在处理类继承时是很常见的问题。</p><p>桥接模式通过将继承改为组合的方式来解决这个问题。 具体来说， 就是抽取其中一个维度并使之成为独立的类层次， 这样就可以在初始类中引用这个新层次的对象， 从而使得一个类不必拥有所有的状态和行为。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281455361.png" alt="桥接模式的解决方案" tabindex="0" loading="lazy"><figcaption>桥接模式的解决方案</figcaption></figure><blockquote><p>将一个类层次转化为多个相关的类层次， 避免单个类层次的失控。</p></blockquote><p>根据该方法， 我们可以将颜色相关的代码抽取到拥有 <code>红色</code>和 <code>蓝色</code>两个子类的颜色类中， 然后<strong>在 <code>形状</code>类中添加一个指向某一颜色对象的引用成员变量</strong>。 现在， 形状类可以将所有与颜色相关的工作委派给连入的颜色对象。 这样的引用就成为了 <code>形状</code>和 <code>颜色</code>之间的桥梁。 此后， 新增颜色将不再需要修改形状的类层次， 反之亦然。</p><h4 id="抽象部分和实现部分" tabindex="-1"><a class="header-anchor" href="#抽象部分和实现部分"><span>抽象部分和实现部分</span></a></h4><p>设计模式<em>四人组</em>的著作 在桥接定义中提出了<em>抽象部分</em>和<em>实现部分</em>两个术语。 我觉得这些术语过于学术了， 反而让模式看上去比实际情况更加复杂。 在介绍过形状和颜色的简单例子后， 我们来看看四人组著作中让人望而生畏的词语的含义。</p><p><em>抽象部分</em> （也被称为<em>接口</em>） 是一些实体的高阶控制层。 该层自身不完成任何具体的工作， 它需要将工作委派给<em>实现部分</em>层 （也被称为<em>平台</em>）。</p><p>注意， 这里提到的内容与编程语言中的<em>接口</em>或<em>抽象类</em>无关。 它们并不是一回事。</p><p>在实际的程序中， 抽象部分是图形用户界面 （GUI）， 而实现部分则是底层操作系统代码 （API）， GUI 层调用 API 层来对用户的各种操作做出响应。</p><p>一般来说， 你可以在两个独立方向上扩展这种应用：</p><ul><li>开发多个不同的 GUI （例如面向普通用户和管理员进行分别配置）</li><li>支持多个不同的 API （例如， 能够在 Windows、 Linux 和 macOS 上运行该程序）。</li></ul><p>在最糟糕的情况下， 程序可能会是一团乱麻， 其中包含数百种条件语句， 连接着代码各处不同种类的 GUI 和各种 API。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281456229.png" alt="在模块化代码中驾驭变化要容易得多" tabindex="0" loading="lazy"><figcaption>在模块化代码中驾驭变化要容易得多</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在庞杂的代码中， 即使是很小的改动都非常难以完成， 因为你必须要在<em>整体上</em>对代码有充分的理解。 而在较小且定义明确的模块中， 进行修改则要容易得多。</p></div><p>你可以将特定接口-平台的组合代码抽取到独立的类中， 以在混乱中建立一些秩序。 但是， 你很快会发现这种类的数量<em>很多</em>。 类层次将以指数形式增长， 因为每次添加一个新的 GUI 或支持一种新的 API 都需要创建更多的类。</p><p>让我们试着用桥接模式来解决这个问题。 该模式建议将类拆分为两个类层次结构：</p><ul><li>抽象部分： 程序的 GUI 层。</li><li>实现部分： 操作系统的 API。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457072.png" alt="跨平台结构" tabindex="0" loading="lazy"><figcaption>跨平台结构</figcaption></figure><p>创建跨平台应用程序的一种方法</p><p>抽象对象控制程序的外观， 并将真实工作委派给连入的实现对象。 不同的实现只要遵循相同的接口就可以互换， 使同一 GUI 可在 Windows 和 Linux 下运行。</p><p>最后的结果是： 你无需改动与 API 相关的类就可以修改 GUI 类。 此外如果想支持一个新的操作系统， 只需在实现部分层次中创建一个子类即可。</p><h2 id="桥接模式结构" tabindex="-1"><a class="header-anchor" href="#桥接模式结构"><span>桥接模式结构</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457554.png" alt="桥接设计模式" tabindex="0" loading="lazy"><figcaption>桥接设计模式</figcaption></figure><ol><li><p><strong>抽象部分</strong> （Abstraction） 提供高层控制逻辑， 依赖于完成底层实际工作的实现对象。</p></li><li><p><strong>实现部分</strong> （Implementation） 为所有具体实现声明通用接口。 抽象部分仅能通过在这里声明的方法与实现对象交互。</p><p>抽象部分可以列出和实现部分一样的方法， 但是抽象部分通常声明一些复杂行为， 这些行为依赖于多种由实现部分声明的原语操作。</p></li><li><p><strong>具体实现</strong> （Concrete Implementations） 中包括特定于平台的代码。</p></li><li><p><strong>精确抽象</strong> （Refined Abstraction） 提供控制逻辑的变体。 与其父类一样， 它们通过通用实现接口与不同的实现进行交互。</p></li><li><p>通常情况下， <strong>客户端</strong> （Client） 仅关心如何与抽象部分合作。 但是， 客户端需要将抽象对象与一个实现对象连接起来。</p></li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>示例演示了<strong>桥接</strong>模式如何拆分程序中同时管理设备及其遥控器的庞杂代码。 <code>设备</code>Device类作为实现部分， 而 <code>遥控器</code>Remote类则作为抽象部分。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457448.png" alt="桥接模式示例的结构" tabindex="0" loading="lazy"><figcaption>桥接模式示例的结构</figcaption></figure><p>最初类层次结构被拆分为两个部分： 设备和遥控器。</p><p>遥控器基类声明了一个指向设备对象的引用成员变量。 所有遥控器通过通用设备接口与设备进行交互， 使得同一个遥控器可以支持不同类型的设备。</p><p>你可以开发独立于设备类的遥控器类， 只需新建一个遥控器子类即可。 例如， 基础遥控器可能只有两个按钮， 但你可在其基础上扩展新功能， 比如额外的一节电池或一块触摸屏。</p><p>客户端代码通过遥控器构造函数将特定种类的遥控器与设备对象连接起来。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// “抽象部分”定义了两个类层次结构中“控制”部分的接口。它管理着一个指向“实</span>
<span class="token comment">// 现部分”层次结构中对象的引用，并会将所有真实工作委派给该对象。</span>
<span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> is
    <span class="token keyword">protected</span> field device<span class="token operator">:</span> <span class="token class-name">Device</span>
    constructor <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span>device<span class="token operator">:</span> <span class="token class-name">Device</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>device <span class="token operator">=</span> device
    method <span class="token function">togglePower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">if</span> <span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> then
            device<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span>
            device<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">volumeDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        device<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span>
    method <span class="token function">volumeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        device<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
    method <span class="token function">channelDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        device<span class="token punctuation">.</span><span class="token function">setChannel</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    method <span class="token function">channelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        device<span class="token punctuation">.</span><span class="token function">setChannel</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>


<span class="token comment">// 你可以独立于设备类的方式从抽象层中扩展类。</span>
<span class="token keyword">class</span> <span class="token class-name">AdvancedRemoteControl</span> <span class="token keyword">extends</span> <span class="token class-name">RemoteControl</span> is
    method <span class="token function">mute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        device<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


<span class="token comment">// “实现部分”接口声明了在所有具体实现类中通用的方法。它不需要与抽象接口相</span>
<span class="token comment">// 匹配。实际上，这两个接口可以完全不一样。通常实现接口只提供原语操作，而</span>
<span class="token comment">// 抽象接口则会基于这些操作定义较高层次的操作。</span>
<span class="token keyword">interface</span> <span class="token class-name">Device</span> is
    method <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">setVolume</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span>
    method <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">setChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span>


<span class="token comment">// 所有设备都遵循相同的接口。</span>
<span class="token keyword">class</span> <span class="token class-name">Tv</span> <span class="token keyword">implements</span> <span class="token class-name">Device</span> is
    <span class="token comment">// ……</span>

<span class="token keyword">class</span> <span class="token class-name">Radio</span> <span class="token keyword">implements</span> <span class="token class-name">Device</span> is
    <span class="token comment">// ……</span>


<span class="token comment">// 客户端代码中的某个位置。</span>
tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
remote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span>
remote<span class="token punctuation">.</span><span class="token function">togglePower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

radio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Radio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
remote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvancedRemoteControl</span><span class="token punctuation">(</span>radio<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="桥接模式适合应用场景" tabindex="-1"><a class="header-anchor" href="#桥接模式适合应用场景"><span>桥接模式适合应用场景</span></a></h2><p>如果你想要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）， 可以使用桥接模式。</p><p>类的代码行数越多， 弄清其运作方式就越困难， 对其进行修改所花费的时间就越长。 一个功能上的变化可能需要在整个类范围内进行修改， 而且常常会产生错误， 甚至还会有一些严重的副作用。</p><p>桥接模式可以将庞杂类拆分为几个类层次结构。 此后， 你可以修改任意一个类层次结构而不会影响到其他类层次结构。 这种方法可以简化代码的维护工作， 并将修改已有代码的风险降到最低。</p><p>如果你希望在几个独立维度上扩展一个类， 可使用该模式。</p><p>桥接建议将每个维度抽取为独立的类层次。 初始类将相关工作委派给属于对应类层次的对象， 无需自己完成所有工作。</p><p>如果你需要在运行时切换不同实现方法， 可使用桥接模式。</p><p>当然并不是说一定要实现这一点， 桥接模式可替换抽象部分中的实现对象， 具体操作就和给成员变量赋新值一样简单。</p>`,51),u={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><ol><li>明确类中独立的维度。 独立的概念可能是： 抽象/平台， 域/基础设施， 前端/后端或接口/实现。</li><li>了解客户端的业务需求， 并在抽象基类中定义它们。</li><li>确定在所有平台上都可执行的业务。 并在通用实现接口中声明抽象部分所需的业务。</li><li>为你域内的所有平台创建实现类， 但需确保它们遵循实现部分的接口。</li><li>在抽象类中添加指向实现类型的引用成员变量。 抽象部分会将大部分工作委派给该成员变量所指向的实现对象。</li><li>如果你的高层逻辑有多个变体， 则可通过扩展抽象基类为每个变体创建一个精确抽象。</li><li>客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。 此后， 客户端只需与抽象对象进行交互， 无需和实现对象打交道。</li></ol><h2 id="桥接模式优缺点" tabindex="-1"><a class="header-anchor" href="#桥接模式优缺点"><span>桥接模式优缺点</span></a></h2><ul><li>你可以创建与平台无关的类和程序。</li><li>客户端代码仅与高层抽象部分进行互动， 不会接触到平台的详细信息。</li><li><em>开闭原则</em>。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。</li><li><em>单一职责原则</em>。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节。</li></ul><div class="hint-container warning"><p class="hint-container-title">缺点</p><p>对高内聚的类使用该模式可能会让代码更加复杂。</p></div><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>',6),m={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},g={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/state",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},b={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},f={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},E=s("em",null,"桥接",-1),A=s("em",null,"抽象工厂",-1),w={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},C=s("em",null,"主管",-1),j=s("em",null,"生成器",-1),I=s("em",null,"实现",-1);function B(R,P){const a=p("ExternalLinkIcon");return i(),c("div",null,[r,s("p",null,[s("em",null,[n("顺便提一句， 最后一点是很多人混淆桥接模式和"),s("a",u,[n("策略"),e(a)]),n("模式的主要原因。 记住， 设计模式并不仅是一种对类进行组织的方式， 它还能用于沟通意图和解决问题。")])]),d,s("ul",null,[s("li",null,[s("a",m,[n("桥接模式"),e(a)]),n("通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， "),s("a",g,[n("适配器模式"),e(a)]),n("通常在已有程序中使用， 让相互不兼容的类能很好地合作。")]),s("li",null,[s("a",k,[n("桥接"),e(a)]),n("、 "),s("a",h,[n("状态模式"),e(a)]),n("和"),s("a",v,[n("策略模式"),e(a)]),n(" （在某种程度上包括"),s("a",b,[n("适配器"),e(a)]),n("） 模式的接口非常相似。 实际上， 它们都基于"),s("a",f,[n("组合模式"),e(a)]),n("——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。")]),s("li",null,[n("你可以将"),s("a",_,[n("抽象工厂模式"),e(a)]),n("和"),s("a",y,[n("桥接"),e(a)]),n("搭配使用。 如果由"),E,n("定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， "),A,n("可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。")]),s("li",null,[n("你可以结合使用"),s("a",w,[n("生成器模式"),e(a)]),n("和"),s("a",x,[n("桥接模式"),e(a)]),n("： "),C,n("类负责抽象工作， 各种不同的"),j,n("负责"),I,n("工作。")])])])}const U=o(l,[["render",B],["__file","桥接.html.vue"]]),z=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"title":"桥接模式","description":"简介 桥接模式是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。 桥接设计模式桥接设计模式 问题 抽象？ 实现？ 听上去挺吓人？ 让我们慢慢来， 先考虑一个简单的例子。 假如你有一个几何 形状Shape类， 从它能扩展出两个子类： 圆形Circle和 方形Square 。 你希望对这样...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"简介 桥接模式是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。 桥接设计模式桥接设计模式 问题 抽象？ 实现？ 听上去挺吓人？ 让我们慢慢来， 先考虑一个简单的例子。 假如你有一个几何 形状Shape类， 从它能扩展出两个子类： 圆形Circle和 方形Square 。 你希望对这样..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281451978.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281451978.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281455948.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281455361.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281456229.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457072.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457554.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281457448.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"桥接模式结构","slug":"桥接模式结构","link":"#桥接模式结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"桥接模式适合应用场景","slug":"桥接模式适合应用场景","link":"#桥接模式适合应用场景","children":[]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":2,"title":"桥接模式优缺点","slug":"桥接模式优缺点","link":"#桥接模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{},"readingTime":{"minutes":11.17,"words":3351},"filePathRelative":"guide/设计模式/结构型模式/桥接.md","autoDesc":true}');export{U as comp,z as data};

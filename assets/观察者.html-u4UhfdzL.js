import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,f as a,e,d as i}from"./app-D1py-eEI.js";const l={},u=n("p",null,[n("strong",null,"观察者"),e("是一种行为设计模式， 允许一个对象将其状态的改变通知其他对象")],-1),r=n("p",null,"观察者模式提供了一种作用于任何实现了订阅者接口的对象的机制， 可对其事件进行订阅和取消订阅。",-1),k=n("p",null,[n("strong",null,"使用示例："),e(" 观察者模式在 Java 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。")],-1),d=n("p",null,"这里是核心 Java 程序库中该模式的一些示例：",-1),v={href:"http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"java.util.Observer",-1),b={href:"http://docs.oracle.com/javase/8/docs/api/java/util/Observable.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"java.util.Observable",-1),y={href:"http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"java.util.EventListener",-1),f={href:"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"javax.servlet.http.HttpSessionBindingListener",-1),E={href:"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionAttributeListener.html",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"javax.servlet.http.HttpSessionAttributeListener",-1),_={href:"http://docs.oracle.com/javaee/7/api/javax/faces/event/PhaseListener.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"javax.faces.event.PhaseListener",-1),x=i(`<p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p>观察者模式其实也是发布订阅模式。 针对不同的观察者需要有不同的实现方式，所以先创建一个管理者的接口，将其定义为一个抽象概念，方便后续扩展。 这个接口相当于-群（管理者）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 观察者的顶层接口
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObserverInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//注册监听者</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//移除监听者</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//通知监听者</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListener</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义抽象的监听者接口 这个接口相当于-群成员（监听者）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Listener的顶级接口，为了抽象Listener而存在
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义抽象的事件接口 这个接口相当于群里面发布的通知</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataEvent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建管理者的实现类，相当于具体的群（如微信群，钉钉群）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 循环调用方式的观察者（同步）
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoopObserverImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ObserverInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyListener</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//监听者的注册列表</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyListener</span><span class="token punctuation">&gt;</span></span> listenerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token class-name">MyListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listenerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">MyListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listenerList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListener</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyListener</span> myListener <span class="token operator">:</span> listenerList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            myListener<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建两个event的实现类，一个是积分事件，一个是短信事件</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 积分事件类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScoreDataEvent</span> <span class="token keyword">extends</span> <span class="token class-name">DataEvent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 短信事件类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsDataEvent</span> <span class="token keyword">extends</span> <span class="token class-name">DataEvent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建两个listener的实现类，一个是处理积分的，一个是处理短信的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * MyListener的实现类，分数监听者
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScoreListener</span> <span class="token keyword">implements</span> <span class="token class-name">MyListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> dataEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataEvent <span class="token keyword">instanceof</span> <span class="token class-name">ScoreDataEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...省略业务逻辑</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;积分处理：&quot;</span> <span class="token operator">+</span> dataEvent<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * MyListener的实现类，短信监听者
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySmsListener</span> <span class="token keyword">implements</span> <span class="token class-name">MyListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> dataEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataEvent <span class="token keyword">instanceof</span> <span class="token class-name">SmsDataEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...省略短信处理逻辑</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;短信处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察者模式的要素就到齐了，我们在main方法里面跑一下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//通过spring的AnnotationConfigApplicationContext将com.example.demo.user.admin.design路径下的所有加了spring注解的类都扫描放入spring容器</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.demo.user.admin.design&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从spring容器中获取对应bean的实例</span>
        <span class="token class-name">LoopObserverImpl</span> loopObserver <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">LoopObserverImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyScoreListener</span> scoreL <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyScoreListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MySmsListener</span> smsL <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MySmsListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//向观察者中注册listener</span>
        loopObserver<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>scoreL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        loopObserver<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>smsL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ScoreDataEvent</span> scoreData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScoreDataEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scoreData<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;循环同步观察者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发布积分事件，通知监听者</span>
        loopObserver<span class="token punctuation">.</span><span class="token function">notifyListener</span><span class="token punctuation">(</span>scoreData<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/*******************************************/</span>
        <span class="token comment">//从spring容器获取QueueObserverImpl观察者</span>
        
        <span class="token class-name">QueueObserverImpl</span> queueObserver <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">QueueObserverImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向观察者中注册listener</span>
        queueObserver<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>scoreL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queueObserver<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>smsL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ScoreDataEvent</span> scoreData1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScoreDataEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scoreData1<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;队列异步观察者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发布积分事件，通知监听者</span>
        queueObserver<span class="token punctuation">.</span><span class="token function">notifyListener</span><span class="token punctuation">(</span>scoreData1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看看下面这个新的观察者实现类和上面示例中的的观察者实现类<code>LoopObserverImpl</code>有什么不同吗</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 启动一个线程循环阻塞队列的观察者，可以实现解耦异步。
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueObserverImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ObserverInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyListener</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//监听者的注册列表</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyListener</span><span class="token punctuation">&gt;</span></span> listenerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个大小为10的阻塞队列</span>
    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataEvent</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个线程池</span>
    <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;com.kangarooking.observer.worker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    private ExecutorService executorService = Executors.newFixedThreadPool(1);</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token class-name">MyListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listenerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">MyListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listenerList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListener</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;向队列放入DataMsg：&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化时启动一个线程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;循环从阻塞队列里面获取数据，take是阻塞队列没有数据就会阻塞住&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">DataEvent</span> dataMsg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;从阻塞队列获取到数据：&quot;</span> <span class="token operator">+</span> dataMsg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">eventNotify</span><span class="token punctuation">(</span>dataMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">eventNotify</span><span class="token punctuation">(</span><span class="token class-name">DataEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;循环所有的监听者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyListener</span> myListener <span class="token operator">:</span> listenerList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            myListener<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同之处就是引入了阻塞队列，让通知这个操作变成异步操作，既只需要将event时间放入阻塞队列之后就可以直接返回了。不用像<code>LoopObserverImpl</code>要等到listener注册表循环完毕才能返回。这样就实现了通知操作和循环listener注册表的解耦和异步。</p><p>举例说明异步实现和同步实现的区别： 同步：还是团建群的例子，假如领导是保姆型领导，通知下来任务之后可能不太放心，要挨个问，小张你准备什么表演阿，大概多久能准备好鸭。小红你呢→_→。。。 异步：假如是甩手掌柜型领导，发布完消息之后他就不管了。 上面就是同步和异步的区别，同步就是领导是个保姆，挨个问挨个了解情况之后这个事情才算完。异步就是领导发布完消息就完事儿。</p><h3 id="开源框架的实现" tabindex="-1"><a class="header-anchor" href="#开源框架的实现"><span>开源框架的实现</span></a></h3><h4 id="同步方式" tabindex="-1"><a class="header-anchor" href="#同步方式"><span>同步方式</span></a></h4><p>spring的发布订阅就是基于同步的观察者模式: 简单来说就是将所有的监听者注册到一个列表里面，然后当发布事件时，通过循环监听者列表，在循环里面调用每个监听者的onEvent方法，每个监听者实现的在onEvent方法里面判断传入的event是否属于当前需要的event，属于就处理该事件，反之不处理。</p><p>spring的<code>ApplicationEventMulticaster</code>就是示例讲的观察者顶层接口</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281617336.png" alt="image-20240428161700260" style="zoom:50%;"><p><code>ApplicationListener</code>就是示例代码的监听者顶层接口</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281631086.png" alt="image-20240428163132977" style="zoom:50%;"><p><code>ApplicationEventMulticaster</code>的<code>multicastEvent</code>方法就是通知方法，这里就是循环监听者注册表，调用每个监听者的onApplicationEvent方法（这里的<code>invokeListener</code>方法里面最终会调用到<code>listener.onApplicationEvent(event);</code>）</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281638499.png" alt="image-20240428163851397" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281639805.png" alt="image-20240428163932735" style="zoom:50%;"><h4 id="异步方式" tabindex="-1"><a class="header-anchor" href="#异步方式"><span>异步方式</span></a></h4><p>nacos中有很多地方都使用到了观察者模式，如client端和server端建立连接，发布连接事件，相关监听者做相应的处理，断开连接也是一样。</p><p>在server端接收到client端的注册请求后，会发布一个注册事件的通知</p><p>在nacos-server启动的时候也是会开启一个线程做死循环，循环的去queue里面take数据，如果没有的话就会阻塞。所以死循环只有在queue里面一直有数据的时候才会一直循环，当queue里面没有数据的时候就会阻塞在<code>queue.take();</code>方法处。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281643134.png" alt="image-20240428164306039" style="zoom:50%;"><p>我们看看<code>receiveEvent(event);</code>方法里面做了什么，这里就体现了框架里面设计的精妙：在上面我们自己的设计中，这里应该是需要循环调用所有的listener的<code>onApplicationEvent</code>方法，但是当注册表中listener太多的时候就会出现（有些event可能会有多个listener需要处理）循环调用太慢的问题，这里使用多线程的处理方式，让这些调用并行处理，大大的提高了框架的事件处理效率。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281643317.png" alt="image-20240428164329178" style="zoom:80%;">`,36);function A(S,M){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,r,k,d,n("ul",null,[n("li",null,[n("a",v,[m,a(s)]),e("/"),n("a",b,[g,a(s)]),e(" （极少在真实世界中使用）")]),n("li",null,[n("a",y,[h,a(s)]),e("的所有实现 （几乎广泛存在于 Swing 组件中）")]),n("li",null,[n("a",f,[w,a(s)])]),n("li",null,[n("a",E,[L,a(s)])]),n("li",null,[n("a",_,[j,a(s)])])]),x])}const D=t(l,[["render",A],["__file","观察者.html.vue"]]),B=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/%E8%A7%82%E5%AF%9F%E8%80%85.html","title":"观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式","description":"观察者是一种行为设计模式， 允许一个对象将其状态的改变通知其他对象 观察者模式提供了一种作用于任何实现了订阅者接口的对象的机制， 可对其事件进行订阅和取消订阅。 使用示例： 观察者模式在 Java 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。 这里是核心 Java 程序库中该模式的一些示例...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/%E8%A7%82%E5%AF%9F%E8%80%85.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"观察者是一种行为设计模式， 允许一个对象将其状态的改变通知其他对象 观察者模式提供了一种作用于任何实现了订阅者接口的对象的机制， 可对其事件进行订阅和取消订阅。 使用示例： 观察者模式在 Java 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。 这里是核心 Java 程序库中该模式的一些示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"开源框架的实现","slug":"开源框架的实现","link":"#开源框架的实现","children":[]}],"git":{},"readingTime":{"minutes":6.59,"words":1976},"filePathRelative":"guide/设计模式/代码示例/观察者.md","autoDesc":true}');export{D as comp,B as data};

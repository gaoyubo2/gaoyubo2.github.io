import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as t}from"./app-D1py-eEI.js";const e={},p=t(`<h2 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口"><span>函数式接口</span></a></h2><p>函数式接口：当一个接口只有一个方法时，就称为函数式接口，可以使用Lambda表达式进行简化编码。java中根据入参和出参不同内置了四大核心函数型接口。</p><p>java内置四大核心函数式接口</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404121543331.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function"><span>Function</span></a></h3><p>函数型接口，有入参有出参</p><p>可使用 :: 进行进一步简化</p><p>代码形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//格式</span>
x<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如流中的map</span>
<span class="token comment">//格式1</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> stuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//格式1</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> stuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="predicate" tabindex="-1"><a class="header-anchor" href="#predicate"><span>Predicate</span></a></h3><p>断定型接口，有入参有出参，出参是布尔类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//格式</span>
x<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;wp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">//如流中的filter</span>
<span class="token class-name">List</span> newList <span class="token operator">=</span> stuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;wp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="supplier" tabindex="-1"><a class="header-anchor" href="#supplier"><span>supplier</span></a></h3><p>供给型接口，无入参有出参</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//格式
()-&gt;{return &quot;hello!&quot;}
//如流中的集合转换collect
List newList = stuList.stream().filter(x-&gt;x.getName().equals(&quot;wp&quot;)).collect(Collectors.toList());

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可能感受不出来collect使用了函数式接口，当点开collect方法和Collectors.toList()即可知道</p></div><h3 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h3><p>消费型接口，有入参无出参</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//格式</span>
x<span class="token operator">-&gt;</span><span class="token punctuation">{</span>x<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;wp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token comment">//如foreach</span>
listStu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>x<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;wp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他接口" tabindex="-1"><a class="header-anchor" href="#其他接口"><span>其他接口</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404121552228.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,21),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","函数式接口.html.vue"]]),k=JSON.parse('{"path":"/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html","title":"函数式接口","lang":"zh-CN","frontmatter":{"title":"函数式接口","description":"函数式接口 函数式接口：当一个接口只有一个方法时，就称为函数式接口，可以使用Lambda表达式进行简化编码。java中根据入参和出参不同内置了四大核心函数型接口。 java内置四大核心函数式接口 imgimg Function 函数型接口，有入参有出参 可使用 :: 进行进一步简化 代码形式 Predicate 断定型接口，有入参有出参，出参是布尔类型...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"函数式接口"}],["meta",{"property":"og:description","content":"函数式接口 函数式接口：当一个接口只有一个方法时，就称为函数式接口，可以使用Lambda表达式进行简化编码。java中根据入参和出参不同内置了四大核心函数型接口。 java内置四大核心函数式接口 imgimg Function 函数型接口，有入参有出参 可使用 :: 进行进一步简化 代码形式 Predicate 断定型接口，有入参有出参，出参是布尔类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404121543331.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数式接口\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404121543331.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404121552228.jpeg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"函数式接口","slug":"函数式接口","link":"#函数式接口","children":[{"level":3,"title":"Function","slug":"function","link":"#function","children":[]},{"level":3,"title":"Predicate","slug":"predicate","link":"#predicate","children":[]},{"level":3,"title":"supplier","slug":"supplier","link":"#supplier","children":[]},{"level":3,"title":"Consumer","slug":"consumer","link":"#consumer","children":[]},{"level":3,"title":"其他接口","slug":"其他接口","link":"#其他接口","children":[]}]}],"git":{},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"guide/JDK8新特性/函数式接口.md","autoDesc":true}');export{d as comp,k as data};

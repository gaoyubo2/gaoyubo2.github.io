import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,d}from"./app-D1py-eEI.js";const n={},c=d(`<h2 id="什么是gin" tabindex="-1"><a class="header-anchor" href="#什么是gin"><span>什么是Gin</span></a></h2><ul><li>Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点</li><li>对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的<code>net/http</code>足够简单，性能也非常不错</li><li>借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范</li></ul><h1 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h1><p>用 <code>GoLand</code> 新建项目的时候，我们选择 <code>Go Modules(vgo)</code> ，填写我们的项目地址和项目名称，我们命名为 <code>learn1</code> 。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202405071728945.png" alt="image-20240507172831874" tabindex="0" loading="lazy"><figcaption>image-20240507172831874</figcaption></figure><p>点击 <code>Create</code> ,此时 <code>Goland</code> 为我们生成了项目目录，<code>Go</code> 项目的目录永远是那么的简单，比 <code>Java</code> 的 <code>Maven</code> 或者 <code>Gradle</code> 生成的项目目录简单多了。</p><p>| <code>1 2 3 </code> | <code>GinHello | |-go.mod </code> | | -------- | ---------------------- | | | |</p><p>对，就是一个文件 ，一个 <code>Go module</code> 文件。<code>go mod</code> 是 <code>Go</code> 官方引入的一个依赖管理工具。</p><h2 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h2><p>通过 <code>go mod</code> 文件进行依赖的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>require github.com/gin-gonic/gin v1.4.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们把上面的依赖进行添加到 <code>go module</code> 中， <code>goLand</code> 会自动帮我们进行依赖的下载和管理。</p><h2 id="hello-gin" tabindex="-1"><a class="header-anchor" href="#hello-gin"><span>Hello Gin</span></a></h2><p>当完成依赖的添加，就可以开始写代码了。</p><p>新建一个 <code>main.go</code> 文件。</p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 10</code></th><th><code>package main import ( &quot;github.com/gin-gonic/gin&quot; ) func main() { router := gin.Default() router.Run() } </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><code>Gin</code> 只需要两行代码就可以把我们的服务跑起来。</p><p>我们只要点击运行，项目便会启动一个 <code>8080</code> 端口，打开浏览器 <code>localhost:8080</code> 我们便可以看到页面上提示出 <code>404 page not found</code> ，这是因为我们的根路由上并没有返回任何结果。同时我们可以在控制台上看到一些打印信息，其中就包括我们刚刚访问根路由的端口。</p><h2 id="产生接口" tabindex="-1"><a class="header-anchor" href="#产生接口"><span>产生接口</span></a></h2><p>项目已经启动了，那么如何返回一个接口呢？</p><p>通过 <code>router</code> 的 <code>Handle</code> 进行配置我们返回的参数。</p><table><thead><tr><th><code>1 2 3 4 5 6 </code></th><th><code> // 省略代码 // 添加 Get 请求路由 router.GET(&quot;/&quot;, func(context *gin.Context) { context.String(http.StatusOK, &quot;hello gin&quot;) }) // 省略代码 </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>此时我们重启项目，重新访问页面 <code>localhost:8080</code>，此刻的页面上已经显示了 <code>hello gin</code>。</p><p>同样，我们还可以进行 <code>POST</code>,<code>PUT</code>,<code>DELETE</code>等请求方式。</p><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h2><p>单元测试是项目不能缺少的模块，也是保障项目可以正常运行的重要依赖。下面就对　Gin 进行单元测试。</p><p>为了方便单元测试，我们首先要对我们的项目进行一下抽取。</p><p>新建立一个文件夹叫做 <code>router</code></p><p>建立 <code>go</code> 文件 <code>router.go</code></p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</code></th><th><code>package router import ( &quot;github.com/gin-gonic/gin&quot; &quot;net/http&quot; ) func SetupRouter() *gin.Engine { router := gin.Default() // 添加 Get 请求路由 router.GET(&quot;/&quot;, func(context *gin.Context) { context.String(http.StatusOK, &quot;hello gin&quot;) }) return router } </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>同时修改 <code>main.go</code></p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 10</code></th><th><code>package main import ( &quot;GinHello/router&quot; ) func main() { router := router.SetupRouter() _ = router.Run() } </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>完成了项目测试的初步建立。</p><p>在 <code>router</code> 目录中, <code>golang</code> 的单元测试都是以 <code>_test</code> 结尾，建立 <code>router_test.go</code> 文件。</p><table><thead><tr><th><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</code></th><th><code>package router import ( &quot;github.com/stretchr/testify/assert&quot; &quot;net/http&quot; &quot;net/http/httptest&quot; &quot;testing&quot; ) func TestRouter(t *testing.T) { router := SetupRouter() w := httptest.NewRecorder() req, _ := http.NewRequest(http.MethodGet, &quot;/&quot;, nil) router.ServeHTTP(w, req) assert.Equal(t, http.StatusOK, w.Code) assert.Equal(t, &quot;hello gin&quot;, w.Body.String()) } </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>通过 <code>assert</code> 进行断言，来判断返回状态码和返回值是否与代码中的值一致。</p><p>此时的项目目录为：</p><p>| <code>1 2 3 4 5 6 7 8 9 </code> | <code>GinHello | |-router | |-router.go | |-router_test.go | |-main.go |-go.mod |-go.sum </code> | | -------------------- | ------------------------------------------------------------ | | | |</p><p>运行单元测试，控制台打印出单元测试结果。</p><blockquote><p>— PASS: TestRouter (0.02s) PASS</p></blockquote>`,40),a=[c];function r(i,l){return t(),o("div",null,a)}const u=e(n,[["render",r],["__file","Gin框架笔记.html.vue"]]),g=JSON.parse('{"path":"/guide/Go%E5%AD%A6%E4%B9%A0/Gin%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0.html","title":"Gin框架笔记","lang":"zh-CN","frontmatter":{"title":"Gin框架笔记","description":"什么是Gin Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点 对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错 借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范 快速入门 用 GoL...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/Go%E5%AD%A6%E4%B9%A0/Gin%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"Gin框架笔记"}],["meta",{"property":"og:description","content":"什么是Gin Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点 对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错 借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范 快速入门 用 GoL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202405071728945.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gin框架笔记\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202405071728945.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是Gin","slug":"什么是gin","link":"#什么是gin","children":[]},{"level":2,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":2,"title":"Hello Gin","slug":"hello-gin","link":"#hello-gin","children":[]},{"level":2,"title":"产生接口","slug":"产生接口","link":"#产生接口","children":[]},{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]}],"git":{},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"guide/Go学习/Gin框架笔记.md","autoDesc":true}');export{u as comp,g as data};

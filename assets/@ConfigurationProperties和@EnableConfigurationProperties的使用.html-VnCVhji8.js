import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o,c as t,b as i,e as n,f as r,w as p,d as l}from"./app-D1py-eEI.js";const c={},u=l(`<h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>当使用<code>@ConfigurationProperties</code>来将配置类的属性与yaml配置文件绑定时，必须添加<code>@Component</code>注解才能使绑定生效并注入到IOC容器中，否则会失效。</p><p>而<code>@EnableConfigurationProperties</code>的作用则是<strong>让使用了<code>@ConfigurationProperties</code>注解的配置类生效</strong>，将其注入到IOC容器中，<strong>不需要额外添加<code>@Component</code>注解。</strong></p><h2 id="代码例子" tabindex="-1"><a class="header-anchor" href="#代码例子"><span>代码例子</span></a></h2><h3 id="_1-configurationproperties的使用" tabindex="-1"><a class="header-anchor" href="#_1-configurationproperties的使用"><span>1. @ConfigurationProperties的使用</span></a></h3><p>具体的yml文件字符串、List、Map的书写方式并使用<code>@ConfigurationProperties</code>注入配置类</p><p><strong>配置类</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>yml配置文件</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">demo</span><span class="token punctuation">:</span>
  <span class="token key atrule">user-name</span><span class="token punctuation">:</span> hello
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试代码</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DemoConfig</span> demoConfig<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">ApplicationRunne接口</p><p><code>ApplicationRunner</code>接口是Spring Boot中的一个接口，用于在Spring Boot应用启动后执行一些特定的逻辑。该接口定义了一个方法<code>run</code>，<strong>在Spring Boot应用启动完成后，Spring容器会调用<code>run</code>方法</strong>，并传入应用的参数。</p></div><p><strong>结果</strong></p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404191011935.png" alt="image-20240419101153849" style="zoom:50%;"><h3 id="_2-enableconfigurationproperties的使用" tabindex="-1"><a class="header-anchor" href="#_2-enableconfigurationproperties的使用"><span>2. @EnableConfigurationProperties的使用</span></a></h3><p>当去掉配置类的@Component时候，则会报下面错误提示：</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404191015896.png" alt="image-20240419101540850" style="zoom:50%;"><p>新建一个配置类，加上@EnableConfigurationProperties，参数指定配置类(DemoConfig)，该配置类(DemoConfig )上必须得有@ConfigurationProperties注解</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404191020934.png" alt="image-20240419102041847" style="zoom:50%;"><h3 id="_3-为什么会有-enableconfigurationproperties出现呢" tabindex="-1"><a class="header-anchor" href="#_3-为什么会有-enableconfigurationproperties出现呢"><span>3. 为什么会有@EnableConfigurationProperties出现呢？</span></a></h3><p>有的人可能会问，直接在配置类上加@Component注解，不就可以了吗，为什么还要有@EnableConfigurationProperties出现呢？</p>`,22);function d(g,m){const e=s("RouteLink");return o(),t("div",null,[u,i("p",null,[n("答："),r(e,{to:"/guide/SpringBoot%E5%AD%A6%E4%B9%A0/@EnableAutoConfiguration%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html"},{default:p(()=>[n("@EnableAutoConfiguration自动装配")]),_:1})])])}const k=a(c,[["render",d],["__file","@ConfigurationProperties和@EnableConfigurationProperties的使用.html.vue"]]),b=JSON.parse('{"path":"/guide/SpringBoot%E5%AD%A6%E4%B9%A0/@ConfigurationProperties%E5%92%8C@EnableConfigurationProperties%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"ConfigurationProperties和EnableConfigurationProperties的使用","lang":"zh-CN","frontmatter":{"title":"ConfigurationProperties和EnableConfigurationProperties的使用","description":"结论 当使用@ConfigurationProperties来将配置类的属性与yaml配置文件绑定时，必须添加@Component注解才能使绑定生效并注入到IOC容器中，否则会失效。 而@EnableConfigurationProperties的作用则是让使用了@ConfigurationProperties注解的配置类生效，将其注入到IOC容器中，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/SpringBoot%E5%AD%A6%E4%B9%A0/@ConfigurationProperties%E5%92%8C@EnableConfigurationProperties%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"ConfigurationProperties和EnableConfigurationProperties的使用"}],["meta",{"property":"og:description","content":"结论 当使用@ConfigurationProperties来将配置类的属性与yaml配置文件绑定时，必须添加@Component注解才能使绑定生效并注入到IOC容器中，否则会失效。 而@EnableConfigurationProperties的作用则是让使用了@ConfigurationProperties注解的配置类生效，将其注入到IOC容器中，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ConfigurationProperties和EnableConfigurationProperties的使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"代码例子","slug":"代码例子","link":"#代码例子","children":[{"level":3,"title":"1. @ConfigurationProperties的使用","slug":"_1-configurationproperties的使用","link":"#_1-configurationproperties的使用","children":[]},{"level":3,"title":"2. @EnableConfigurationProperties的使用","slug":"_2-enableconfigurationproperties的使用","link":"#_2-enableconfigurationproperties的使用","children":[]},{"level":3,"title":"3. 为什么会有@EnableConfigurationProperties出现呢？","slug":"_3-为什么会有-enableconfigurationproperties出现呢","link":"#_3-为什么会有-enableconfigurationproperties出现呢","children":[]}]}],"git":{},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"guide/SpringBoot学习/@ConfigurationProperties和@EnableConfigurationProperties的使用.md","autoDesc":true}');export{k as comp,b as data};

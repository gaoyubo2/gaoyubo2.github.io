import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,b as s,e as n,f as e,d as t}from"./app-D1py-eEI.js";const r={},c=t(`<p><strong>亦称：</strong> 封装器模式、Wrapper、Adapter</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281357207.png" alt="适配器设计模式" tabindex="0" loading="lazy"><figcaption>适配器设计模式</figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p><p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281357746.png" alt="整合分析函数库之前的程序结构" tabindex="0" loading="lazy"><figcaption>整合分析函数库之前的程序结构</figcaption></figure><blockquote><p>无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。</p></blockquote><p>你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>你可以创建一个<em>适配器</em>。 这是一个特殊的对象， 能够转换对象接口， 使其能与其他对象进行交互。</p><p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p><p>适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p><ol><li>适配器实现与其中一个现有对象兼容的接口。</li><li>现有对象可以使用该接口安全地调用适配器方法。</li><li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li></ol><p>有时你甚至可以创建一个双向适配器来实现双向转换调用。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358043.png" alt="适配器解决方案" tabindex="0" loading="lazy"><figcaption>适配器解决方案</figcaption></figure><p>让我们回到股票市场程序。 为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 XML 转换为 JSON 格式的适配器， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其传递给被封装分析对象的相应方法。</p><h2 id="真实世界类比" tabindex="-1"><a class="header-anchor" href="#真实世界类比"><span>真实世界类比</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358508.png" alt="适配器模式的示例" tabindex="0" loading="lazy"><figcaption>适配器模式的示例</figcaption></figure><p>出国旅行前后的旅行箱。</p><p>如果你是第一次从美国到欧洲旅行， 那么在给笔记本充电时可能会大吃一惊。 不同国家的电源插头和插座标准不同。 美国插头和德国插座不匹配。 同时提供美国标准插座和欧洲标准插头的电源适配器可以解决你的难题。</p><h2 id="适配器模式结构" tabindex="-1"><a class="header-anchor" href="#适配器模式结构"><span>适配器模式结构</span></a></h2><h4 id="对象适配器" tabindex="-1"><a class="header-anchor" href="#对象适配器"><span>对象适配器</span></a></h4><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358067.png" alt="适配器设计模式的结构（对象适配器）" tabindex="0" loading="lazy"><figcaption>适配器设计模式的结构（对象适配器）</figcaption></figure><ol><li><strong>客户端</strong> （Client） 是包含当前程序业务逻辑的类。</li><li><strong>客户端接口</strong> （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。</li><li><strong>服务</strong> （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。</li><li><strong>适配器</strong> （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。</li><li>客户端代码只需通过接口与适配器交互即可， 无需与具体的适配器类耦合。 因此， 你可以向程序中添加新类型的适配器而无需修改已有代码。 这在服务类的接口被更改或替换时很有用： 你无需修改客户端代码就可以创建新的适配器类。</li></ol><h4 id="类适配器" tabindex="-1"><a class="header-anchor" href="#类适配器"><span>类适配器</span></a></h4><p>这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358978.png" alt="适配器设计模式（类适配器）" tabindex="0" loading="lazy"><figcaption>适配器设计模式（类适配器）</figcaption></figure><ol><li><strong>类适配器</strong>不需要封装任何对象， 因为它同时继承了客户端和服务的行为。 适配功能在重写的方法中完成。 最后生成的适配器可替代已有的客户端类进行使用。</li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>下列<strong>适配器</strong>模式演示基于经典的 “方钉和圆孔” 问题。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281359334.png" alt="适配器模式结构的示例" tabindex="0" loading="lazy"><figcaption>适配器模式结构的示例</figcaption></figure><blockquote><p>让方钉适配圆孔。</p></blockquote><p>适配器假扮成一个圆钉 （Round­Peg）， 其半径等于方钉 （Square­Peg） 横截面对角线的一半 （即能够容纳方钉的最小外接圆的半径）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 假设你有两个接口相互兼容的类：圆孔（Round­Hole）和圆钉（Round­Peg）。</span>
<span class="token keyword">class</span> <span class="token class-name">RoundHole</span> is
    constructor <span class="token class-name">RoundHole</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>

    method <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 返回孔的半径。</span>

    method <span class="token function">fits</span><span class="token punctuation">(</span>peg<span class="token operator">:</span> <span class="token class-name">RoundPeg</span><span class="token punctuation">)</span> is
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> peg<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">RoundPeg</span> is
    constructor <span class="token class-name">RoundPeg</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>

    method <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 返回钉子的半径。</span>


<span class="token comment">// 但还有一个不兼容的类：方钉（Square­Peg）。</span>
<span class="token keyword">class</span> <span class="token class-name">SquarePeg</span> is
    constructor <span class="token class-name">SquarePeg</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>

    method <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 返回方钉的宽度。</span>


<span class="token comment">// 适配器类让你能够将方钉放入圆孔中。它会对 RoundPeg 类进行扩展，以接收适</span>
<span class="token comment">// 配器对象作为圆钉。</span>
<span class="token keyword">class</span> <span class="token class-name">SquarePegAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RoundPeg</span> is
    <span class="token comment">// 在实际情况中，适配器中会包含一个 SquarePeg 类的实例。</span>
    <span class="token keyword">private</span> field peg<span class="token operator">:</span> <span class="token class-name">SquarePeg</span>

    constructor <span class="token class-name">SquarePegAdapter</span><span class="token punctuation">(</span>peg<span class="token operator">:</span> <span class="token class-name">SquarePeg</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>peg <span class="token operator">=</span> peg

    method <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token comment">// 适配器会假扮为一个圆钉，其半径刚好能与适配器实际封装的方钉搭配</span>
        <span class="token comment">// 起来。</span>
        <span class="token keyword">return</span> peg<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>


<span class="token comment">// 客户端代码中的某个位置。</span>
hole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundHole</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
rpeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundPeg</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
hole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>rpeg<span class="token punctuation">)</span> <span class="token comment">// true</span>

small_sqpeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePeg</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
large_sqpeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePeg</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
hole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>small_sqpeg<span class="token punctuation">)</span> <span class="token comment">// 此处无法编译（类型不一致）。</span>

small_sqpeg_adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePegAdapter</span><span class="token punctuation">(</span>small_sqpeg<span class="token punctuation">)</span>
large_sqpeg_adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePegAdapter</span><span class="token punctuation">(</span>large_sqpeg<span class="token punctuation">)</span>
hole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>small_sqpeg_adapter<span class="token punctuation">)</span> <span class="token comment">// true</span>
hole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>large_sqpeg_adapter<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="适配器模式适合应用场景" tabindex="-1"><a class="header-anchor" href="#适配器模式适合应用场景"><span>适配器模式适合应用场景</span></a></h2><p>当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类。</p><p>适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。</p><p>如果您需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。</p>`,41),u={href:"https://refactoringguru.cn/smells/duplicate-code",target:"_blank",rel:"noopener noreferrer"},d={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},g=t('<h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><ol><li>确保至少有两个类的接口不兼容： <ul><li>一个无法修改 （通常是第三方、 遗留系统或者存在众多已有依赖的类） 的功能性<em>服务</em>类。</li><li>一个或多个将受益于使用服务类的<em>客户端</em>类。</li></ul></li><li>声明客户端接口， 描述客户端如何与服务交互。</li><li>创建遵循客户端接口的适配器类。 所有方法暂时都为空。</li><li>在适配器类中添加一个成员变量用于保存对于服务对象的引用。 通常情况下会通过构造函数对该成员变量进行初始化， 但有时在调用其方法时将该变量传递给适配器会更方便。</li><li>依次实现适配器类客户端接口的所有方法。 适配器会将实际工作委派给服务对象， 自身只负责接口或数据格式的转换。</li><li>客户端必须通过客户端接口使用适配器。 这样一来， 你就可以在不影响客户端代码的情况下修改或扩展适配器。</li></ol><h2 id="适配器模式优缺点" tabindex="-1"><a class="header-anchor" href="#适配器模式优缺点"><span>适配器模式优缺点</span></a></h2><ul><li><em>单一职责原则</em>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li></ul><div class="hint-container warning"><p class="hint-container-title">缺点</p><p>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</p></div><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>',6),m={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},f=s("em",null,"装饰",-1),b=s("em",null,"适配器",-1),_={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/proxy",target:"_blank",rel:"noopener noreferrer"},E={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoringguru.cn/design-patterns/facade",target:"_blank",rel:"noopener noreferrer"},q={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},w=s("em",null,"适配器",-1),A=s("em",null,"外观",-1),P={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},j={href:"https://refactoringguru.cn/design-patterns/state",target:"_blank",rel:"noopener noreferrer"},S={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},R={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},B={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,"文章原文：https://refactoringguru.cn/design-patterns/adapter",-1);function M(N,z){const a=o("ExternalLinkIcon");return i(),l("div",null,[c,s("p",null,[n("你可以扩展每个子类， 将缺少的功能添加到新的子类中。 但是， 你必须在所有新子类中重复添加这些代码， 这样会使得代码有"),s("a",u,[n("坏味道"),e(a)]),n("。")]),s("p",null,[n("将缺失功能添加到一个适配器类中是一种优雅得多的解决方案。 然后你可以将缺少功能的对象封装在适配器中， 从而动态地获取所需功能。 如要这一点正常运作， 目标类必须要有通用接口， 适配器的成员变量应当遵循该通用接口。 这种方式同"),s("a",d,[n("装饰"),e(a)]),n("模式非常相似。")]),g,s("ul",null,[s("li",null,[s("a",m,[n("桥接模式"),e(a)]),n("通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， "),s("a",h,[n("适配器模式"),e(a)]),n("通常在已有程序中使用， 让相互不兼容的类能很好地合作。")]),s("li",null,[s("a",k,[n("适配器"),e(a)]),n("可以对已有对象的接口进行修改， "),s("a",v,[n("装饰模式"),e(a)]),n("则能在不改变对象接口的前提下强化对象功能。 此外， "),f,n("还支持递归组合， "),b,n("则无法实现。")]),s("li",null,[s("a",_,[n("适配器"),e(a)]),n("能为被封装对象提供不同的接口， "),s("a",y,[n("代理模式"),e(a)]),n("能为对象提供相同的接口， "),s("a",E,[n("装饰"),e(a)]),n("则能为对象提供加强的接口。")]),s("li",null,[s("a",x,[n("外观模式"),e(a)]),n("为现有对象定义了一个新接口， "),s("a",q,[n("适配器"),e(a)]),n("则会试图运用已有的接口。 "),w,n("通常只封装一个对象， "),A,n("通常会作用于整个对象子系统上。")]),s("li",null,[s("a",P,[n("桥接"),e(a)]),n("、 "),s("a",j,[n("状态模式"),e(a)]),n("和"),s("a",S,[n("策略模式"),e(a)]),n(" （在某种程度上包括"),s("a",R,[n("适配器"),e(a)]),n("） 模式的接口非常相似。 实际上， 它们都基于"),s("a",B,[n("组合模式"),e(a)]),n("——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。")])]),C])}const X=p(r,[["render",M],["__file","适配器.html.vue"]]),W=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","description":"亦称： 封装器模式、Wrapper、Adapter 简介 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。 适配器设计模式适配器设计模式 问题 假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。 在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"亦称： 封装器模式、Wrapper、Adapter 简介 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。 适配器设计模式适配器设计模式 问题 假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。 在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281357207.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281357207.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281357746.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358043.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358508.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358067.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281358978.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281359334.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"真实世界类比","slug":"真实世界类比","link":"#真实世界类比","children":[]},{"level":2,"title":"适配器模式结构","slug":"适配器模式结构","link":"#适配器模式结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"适配器模式适合应用场景","slug":"适配器模式适合应用场景","link":"#适配器模式适合应用场景","children":[]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":2,"title":"适配器模式优缺点","slug":"适配器模式优缺点","link":"#适配器模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{},"readingTime":{"minutes":9.37,"words":2811},"filePathRelative":"guide/设计模式/结构型模式/适配器.md","autoDesc":true}');export{X as comp,W as data};

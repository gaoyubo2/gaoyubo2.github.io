import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,e as c,f as l,d as s}from"./app-D1py-eEI.js";const i={},u=s(`<h2 id="编写命令行工具" tabindex="-1"><a class="header-anchor" href="#编写命令行工具"><span>编写命令行工具</span></a></h2><p>环境准备完毕，接下来实现<code>java</code>命令的的第一种用法。</p><h3 id="创建目录" tabindex="-1"><a class="header-anchor" href="#创建目录"><span>创建目录</span></a></h3><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/159e3da8044384df317febfea3017f12.png" alt="" style="zoom:67%;"><p>创建cmd.go</p><blockquote><p>Go源文件一般以.go作为后缀，文件名全部小写，多个单词之间使用下划线分隔。Go语言规范要求Go源文件必须使用UTF-8编码，详见https://golang.org/ref/spec</p></blockquote><h3 id="结构体存储cmd选项" tabindex="-1"><a class="header-anchor" href="#结构体存储cmd选项"><span>结构体存储cmd选项</span></a></h3><p>在文件中定义cmd中java命令需要的选项和参数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> ch01

<span class="token comment">// author：郜宇博</span>
<span class="token keyword">type</span> Cmd <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 标注是否为 --help</span>
	helpFlag <span class="token builtin">bool</span>
	<span class="token comment">//标注是否为 --version</span>
	versionFlag <span class="token builtin">bool</span>
	<span class="token comment">//选项</span>
	cpOption <span class="token builtin">string</span>
	<span class="token comment">//主类名，或者是jar文件</span>
	class <span class="token builtin">string</span>
	<span class="token comment">//参数</span>
	args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go语言标准库包" tabindex="-1"><a class="header-anchor" href="#go语言标准库包"><span>Go语言标准库包</span></a></h3><p>由于要处理的命令行，因此将使用到<code>flag()</code>函数，此函数为Go的标准库包之一。</p><p>Go语言的标准库以包的方式提供支持，下表列出了Go语言标准库中常见的包及其功能。</p><table><thead><tr><th>Go语言标准库包名</th><th>功 能</th></tr></thead><tbody><tr><td>bufio</td><td>带缓冲的 I/O 操作</td></tr><tr><td>bytes</td><td>实现字节操作</td></tr><tr><td>container</td><td>封装堆、列表和环形列表等容器</td></tr><tr><td>crypto</td><td>加密算法</td></tr><tr><td>database</td><td>数据库驱动和接口</td></tr><tr><td>debug</td><td>各种调试文件格式访问及调试功能</td></tr><tr><td>encoding</td><td>常见算法如 JSON、XML、Base64 等</td></tr><tr><td>flag</td><td>命令行解析</td></tr><tr><td>fmt</td><td>格式化操作</td></tr><tr><td>go</td><td>Go语言的词法、语法树、类型等。可通过这个包进行代码信息提取和修改</td></tr><tr><td>html</td><td>HTML 转义及模板系统</td></tr><tr><td>image</td><td>常见图形格式的访问及生成</td></tr><tr><td>io</td><td>实现 I/O 原始访问接口及访问封装</td></tr><tr><td>math</td><td>数学库</td></tr><tr><td>net</td><td>网络库，支持 Socket、HTTP、邮件、RPC、SMTP 等</td></tr><tr><td>os</td><td>操作系统平台不依赖平台操作封装</td></tr><tr><td>path</td><td>兼容各操作系统的路径操作实用函数</td></tr><tr><td>plugin</td><td>Go 1.7 加入的插件系统。支持将代码编译为插件，按需加载</td></tr><tr><td>reflect</td><td>语言反射支持。可以动态获得代码中的类型信息，获取和修改变量的值</td></tr><tr><td>regexp</td><td>正则表达式封装</td></tr><tr><td>runtime</td><td>运行时接口</td></tr><tr><td>sort</td><td>排序接口</td></tr><tr><td>strings</td><td>字符串转换、解析及实用函数</td></tr><tr><td>time</td><td>时间接口</td></tr><tr><td>text</td><td>文本模板及 Token 词法器</td></tr></tbody></table><h4 id="flag-函数" tabindex="-1"><a class="header-anchor" href="#flag-函数"><span>flag()函数</span></a></h4>`,14),d={href:"https://studygolang.com/pkgdoc",target:"_blank",rel:"noopener noreferrer"},r=s(`<h5 id="eg-flag-typevar" tabindex="-1"><a class="header-anchor" href="#eg-flag-typevar"><span>eg：flag.TypeVar()</span></a></h5><p>基本格式如下： <code>flag.TypeVar(Type指针, flag名, 默认值, 帮助信息)</code> 例如我们要定义姓名、年龄、婚否三个命令行参数，我们可以按如下方式定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span>
<span class="token keyword">var</span> married <span class="token builtin">bool</span>
<span class="token keyword">var</span> delay time<span class="token punctuation">.</span>Duration
flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;姓名&quot;</span><span class="token punctuation">)</span>
flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;年龄&quot;</span><span class="token punctuation">)</span>
flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>married<span class="token punctuation">,</span> <span class="token string">&quot;married&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;婚否&quot;</span><span class="token punctuation">)</span>
flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delay<span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;时间间隔&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收处理用户输入的命令行指令" tabindex="-1"><a class="header-anchor" href="#接收处理用户输入的命令行指令"><span>接收处理用户输入的命令行指令</span></a></h3><p>创建parseCmd()函数，实现接受处理用户输入的命令行指令</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cmd <span class="token punctuation">{</span>
	cmd <span class="token operator">:=</span> <span class="token operator">&amp;</span>Cmd<span class="token punctuation">{</span><span class="token punctuation">}</span>

	flag<span class="token punctuation">.</span>Usage <span class="token operator">=</span> printUsage
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>helpFlag<span class="token punctuation">,</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print help message&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>helpFlag<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print help message&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>versionFlag<span class="token punctuation">,</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print version and exit&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">,</span> <span class="token string">&quot;cp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	args <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		cmd<span class="token punctuation">.</span>class <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		cmd<span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> cmd
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: %s [-options] class [args...]\\n&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token comment">//flag.PrintDefaults()</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先设置<code>flag.Usage</code>变量，把<code>printUsage()</code>函数赋值给它； 然后调 用flag包提供的各种Var函数设置需要解析的选项； 接着调用 <code>Parse()</code>函数解析选项。</p><p>如果<code>Parse()</code>函数解析失败，它就调用<code> printUsage()</code>函数把命令的用法打印到控制台。</p><p>如果解析成功，调用<code>flag.Args()</code>函数可以捕获其他没有被解析 的参数。其中第一个参数就是主类名，剩下的是要传递给主类的参数。</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>与cmd.go文件一样，main.go文件的包名也是main。在Go 语言中，main是一个特殊的包，这个包所在的目录(可以叫作任何 名字)会被编译为可执行文件。Go程序的入口也是main()函数，但 是不接收任何参数，也不能有返回值。</p><p>测试代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cmd <span class="token operator">:=</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> cmd<span class="token punctuation">.</span>versionFlag <span class="token punctuation">{</span>
		<span class="token comment">//模拟输出版本</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;version 0.0.1&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>helpFlag <span class="token operator">||</span> cmd<span class="token punctuation">.</span>class <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">startJVM</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 模拟启动JVM</span>
<span class="token keyword">func</span> <span class="token function">startJVM</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:%s class:%s args:%v\\n&quot;</span><span class="token punctuation">,</span>
		cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>class<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main()</code>函数先调用<code>ParseCommand()</code>函数解析命令行参数，如 果一切正常，则调用<code>startJVM()</code>函数启动Java虚拟机。如果解析出现错误，或者用户输入了-help选项，则调用<code>PrintUsage()</code>函数打印出帮助信息。如果用户输入了<code>-version</code>选项，则输版本信息。因为我们还没有真正开始编写Java虚拟机，所以<code>startJVM()</code>函数暂时只是打印一些信息而已。</p><p>在终端：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go <span class="token function">install</span> jvmgo<span class="token punctuation">\\</span>ch0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时在工作空间的bin目录中会生成ch01.exe的文件，运行：结果如下</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/9da661f86c8893afb3fae36c2b9d8227.png" alt="" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/de2f409f6ac293370749453076705a1a.png" alt="" style="zoom:80%;">`,19);function k(m,g){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",d,[c("Golang标准库文档"),l(a)])]),r])}const h=t(i,[["render",k],["__file","编写命令行工具.html.vue"]]),f=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.html","title":"编写命令行工具","lang":"zh-CN","frontmatter":{"title":"编写命令行工具","order":2,"description":"编写命令行工具 环境准备完毕，接下来实现java命令的的第一种用法。 创建目录 创建cmd.go Go源文件一般以.go作为后缀，文件名全部小写，多个单词之间使用下划线分隔。Go语言规范要求Go源文件必须使用UTF-8编码，详见https://golang.org/ref/spec 结构体存储cmd选项 在文件中定义cmd中java命令需要的选项和参数...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"编写命令行工具"}],["meta",{"property":"og:description","content":"编写命令行工具 环境准备完毕，接下来实现java命令的的第一种用法。 创建目录 创建cmd.go Go源文件一般以.go作为后缀，文件名全部小写，多个单词之间使用下划线分隔。Go语言规范要求Go源文件必须使用UTF-8编码，详见https://golang.org/ref/spec 结构体存储cmd选项 在文件中定义cmd中java命令需要的选项和参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写命令行工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"编写命令行工具","slug":"编写命令行工具","link":"#编写命令行工具","children":[{"level":3,"title":"创建目录","slug":"创建目录","link":"#创建目录","children":[]},{"level":3,"title":"结构体存储cmd选项","slug":"结构体存储cmd选项","link":"#结构体存储cmd选项","children":[]},{"level":3,"title":"Go语言标准库包","slug":"go语言标准库包","link":"#go语言标准库包","children":[]},{"level":3,"title":"接收处理用户输入的命令行指令","slug":"接收处理用户输入的命令行指令","link":"#接收处理用户输入的命令行指令","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]}],"git":{},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"book/Go实现Java虚拟机/解析Class文件/编写命令行工具.md","autoDesc":true}');export{h as comp,f as data};

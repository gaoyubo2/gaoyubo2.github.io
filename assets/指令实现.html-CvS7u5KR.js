import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,e as n,f as p,d as a}from"./app-D1py-eEI.js";const i={},u=a(`<h2 id="一、常量指令" tabindex="-1"><a class="header-anchor" href="#一、常量指令"><span>一、常量指令</span></a></h2><blockquote><p>常量指令把常量推入操作数栈顶。</p><p>常量可以来自三个地方：隐含在<code>操作码里</code>、<code>操作数</code>和<code>运行时常量池</code>。</p><p>常量指令共有21条，本节实现其中的18条。另外3条是<code>ldc</code>系列指令，用于从运行时常量池中加载常量，将在后续实现。</p></blockquote><h3 id="nop指令" tabindex="-1"><a class="header-anchor" href="#nop指令"><span>nop指令</span></a></h3><p><code>nop指令</code>是最简单的一条指令，因为它什么也不做。 在<code>\\instructions\\constants</code>目录下创建<code>nop.go</code>文件，在其中实现nop指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> NOP <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>NOP<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 什么也不用做</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const系列指令" tabindex="-1"><a class="header-anchor" href="#const系列指令"><span>const系列指令</span></a></h3><p>这一系列指令把<code>隐含在操作码中的常量值</code>推入操作数栈顶。</p><p><code>constants</code>目录下创建<code>const.go</code>文件，在其中定义15条指令，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ACONST_NULL <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DCONST_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DCONST_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> FCONST_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> FCONST_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> FCONST_2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_M1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_3 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_4 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ICONST_5 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LCONST_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LCONST_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以3条指令为例进行说明。aconst_null指令把null引用推入操作 数栈顶，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ACONST_NULL<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushRef</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dconst_0指令把double型0推入操作数栈顶，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DCONST_0<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushDouble</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iconst_m1指令把int型-1推入操作数栈顶，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ICONST_M1<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bipush和sipush指令" tabindex="-1"><a class="header-anchor" href="#bipush和sipush指令"><span>bipush和sipush指令</span></a></h3><ul><li><code>bipush指令</code>从操作数中获取一个byte型整数，扩展成int型，然后推入栈顶。</li><li><code>sipush指令</code>从操作数中获取一个short型整数，扩展成int型，然后推入栈顶。</li></ul><p>constants目录下创建 ipush.go文件，在其中定义bipush和sipush指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> BIPUSH <span class="token keyword">struct</span> <span class="token punctuation">{</span> val <span class="token builtin">int8</span> <span class="token punctuation">}</span> <span class="token comment">// Push byte</span>
<span class="token keyword">type</span> SIPUSH <span class="token keyword">struct</span> <span class="token punctuation">{</span> val <span class="token builtin">int16</span> <span class="token punctuation">}</span> <span class="token comment">// Push short</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>BIPUSH结构体实现方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> BIPUSH <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    val <span class="token builtin">int8</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>BIPUSH<span class="token punctuation">)</span> <span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>base<span class="token punctuation">.</span>BytecodeReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>val <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadInt8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>BIPUSH<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、加载指令" tabindex="-1"><a class="header-anchor" href="#二、加载指令"><span>二、加载指令</span></a></h2><blockquote><p>加载指令用于从局部变量表获取变量，并将其推入操作数栈顶。总共有 33 条加载指令，它们按照所操作的变量类型可以分为 6 类：</p><ol><li><code>aload</code> 系列指令：用于操作<code>引用类型</code>变量。</li><li><code>dload</code> 系列指令：用于操作 <code>double</code> 类型变量。</li><li><code>fload</code> 系列指令：用于操作 <code>float</code> 变量。</li><li><code>iload</code> 系列指令：用于操作 <code>int</code> 变量。</li><li><code>lload</code> 系列指令：用于操作 <code>long</code> 变量。</li><li><code>xaload</code> 指令：用于操作数组。</li></ol><p>本节将实现其中的 25 条加载指令。数组和xaload系列指令先不实现。</p></blockquote>`,23),d=s("code",null,"loads目录",-1),r=s("code",null,"iload.go",-1),k={href:"https://github.com/gaoyubo2/jvmgo",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 从局部变量表加载int类型</span>
<span class="token keyword">type</span> ILOAD <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>Index8Instruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ILOAD_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ILOAD_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ILOAD_2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> ILOAD_3 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免重复代码，定义一个函数供iload系列指令使用，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">_iload</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iload指令的索引来自操作数，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ILOAD<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_iload</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其余4条指令的索引隐含在操作码中，以iload_1为例，其 Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ILOAD_1<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_iload</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、存储指令" tabindex="-1"><a class="header-anchor" href="#三、存储指令"><span>三、存储指令</span></a></h2><p>和加载指令刚好相反，存储指令把变量从操作数栈顶弹出，然后存入局部变量表。</p>`,9),m=s("code",null,"lstore系列",-1),b={href:"https://github.com/gaoyubo2/jvmgo",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>instructions\\stores目录下创建<code> lstore.go</code>文件，在其中定义5条指令，代码如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> LSTORE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>Index8Instruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LSTORE_0 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LSTORE_1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LSTORE_2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LSTORE_3 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样定义一个函数供5条指令使用，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">_lstore</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetLong</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lstore指令的索引来自操作数，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LSTORE<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_lstore</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其余4条指令的索引隐含在操作码中，以lstore_2为例，其 Execute（）方法如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LSTORE_2<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">_lstore</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、栈指令" tabindex="-1"><a class="header-anchor" href="#四、栈指令"><span>四、栈指令</span></a></h2><blockquote><p>栈指令直接对操作数栈进行操作，共9条：</p><p>pop和pop2指令将栈顶变量弹出</p><p>dup系列指令复制栈顶变量</p><p>swap指令交换栈顶的两个变量</p></blockquote>`,10),f=s("code",null,"OperandStack结构体",-1),h={href:"https://gaoyubo2.github.io/blogs/8ae1f4ca.html#3-5%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"PushSlot（）",-1),w=s("code",null,"PopSlot（）",-1),I=a(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushSlot</span><span class="token punctuation">(</span>slot Slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> slot
    self<span class="token punctuation">.</span>size<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Slot <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>size<span class="token operator">--</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pop和pop2指令" tabindex="-1"><a class="header-anchor" href="#pop和pop2指令"><span>pop和pop2指令</span></a></h3><p>stack目录下创建pop.go文件，在其中定义 pop和pop2指令，代码如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> POP <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> POP2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>pop指令把栈顶变量弹出，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>POP<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pop指令只能用于弹出int、float等占用一个操作数栈位置的变量。</p><p>double和long变量在操作数栈中占据两个位置，需要使用pop2指令弹出，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>POP2<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dup指令" tabindex="-1"><a class="header-anchor" href="#dup指令"><span>dup指令</span></a></h3>`,10),x=s("code",null,"dup.go",-1),_={href:"https://github.com/gaoyubo2/jvmgo",target:"_blank",rel:"noopener noreferrer"},E=a(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> DUP <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DUP_X1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DUP_X2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DUP2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DUP2_X1 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> DUP2_X2 <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dup指令复制栈顶的单个变量，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DUP<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DUP_X1</code> ：复制栈顶操作数一份放在第二个操作数的下方。Execute代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">/*
bottom -&gt; top
[...][c][b][a]
          __/
         |
         V
[...][c][a][b][a]
*/</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DUP_X1<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot1<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot2<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DUP_X2</code> ：复制栈顶操作数栈的一个或两个值，并将它们插入到操作数栈中的第三个值的下面。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">/*
bottom -&gt; top
[...][c][b][a]
       _____/
      |
      V
[...][a][c][b][a]
*/</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DUP_X2<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    slot3 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot1<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot3<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot2<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushSlot</span><span class="token punctuation">(</span>slot1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="swap指令" tabindex="-1"><a class="header-anchor" href="#swap指令"><span>swap指令</span></a></h3><blockquote><p>swap指令作用是交换栈顶的两个操作数</p></blockquote><p>下创建<code>swap.go</code>文件，在其中定义<code>swap指令</code>，代码如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> SWAP <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Execute（）方法如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func (self *SWAP) Execute(frame *rtda.Frame) {
stack := frame.OperandStack()
slot1 := stack.PopSlot()
slot2 := stack.PopSlot()
stack.PushSlot(slot1)
stack.PushSlot(slot2)
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、数学指令" tabindex="-1"><a class="header-anchor" href="#五、数学指令"><span>五、数学指令</span></a></h2><p>数学指令大致对应Java语言中的加、减、乘、除等数学运算符。</p><p>数学指令包括算术指令、位移指令和布尔运算指令等，共37条，将全部在本节实现。</p><h3 id="算术指令" tabindex="-1"><a class="header-anchor" href="#算术指令"><span>算术指令</span></a></h3><p>算术指令又可以进一步分为:</p><ul><li>加法（add）指令</li><li>减法（sub）指令</li><li>乘法（mul）指令</li><li>除法（div）指令</li><li>求余（rem）指令</li><li>取反（neg）指令</li></ul><p>加、减、乘、除和取反指令都比较简单，本节以复杂的<code>求余指令</code>介绍。</p><p><code>math目录</code>下创建<code>rem.go</code>文件，在其中定义4条求余指令，代码如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> DREM <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> FREM <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IREM <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LREM <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DREM</code> 结构体：表示对双精度浮点数 (<code>double</code>) 执行取余操作。</li><li><code>FREM</code> 结构体：表示对单精度浮点数 (<code>float</code>) 执行取余操作</li><li><code>IREM</code> 结构体：表示对整数 (<code>int</code>) 执行取余操作。</li><li><code>LREM</code> 结构体：表示对长整数 (<code>long</code>) 执行取余操作。</li></ul><p><code>irem</code>和<code>lrem</code>代码差不多，以<code>irem</code>为例，其<code>Execute（）</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IREM<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> v2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ArithmeticException: / by zero&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    result <span class="token operator">:=</span> v1 <span class="token operator">%</span> v2
    stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先从操作数栈中弹出两个int变量，求余，然后把结果推入操作 数栈。</p><blockquote><p>注意！对int或long变量做除法和求余运算时，是有可能抛出ArithmeticException异常的。</p></blockquote><p>frem和drem指令差不多，以 drem为例，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DREM<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushDouble</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go语言没有给浮点数类型定义求余操作符，所以需要使用<code> math包</code>的<code>Mod（）</code>函数。</p><blockquote><p>浮点数类型因为有Infinity（无穷大）值，所以即使是除零，也不会导致ArithmeticException异常抛出</p></blockquote><h3 id="位移指令" tabindex="-1"><a class="header-anchor" href="#位移指令"><span>位移指令</span></a></h3><p>分为左移和右移</p><ul><li>左移</li><li>右移 <ul><li>算术右移（有符号右移）</li><li>逻辑右移（无符号右移）两种。</li></ul></li></ul><p>算术右移和逻 辑位移的区别仅在于符号位的扩展，如下面的Java代码所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111111111111111111111111111</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111111111111111111111111111</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000111111111111111111111111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>math目录下创建sh.go文件，在其中定义6条 位移指令，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ISHL <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// int左位移</span>
<span class="token keyword">type</span> ISHR <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// int算术右位移</span>
<span class="token keyword">type</span> IUSHR <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// int逻辑右位移(无符号右移位)</span>
<span class="token keyword">type</span> LSHL <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// long左位移</span>
<span class="token keyword">type</span> LSHR <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// long算术右位移</span>
<span class="token keyword">type</span> LUSHR <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span> <span class="token comment">// long逻辑右移位（无符号右移位）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="左移" tabindex="-1"><a class="header-anchor" href="#左移"><span>左移</span></a></h4><p>左移指令比较简单，以<code>ishl</code>指令为例，其<code>Execute（）</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ISHL<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    s <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1f</span>
    result <span class="token operator">:=</span> v1 <span class="token operator">&lt;&lt;</span> s
    stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先从操作数栈中弹出两个int变量v2和v1。v1是要进行位移操作的变量，v2指出要移位多少比特。位移之后，把结果推入操作数栈。</p><blockquote><p><code>s := uint32(v2) &amp; 0x1f</code>：这行代码将被左移的位数 <code>v2</code> 强制转换为 <code>uint32</code> 类型，然后执行按位与操作（<code>&amp;</code>）与常数 <code>0x1f</code>。 这是为了确保左移的位数在范围 0 到 31 内，因为在 Java 中，左移操作最多只能左移 31 位，超出这个范围的位数将被忽略。</p></blockquote><blockquote><p>这里注意两点：</p><p>int变量只有32位，所以只取v2的前5个比特就 足够表示位移位数了</p><p>Go语言位移操作符右侧必须是无符号 整数，所以需要对v2进行类型转换</p></blockquote><h4 id="右移" tabindex="-1"><a class="header-anchor" href="#右移"><span>右移</span></a></h4><h5 id="算数右移" tabindex="-1"><a class="header-anchor" href="#算数右移"><span>算数右移</span></a></h5><p>算术右移指令需要扩展符号位，代码和左移指令基本上差不多。以<code>lshr</code>指令为例，其<code>Execute（）</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LSHR<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//long变量有64位，所以取v2的前6个比特。</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    s <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span>
    result <span class="token operator">:=</span> v1 <span class="token operator">&gt;&gt;</span> s
    stack<span class="token punctuation">.</span><span class="token function">PushLong</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>s := uint32(v2) &amp; 0x1f：</p><p>提取 <code>v2</code> 变量的最低的 6 位，将其他位设置为 0，并将结果存储在 <code>s</code> 变量中。这是为了限制右移的位数在 0 到 63 之间，因为在 Java 中，long类型右移操作最多只能右移 63 位</p></blockquote><h5 id="逻辑右移" tabindex="-1"><a class="header-anchor" href="#逻辑右移"><span>逻辑右移</span></a></h5><p>无符号右移位，以<code>iushr</code>为例，在移位前，先将v2转化为正数，再进行移位，最后转化为int32类型，如下代码所示：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IUSHR<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    s <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1f</span>
    result <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔运算指令" tabindex="-1"><a class="header-anchor" href="#布尔运算指令"><span>布尔运算指令</span></a></h3><p>布尔运算指令只能操作int和long变量，分为：</p><ul><li>按位与（and）</li><li>按位 或（or）</li><li>按位异或（xor）</li></ul><p><code>math</code>目录下创建<code>and.go</code>文件，在其中定义<code>iand</code>和<code> land</code>指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IAND <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> LAND <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以iand指令为例，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IAND<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result <span class="token operator">:=</span> v1 <span class="token operator">&amp;</span> v2
    stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iinc指令" tabindex="-1"><a class="header-anchor" href="#iinc指令"><span>iinc指令</span></a></h3><p><code>iinc指令</code>给局部变量表中的int变量增加常量值，局部变量表索引和常量值都由指令的操作数提供。</p><p>math目录下创建<code>iinc.go</code>文件，在其中定义<code>iinc指令</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IINC <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//索引</span>
	Index <span class="token builtin">uint</span>
    <span class="token comment">//常量值</span>
	Const <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><code>index</code>：一个字节，表示局部变量表中要增加值的变量的索引。这个索引指定了要修改的局部变量。</li><li><code>const</code>：一个有符号字节，表示要增加的常数值。这个常数值将与局部变量的当前值相加，并将结果存储回同一个局部变量。</li></ul></blockquote><p><code>FetchOperands（）</code>函数从<code>字节码</code>里读取操作数，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IINC<span class="token punctuation">)</span> <span class="token function">FetchOperands</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>base<span class="token punctuation">.</span>BytecodeReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>Index <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">ReadUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>Const <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">ReadInt8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Execute（）方法从局部变量表中读取变量，给它加上常量值，再把结果写回<code>局部变量表</code>，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IINC<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localVars <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">LocalVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    val <span class="token operator">:=</span> localVars<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">)</span>
    val <span class="token operator">+=</span> self<span class="token punctuation">.</span>Const
    localVars<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、类型转换指令" tabindex="-1"><a class="header-anchor" href="#六、类型转换指令"><span>六、类型转换指令</span></a></h2><p>类型转换指令大致对应Java语言中的基本类型强制转换操作。 类型转换指令有共15条，将全部在本节实现。</p><p>引用类型转换对应的是<code>checkcast指令</code>，将在后续完成。</p><blockquote><p>类型转换指令根据被<code>转换变量的类型</code>分为四种系列：</p><ul><li><strong>i2x 系列指令</strong>：这些指令将整数（int）变量强制转换为其他类型。</li><li><strong>l2x 系列指令</strong>：这些指令将长整数（long）变量强制转换为其他类型。</li><li><strong>f2x 系列指令</strong>：这些指令将浮点数（float）变量强制转换为其他类型。</li><li><strong>d2x 系列指令</strong>：这些指令将双精度浮点数（double）变量强制转换为其他类型。</li></ul></blockquote><p>这些类型转换指令允许将不同类型的数据进行强制类型转换，以满足特定的计算或操作需求。</p><p>以<code>d2x系列</code>指令为例进行讨论。</p><p><code>conversions目录</code>下创建<code>d2x.go</code>文件，在其中 定义d2f、d2i和d2l指令，代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> D2F <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> D2I <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> D2L <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>d2i指令</code>为例，它的<code>Execute（）</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>D2I<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    d <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    i <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
    stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为Go语言可以很方便地转换各种基本类型的变量，所以类型转换指令实现起来还是比较容易的。</p><h2 id="七、比较指令" tabindex="-1"><a class="header-anchor" href="#七、比较指令"><span>七、比较指令</span></a></h2><p>比较指令可以分为两类：</p><ul><li>将比较结果推入操作数栈顶</li><li>根据比较结果跳转</li></ul><blockquote><p>比较指令是编译器实现if-else、for、while等语句的基石，共有19条</p></blockquote><h3 id="lcmp指令" tabindex="-1"><a class="header-anchor" href="#lcmp指令"><span>lcmp指令</span></a></h3><p><code>lcmp指令</code>用于比较long变量。</p><p>comparisons目录下创建<code>lcmp.go</code>文件，在其中定义<code>lcmp指令</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> LCMP <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Execute（）</code>方法把栈顶的两个long变量弹出，进行比较，然后把比较结果（int型0、1或-1）推入栈顶，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LCMP<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> v1 <span class="token operator">&gt;</span> v2 <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v1 <span class="token operator">==</span> v2 <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fcmp和dcmp指令" tabindex="-1"><a class="header-anchor" href="#fcmp和dcmp指令"><span>fcmp和dcmp指令</span></a></h3><p><code>fcmpg</code>和<code>fcmpl指令</code>用于比较float变量，它们的区别是对于非数字参与，<code>fcmpg</code>会默认为其大于任何非NaN值，<code>fcmpl</code>则相反。</p><p>comparisons目录下创建fcmp.go文件，在其中定义<code> fcmpg</code>和<code>fcmpl指令</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> FCMPG <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> FCMPL <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>NoOperandsInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于浮点数计算有可能产生NaN（Not a Number）值，所以比较两个浮点数时，除了大于、等于、小于之外， 还有第4种结果：无法比较。</p><p>编写一个函数来统一比较float变量,如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">_fcmp</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> gFlag <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> v1 <span class="token operator">&gt;</span> v2 <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v1 <span class="token operator">==</span> v2 <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v1 <span class="token operator">&lt;</span> v2 <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> gFlag <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		stack<span class="token punctuation">.</span><span class="token function">PushInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java虚拟机规范：浮点数比较指令 <code>fcmpl</code> 和 <code>fcmpg</code> 的规范要求首先弹出 <code>v2</code>，然后是 <code>v1</code>，以便进行浮点数比较。</p></blockquote><p>Execute()如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>FCMPG<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_fcmp</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>FCMPL<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_fcmp</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-cond-指令" tabindex="-1"><a class="header-anchor" href="#if-cond-指令"><span><code>if\\&lt;cond&gt;</code>指令</span></a></h3><p><code>if&lt;cond&gt;</code> 指令是 Java 字节码中的条件分支指令，它根据条件 <code>&lt;cond&gt;</code> 来执行不同的分支。 条件 <code>&lt;cond&gt;</code> 可以是各种比较操作，比如等于、不等于、大于、小于等等。</p><blockquote><p>常见的 <code>if&lt;cond&gt;</code> 指令包括：</p><ul><li><code>ifeq</code>: 如果栈顶的值等于0，则跳转。</li><li><code>ifne</code>: 如果栈顶的值不等于0，则跳转。</li><li><code>iflt</code>: 如果栈顶的值小于0，则跳转。</li><li><code>ifge</code>: 如果栈顶的值大于或等于0，则跳转。</li><li><code>ifgt</code>: 如果栈顶的值大于0，则跳转。</li><li><code>ifle</code>: 如果栈顶的值小于或等于0，则跳转。</li></ul></blockquote><p>创建ifcond.go文件，在其中定义6条if指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IFEQ <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IFNE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IFLT <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IFLE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IFGT <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IFGE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>ifeq指令</code>为例，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IFEQ<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    	base<span class="token punctuation">.</span><span class="token function">Branch</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正的跳转逻辑在Branch（）函数中。因为这个函数在很多指令中都会用到，所以定义在base\\branch_logic.go 文件中，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Branch</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> offset <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pc <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	nextPC <span class="token operator">:=</span> pc <span class="token operator">+</span> offset
	frame<span class="token punctuation">.</span><span class="token function">SetNextPC</span><span class="token punctuation">(</span>nextPC<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-icmp-cond-指令" tabindex="-1"><a class="header-anchor" href="#if-icmp-cond-指令"><span><code>if_icmp\\&lt;cond&gt;</code>指令</span></a></h3><p><code>if_icmp&lt;cond&gt;</code> 指令是 Java 字节码中的一类条件分支指令，它用于对比两个整数值，根据比较的结果来执行条件分支。这些指令的操作数栈上通常有两个整数值，它们分别用于比较。</p><blockquote><p>这类指令包括：</p><ul><li><code>if_icmpeq</code>: 如果两个整数相等，则跳转。</li><li><code>if_icmpne</code>: 如果两个整数不相等，则跳转。</li><li><code>if_icmplt</code>: 如果第一个整数小于第二个整数，则跳转。</li><li><code>if_icmpge</code>: 如果第一个整数大于等于第二个整数，则跳转。</li><li><code>if_icmpgt</code>: 如果第一个整数大于第二个整数，则跳转。</li><li><code>if_icmple</code>: 如果第一个整数小于等于第二个整数，则跳转。</li></ul></blockquote><p>创建if_icmp.go文件，在 其中定义6条if_icmp指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IF_ICMPEQ <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ICMPNE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ICMPLT <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ICMPLE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ICMPGT <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ICMPGE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以if_icmpne指令 为例，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IF_ICMPNE<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> val1<span class="token punctuation">,</span> val2 <span class="token operator">:=</span> <span class="token function">_icmpPop</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span> val1 <span class="token operator">!=</span> val2 <span class="token punctuation">{</span>
       base<span class="token punctuation">.</span><span class="token function">Branch</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">_icmpPop</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2 <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	val2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	val1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-acmp-cond-指令" tabindex="-1"><a class="header-anchor" href="#if-acmp-cond-指令"><span><code>if_acmp\\&lt;cond&gt;</code>指令</span></a></h3><p><code>if_acmp&lt;cond&gt;</code> 指令是 Java 字节码中的一类条件分支指令，用于比较两个引用类型的对象引用，根据比较的结果来执行条件分支。这些指令的操作数栈上通常有两个对象引用，它们分别用于比较。</p><blockquote><p>这类指令包括：</p><ul><li><code>if_acmpeq</code>: 如果两个引用相等，则跳转。</li><li><code>if_acmpne</code>: 如果两个引用不相等，则跳转。</li></ul></blockquote><p>创建if_acmp.go文件，在 其中定义两条if_acmp指令，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> IF_ACMPEQ <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
<span class="token keyword">type</span> IF_ACMPNE <span class="token keyword">struct</span><span class="token punctuation">{</span> base<span class="token punctuation">.</span>BranchInstruction <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以if_acmpeq指令为例，其Execute（）方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>IF_ACMPEQ<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>rtda<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> frame<span class="token punctuation">.</span><span class="token function">OperandStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ref2 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ref1 <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ref1 <span class="token operator">==</span> ref2 <span class="token punctuation">{</span>
    	base<span class="token punctuation">.</span><span class="token function">Branch</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、控制指令" tabindex="-1"><a class="header-anchor" href="#八、控制指令"><span>八、控制指令</span></a></h2><ul><li>控制指令共有 11 条。</li><li>在 Java 6 之前，<s><code>jsr</code> 和 <code>ret</code> 指令用于实现 <code>finally</code> 子句</s>。从 Java 6 开始，Oracle 的 Java 编译器不再使用这两条指令。</li><li><code>return</code> 系列指令有 6 条，用于从方法调用中返回，将在后续实现。</li><li>本节将实现剩下的 3 条指令：<code>goto</code>、<code>tableswitch</code> 和 <code>lookupswitch</code>。</li></ul><p>这些指令用于控制程序执行流，包括条件分支和无条件跳转等操作。其中，<code>goto</code> 用于无条件跳转到指定的目标位置，而 <code>tableswitch</code> 和 <code>lookupswitch</code> 用于根据条件跳转到不同的目标位置。</p><p>control目录下创建goto.go文件，在其中定义 goto指令，代码如下：</p>`,126);function O(P,S){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[d,n("下创建"),r,n("文件，在其中定义5 条指令，代码如下："),s("strong",null,[n("完整代码移步："),s("a",k,[n("jvmgo"),p(t)])])]),v,s("p",null,[n("和加载指令一样，存储指令也可以分为6类。以 "),m,n("指令为例进行介绍。"),s("strong",null,[n("完整代码移步："),s("a",b,[n("jvmgo"),p(t)])])]),g,s("p",null,[n("和其他类型的指令不同，栈指令并不关心变量类型。为了实现栈指令，需要给"),f,n("添加两个方法。"),s("a",h,[n("操作数栈实现"),p(t)]),n(" rtda\\operand_stack.go文件中，在其中定义"),y,n("和"),w,n(" 方法，代码如下：")]),I,s("p",null,[n("创建"),x,n("文件，在其中定义6 条指令，代码如下："),s("strong",null,[n("完整代码移步："),s("a",_,[n("jvmgo"),p(t)])])]),E])}const C=e(i,[["render",O],["__file","指令实现.html.vue"]]),B=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E8%A7%A3%E9%87%8A%E5%99%A8/%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0.html","title":"指令实现","lang":"zh-CN","frontmatter":{"title":"指令实现","order":2,"description":"一、常量指令 常量指令把常量推入操作数栈顶。 常量可以来自三个地方：隐含在操作码里、操作数和运行时常量池。 常量指令共有21条，本节实现其中的18条。另外3条是ldc系列指令，用于从运行时常量池中加载常量，将在后续实现。 nop指令 nop指令是最简单的一条指令，因为它什么也不做。 在\\\\instructions\\\\constants目录下创建nop.go...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E8%A7%A3%E9%87%8A%E5%99%A8/%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"指令实现"}],["meta",{"property":"og:description","content":"一、常量指令 常量指令把常量推入操作数栈顶。 常量可以来自三个地方：隐含在操作码里、操作数和运行时常量池。 常量指令共有21条，本节实现其中的18条。另外3条是ldc系列指令，用于从运行时常量池中加载常量，将在后续实现。 nop指令 nop指令是最简单的一条指令，因为它什么也不做。 在\\\\instructions\\\\constants目录下创建nop.go..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"指令实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、常量指令","slug":"一、常量指令","link":"#一、常量指令","children":[{"level":3,"title":"nop指令","slug":"nop指令","link":"#nop指令","children":[]},{"level":3,"title":"const系列指令","slug":"const系列指令","link":"#const系列指令","children":[]},{"level":3,"title":"bipush和sipush指令","slug":"bipush和sipush指令","link":"#bipush和sipush指令","children":[]}]},{"level":2,"title":"二、加载指令","slug":"二、加载指令","link":"#二、加载指令","children":[]},{"level":2,"title":"三、存储指令","slug":"三、存储指令","link":"#三、存储指令","children":[]},{"level":2,"title":"四、栈指令","slug":"四、栈指令","link":"#四、栈指令","children":[{"level":3,"title":"pop和pop2指令","slug":"pop和pop2指令","link":"#pop和pop2指令","children":[]},{"level":3,"title":"dup指令","slug":"dup指令","link":"#dup指令","children":[]},{"level":3,"title":"swap指令","slug":"swap指令","link":"#swap指令","children":[]}]},{"level":2,"title":"五、数学指令","slug":"五、数学指令","link":"#五、数学指令","children":[{"level":3,"title":"算术指令","slug":"算术指令","link":"#算术指令","children":[]},{"level":3,"title":"位移指令","slug":"位移指令","link":"#位移指令","children":[]},{"level":3,"title":"布尔运算指令","slug":"布尔运算指令","link":"#布尔运算指令","children":[]},{"level":3,"title":"iinc指令","slug":"iinc指令","link":"#iinc指令","children":[]}]},{"level":2,"title":"六、类型转换指令","slug":"六、类型转换指令","link":"#六、类型转换指令","children":[]},{"level":2,"title":"七、比较指令","slug":"七、比较指令","link":"#七、比较指令","children":[{"level":3,"title":"lcmp指令","slug":"lcmp指令","link":"#lcmp指令","children":[]},{"level":3,"title":"fcmp和dcmp指令","slug":"fcmp和dcmp指令","link":"#fcmp和dcmp指令","children":[]},{"level":3,"title":"if\\\\<cond>指令","slug":"if-cond-指令","link":"#if-cond-指令","children":[]},{"level":3,"title":"if_icmp\\\\<cond>指令","slug":"if-icmp-cond-指令","link":"#if-icmp-cond-指令","children":[]},{"level":3,"title":"if_acmp\\\\<cond>指令","slug":"if-acmp-cond-指令","link":"#if-acmp-cond-指令","children":[]}]},{"level":2,"title":"八、控制指令","slug":"八、控制指令","link":"#八、控制指令","children":[]}],"git":{},"readingTime":{"minutes":15.73,"words":4718},"filePathRelative":"book/Go实现Java虚拟机/指令集和解释器/指令实现.md","autoDesc":true}');export{C as comp,B as data};

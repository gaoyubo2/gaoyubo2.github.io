import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,d as s}from"./app-D1py-eEI.js";const o={},t=s(`<h2 id="enableconfigurationproperties-和-component的作用是否有点重复" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties-和-component的作用是否有点重复"><span>@EnableConfigurationProperties 和 @Component的作用是否有点重复？</span></a></h2><p><code>@EnableConfigurationProperties</code> 和 <code>@Component</code> 是 Spring Framework 中的两个注解，它们都用于控制对象的创建，但它们的用途和工作方式有所不同。</p><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>@Component</span></a></h3><p><code>@Component</code> 是一个通用的构造型注解，它告诉 Spring 在启动时创建一个 bean 并把它添加到 Spring ApplicationContext 中。Spring 通过扫描类路径下的类来查找 <code>@Component</code> 注解，然后创建这些类的实例并管理它们的生命周期。这些类实例可用于注入到其他 bean 中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties"><span>@EnableConfigurationProperties</span></a></h3><p><code>@EnableConfigurationProperties</code> 是 Spring Boot 提供的一个特殊注解，用于启用 <code>@ConfigurationProperties</code> 注解的支持。<code>@ConfigurationProperties</code> 允许你将配置文件中的属性映射到一个带有 getter 和 setter 的 POJO（Plain Old Java Object）上。这个 POJO 需要有一个无参数的构造函数，它的字段名与配置文件中的属性名相对应。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> property<span class="token punctuation">;</span>
    <span class="token comment">// getter and setter ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你需要在一个配置类上使用 <code>@EnableConfigurationProperties</code> 来启用这个属性类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MyProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么不直接使用-component-呢" tabindex="-1"><a class="header-anchor" href="#为什么不直接使用-component-呢"><span>为什么不直接使用 <code>@Component</code> 呢？</span></a></h3><p>你可以直接将 <code>@Component</code> 和 <code>@ConfigurationProperties</code> 注解用在同一个类上。这将会让 Spring Boot 创建一个 bean，并将 <code>application.properties</code> 或 <code>application.yml</code> 中以 “my” 为前缀的属性注入到这个 bean 中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> property<span class="token punctuation">;</span>
  <span class="token comment">// getter and setter ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个可行的方法，但这种方式的<strong>灵活性较差</strong>。当你的应用程序变得越来越大，配置属性类也会越来越多，如果每个类都使用 <code>@Component</code>，那么这些<strong>配置属性类将会分散</strong>在你的整个代码库中。这将使得<strong>管理和查找</strong>这些配置属性类变得<strong>困难。</strong></p><p>另一方面，使用 <code>@EnableConfigurationProperties</code> 允许你在一个地方集中<strong>管理所有的配置属性类</strong>。你可以在一个配置类中使用 <code>@EnableConfigurationProperties</code>，并将所有的配置属性类作为参数传入。这样做可以使得代码更加清晰，管理和查找配置属性更方便。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MyProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OtherProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本质意义-第三方jar包" tabindex="-1"><a class="header-anchor" href="#本质意义-第三方jar包"><span>本质意义：第三方jar包</span></a></h2>`,17),i=[t];function p(r,c){return a(),e("div",null,i)}const d=n(o,[["render",p],["__file","@EnableAutoConfiguration自动装配.html.vue"]]),m=JSON.parse('{"path":"/guide/SpringBoot%E5%AD%A6%E4%B9%A0/@EnableAutoConfiguration%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html","title":"EnableAutoConfiguration的意义","lang":"zh-CN","frontmatter":{"title":"EnableAutoConfiguration的意义","description":"@EnableConfigurationProperties 和 @Component的作用是否有点重复？ @EnableConfigurationProperties 和 @Component 是 Spring Framework 中的两个注解，它们都用于控制对象的创建，但它们的用途和工作方式有所不同。 @Component @Component 是...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/SpringBoot%E5%AD%A6%E4%B9%A0/@EnableAutoConfiguration%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"EnableAutoConfiguration的意义"}],["meta",{"property":"og:description","content":"@EnableConfigurationProperties 和 @Component的作用是否有点重复？ @EnableConfigurationProperties 和 @Component 是 Spring Framework 中的两个注解，它们都用于控制对象的创建，但它们的用途和工作方式有所不同。 @Component @Component 是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EnableAutoConfiguration的意义\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"@EnableConfigurationProperties 和 @Component的作用是否有点重复？","slug":"enableconfigurationproperties-和-component的作用是否有点重复","link":"#enableconfigurationproperties-和-component的作用是否有点重复","children":[{"level":3,"title":"@Component","slug":"component","link":"#component","children":[]},{"level":3,"title":"@EnableConfigurationProperties","slug":"enableconfigurationproperties","link":"#enableconfigurationproperties","children":[]},{"level":3,"title":"为什么不直接使用 @Component 呢？","slug":"为什么不直接使用-component-呢","link":"#为什么不直接使用-component-呢","children":[]}]},{"level":2,"title":"本质意义：第三方jar包","slug":"本质意义-第三方jar包","link":"#本质意义-第三方jar包","children":[]}],"git":{},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"guide/SpringBoot学习/@EnableAutoConfiguration自动装配.md","autoDesc":true}');export{d as comp,m as data};

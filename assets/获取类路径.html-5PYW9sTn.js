import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,b as s,e as n,f as i,d as a}from"./app-D1py-eEI.js";const l={},u=a(`<h2 id="获取类路径" tabindex="-1"><a class="header-anchor" href="#获取类路径"><span>获取类路径</span></a></h2><p>已经完成了JAVA应用程序如何启动：命令行启动，并获取到了启动时需要的选项和参数。</p><p>但是，如果要启动一个最简单的“Hello World”程序（如下），也需要加载很多所需的类进入<code>JVM</code>中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载HelloWorld类之前，需要加载该类的父类(超类)，也就是<code>java.lang.Object</code>，main函数的参数为<code>String[]</code>类型，因此也需要将<code>java.lang.String</code>类和<code>java.lang.String[]</code>加载，输出字符串又需要加载<code>java.lang.System</code>类，等等。接下来就来解决如何获取这些类的路径。</p><h3 id="类路径介绍" tabindex="-1"><a class="header-anchor" href="#类路径介绍"><span>类路径介绍</span></a></h3><p>Java虚拟机规范并没有规定虚拟机应该从哪里寻找类，因此不同的虚拟机实现可以采用不同的方法。</p><p>Oracle的Java虚拟机实现根据类路径（class path）来搜索类。</p><p>按照搜索的先后顺序，类路径可以 分为以下3个部分：</p><ul><li>启动类路径（bootstrap classpath）</li><li>扩展类路径（extension classpath）</li><li>用户类路径（user classpath）</li></ul><p><strong>启动类路径</strong>默认对应<code>jre\\lib</code>目录，Java标准库（大部分在<code>rt.jar</code>里） 位于该路径。</p><p><strong>扩展类路径</strong>默认对应<code>jre\\lib\\ext</code>目录，使用Java扩展机制的类位于这个路径。</p><p><strong>用户类路径</strong>为自己实现的类，以及第三方类库的路径。可以通过<code>-Xbootclasspath</code>选项修改启动类路径，不过一般不需要这样做。 用户类路径的默认值是当前目录，也就是<code>.</code> 。可以设置 CLASSPATH环境变量来修改用户类路径，但是这样做不够灵活，所以不推荐使用。 更好的办法是给java命令传递<code>-classpath</code>（或简写为<code>-cp</code>）选项。<code>-classpath/-cp</code>选项的优先级更高，可以覆盖<code>CLASSPATH环境变量</code>设置。如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-cp</span> path<span class="token punctuation">\\</span>to<span class="token punctuation">\\</span>classes <span class="token punctuation">..</span>.
<span class="token function">java</span> <span class="token parameter variable">-cp</span> path<span class="token punctuation">\\</span>to<span class="token punctuation">\\</span>lib1.jar <span class="token punctuation">..</span>.
<span class="token function">java</span> <span class="token parameter variable">-cp</span> path<span class="token punctuation">\\</span>to<span class="token punctuation">\\</span>lib2.zip <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析用户类路径" tabindex="-1"><a class="header-anchor" href="#解析用户类路径"><span>解析用户类路径</span></a></h3><p>该功能建立在命令行工具上，因此复制上次的代码，并创建classpath子目录。</p><p>Java虚拟机将使用JDK的启动类路径来寻找和加载Java 标准库中的类，因此需要某种方式指定jre目录的位置。</p><p>命令行选项可以获取，所以增加一个非标准选项-Xjre。</p><p>修改Cmd结构体，添加XjreOption字段；parseCmd（）函数也要相应修改：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Cmd <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// 标注是否为 --help</span>
	helpFlag <span class="token builtin">bool</span>
	<span class="token comment">//标注是否为 --version</span>
	versionFlag <span class="token builtin">bool</span>
	<span class="token comment">//选项</span>
	cpOption <span class="token builtin">string</span>
	<span class="token comment">//主类名，或者是jar文件</span>
	class <span class="token builtin">string</span>
	<span class="token comment">//参数</span>
	args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token comment">// jre路径</span>
	XjreOption <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cmd <span class="token punctuation">{</span>
	cmd <span class="token operator">:=</span> <span class="token operator">&amp;</span>Cmd<span class="token punctuation">{</span><span class="token punctuation">}</span>

	flag<span class="token punctuation">.</span>Usage <span class="token operator">=</span> printUsage
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>helpFlag<span class="token punctuation">,</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print help message&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>helpFlag<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print help message&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>versionFlag<span class="token punctuation">,</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print version and exit&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">,</span> <span class="token string">&quot;cp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">.</span>XjreOption<span class="token punctuation">,</span> <span class="token string">&quot;Xjre&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;path to jre&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	args <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token comment">//第一个参数是主类名</span>
		cmd<span class="token punctuation">.</span>class <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		cmd<span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> cmd
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取用户类路径" tabindex="-1"><a class="header-anchor" href="#获取用户类路径"><span>获取用户类路径</span></a></h3><p>可以把类路径想象成一个大的整体，它由启动类路径、扩展类路径和用户类路径三个小路径构成。</p><p>三个小路径又分别由更小的路径构成。是不是很像<code>组合模式(composite pattern)</code>？</p>`,23),r={href:"https://www.runoob.com/design-pattern/composite-pattern.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<h4 id="_1-entry接口" tabindex="-1"><a class="header-anchor" href="#_1-entry接口"><span>1.Entry接口</span></a></h4><p>定义一个<code>Entry</code>接口，作为所有类的基准。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classpath

<span class="token keyword">import</span> <span class="token string">&quot;os&quot;</span>

<span class="token comment">// :(linux/unix) or ;(windows)</span>
<span class="token keyword">const</span> pathListSeparator <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>PathListSeparator<span class="token punctuation">)</span>

<span class="token keyword">type</span> Entry <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token comment">// className: fully/qualified/ClassName.class</span>
    <span class="token function">readClass</span><span class="token punctuation">(</span>classpath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> Entry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量pathListSeparator是string类型，存放路径分隔符，后面会用到。</p><p>Entry接口中有个两方法。</p><ol><li><p>**readClass()方法：**负责寻找和加载class 文件。 参数是class文件的相对路径，路径之间用斜线<code>/</code>分隔，文件名有<code>.class</code>后缀。比如要读取<code>java.lang.Object</code>类，传 入的参数应该是<code>java/lang/Object.class</code>。返回值是读取到的字节数据、最终定位到class文件的Entry，以及错误信息。</p></li><li><p>**String()方法：**作用相当于Java中的<code>toString()</code>，用于返回变量 的字符串表示。</p></li></ol><blockquote><p>Go的函数或方法允许返回多个值，按照惯例，可以使用最后一个返回值作为错误信息。</p></blockquote><blockquote><p>还需要一个类似于JAVA构造函数的函数，但在<strong>Go语言中没有构造函数的概念</strong>,对象的创建通常交由一个全局的创建函数来完成,以NewXXX来命令,表示&quot;构造函数&quot;</p></blockquote><p>newEntry()函数根据参数创建不同类型的Entry实例，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> Entry <span class="token punctuation">{</span>
	<span class="token comment">////如果路径包含分隔符 表示有多个文件 </span>
	<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pathListSeparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">newCompositeEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//包含*，则说明要将相应目录下的所有class文件加载</span>
	<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">newWildcardEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//包含.jar，则说明是jar文件，通过zip方式加载</span>
	<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.jar&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.JAR&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
		strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.zip&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.ZIP&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token keyword">return</span> <span class="token function">newZipEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">newDirEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-实现类" tabindex="-1"><a class="header-anchor" href="#_2-实现类"><span>2.实现类</span></a></h4><p>存在四种类路径指定方式：</p><ul><li>普通路径形式：gyb/gyb</li><li>jar/zip形式：/gyb/gyb.jar</li><li>通配符形式：gyb/*</li><li>多个路径形式：gyb/1:/gyb/2</li></ul><h5 id="direntry-普通形式" tabindex="-1"><a class="header-anchor" href="#direntry-普通形式"><span>DirEntry(普通形式)</span></a></h5><p>创建<code>entry_dir.go</code>，定义DirEntry结构体：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classpath

<span class="token keyword">import</span> <span class="token string">&quot;io/ioutil&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;path/filepath&quot;</span>

<span class="token keyword">type</span> DirEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	absDir <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newDirEntry</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>DirEntry <span class="token punctuation">{</span>
	<span class="token comment">//转化为绝对路径</span>
	absDir<span class="token punctuation">,</span> err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>DirEntry<span class="token punctuation">{</span>absDir<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DirEntry<span class="token punctuation">)</span> <span class="token function">readClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> Entry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//拼接类文件目录 和 类文件名  </span>
	<span class="token comment">// &#39;/gyb/xxx/&#39; + &#39;helloworld.class&#39; = &#39;/gyb/xxx/helloworld.class&#39;</span>
	fileName <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>absDir<span class="token punctuation">,</span> className<span class="token punctuation">)</span>
	data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
	<span class="token keyword">return</span> data<span class="token punctuation">,</span> self<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>DirEntry<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>absDir
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DirEntry</code>只有一个字段，用于存放目录的绝对路径。</p><blockquote><p>和Java语言不同，Go结构体不需要显示实现接口，只要方法匹配即可。</p></blockquote><h5 id="zipentry-jar-zip形式" tabindex="-1"><a class="header-anchor" href="#zipentry-jar-zip形式"><span>ZipEntry(jar/zip形式)</span></a></h5><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classpath

<span class="token keyword">import</span> <span class="token string">&quot;archive/zip&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;errors&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;io/ioutil&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;path/filepath&quot;</span>

<span class="token keyword">type</span> ZipEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	absPath <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newZipEntry</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>ZipEntry <span class="token punctuation">{</span>
	absPath<span class="token punctuation">,</span> err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>ZipEntry<span class="token punctuation">{</span>absPath<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ZipEntry<span class="token punctuation">)</span> <span class="token function">readClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> Entry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r<span class="token punctuation">,</span> err <span class="token operator">:=</span> zip<span class="token punctuation">.</span><span class="token function">OpenReader</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>absPath<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">defer</span> r<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>File <span class="token punctuation">{</span>
		<span class="token keyword">if</span> f<span class="token punctuation">.</span>Name <span class="token operator">==</span> className <span class="token punctuation">{</span>
			rc<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>

			<span class="token keyword">defer</span> rc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>rc<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>

			<span class="token keyword">return</span> data<span class="token punctuation">,</span> self<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;class not found: &quot;</span> <span class="token operator">+</span> className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ZipEntry<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>absPath
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先打开ZIP文件，如果这一步出错的话，直接返回。然后遍历 ZIP压缩包里的文件，看能否找到class文件。如果能找到，则打开 class文件，把内容读取出来，并返回。如果找不到，或者出现其他错 误，则返回错误信息。有两处使用了defer语句来确保打开的文件得 以关闭。</p><h5 id="compositeentry-多路径形式" tabindex="-1"><a class="header-anchor" href="#compositeentry-多路径形式"><span>CompositeEntry(多路径形式)</span></a></h5><p><code>CompositeEntry</code>由更小的<code>Entry</code>组成，正好可以表示成[]Entry。</p><blockquote><p>在Go语言中，数组属于比较低层的数据结构，很少直接使用。大部分情况下，使用更便利的slice类型。</p></blockquote><p>构造函数把参数（路径列表）按分隔符分成小路径，然后把每个小路径都转换成具体的 Entry实例。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classpath

<span class="token keyword">import</span> <span class="token string">&quot;errors&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span>

<span class="token keyword">type</span> CompositeEntry <span class="token punctuation">[</span><span class="token punctuation">]</span>Entry

<span class="token keyword">func</span> <span class="token function">newCompositeEntry</span><span class="token punctuation">(</span>pathList <span class="token builtin">string</span><span class="token punctuation">)</span> CompositeEntry <span class="token punctuation">{</span>
	compositeEntry <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Entry<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathListSeparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//去判断 path 属于哪其他三种哪一种情况 生成对应的 ClassDirEntry类目录对象</span>
		entry <span class="token operator">:=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
		compositeEntry <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>compositeEntry<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> compositeEntry
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self CompositeEntry<span class="token punctuation">)</span> <span class="token function">readClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> Entry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//遍历切片 中的 类目录对象</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> self <span class="token punctuation">{</span>
		<span class="token comment">//如果找到了 对应的 类 直接返回</span>
		data<span class="token punctuation">,</span> from<span class="token punctuation">,</span> err <span class="token operator">:=</span> entry<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> data<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>
	<span class="token comment">//没找到 返回错误</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;class not found: &quot;</span> <span class="token operator">+</span> className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self CompositeEntry<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	strs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> self <span class="token punctuation">{</span>
		strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> pathListSeparator<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="wildcardentry-通配符形式" tabindex="-1"><a class="header-anchor" href="#wildcardentry-通配符形式"><span>WildcardEntry(通配符形式)</span></a></h5><p><code>WildcardEntry</code>实际上也是<code>CompositeEntry</code>，所以就不再定义新的类型了。</p><p>首先把路径末尾的星号去掉，得到baseDir，然后调用<code>filepath</code>包的<code>Walk()</code>函数遍历baseDir创建<code>ZipEntry</code>。<code>Walk()</code>函数的第二个参数 也是一个函数。</p><p>在<code>walkFn</code>中，根据后缀名选出<code>JAR文件</code>，并且返回SkipDir跳过子目录（通配符类路径不能递归匹配子目录下的JAR文件）。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classpath

<span class="token keyword">import</span> <span class="token string">&quot;os&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;path/filepath&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span>

<span class="token keyword">func</span> <span class="token function">newWildcardEntry</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> CompositeEntry <span class="token punctuation">{</span>
	<span class="token comment">//截取通用匹配符 /gyb/* 截取掉 *</span>
	baseDir <span class="token operator">:=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// remove *</span>
	<span class="token comment">//多个 类目录对象</span>
	compositeEntry <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Entry<span class="token punctuation">{</span><span class="token punctuation">}</span>

	walkFn <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">//如果为空</span>
		<span class="token keyword">if</span> info<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path <span class="token operator">!=</span> baseDir <span class="token punctuation">{</span>
			<span class="token keyword">return</span> filepath<span class="token punctuation">.</span>SkipDir
		<span class="token punctuation">}</span>
		<span class="token comment">//如果是 .jar  或者 .JAR 结尾的文件</span>
		<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.jar&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;.JAR&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			jarEntry <span class="token operator">:=</span> <span class="token function">newZipEntry</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
			compositeEntry <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>compositeEntry<span class="token punctuation">,</span> jarEntry<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//遍历 目录下所有 .jar .JAR 文件 生成ZipEntry目录对象 放在切片中返回</span>
	<span class="token comment">//walFn为函数</span>
	filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> walkFn<span class="token punctuation">)</span>

	<span class="token keyword">return</span> compositeEntry
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现类目录" tabindex="-1"><a class="header-anchor" href="#实现类目录"><span>实现类目录</span></a></h3><p>前面提到了<code> java 虚拟机</code>默认 会先从启动路径---&gt;扩展类路径 ---&gt;用户类路径 按顺序依次去寻找，加载类。 那么就会有3个类目录对象，所以就要定义一个结构体去存放它。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Classpath <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	BootClasspath Entry
	ExtClasspath  Entry
	UserClasspath Entry
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动类路径" tabindex="-1"><a class="header-anchor" href="#启动类路径"><span>启动类路径</span></a></h4><p>启动路径,其实对应<code>Jre</code>目录下\`\`lib\` 也就是运行java 程序必须可少的基本运行库。</p><p>通过 <code>-Xjre</code> 指定 如果不指定 会在当前路径下寻找jre 如果找不到 就会从我们在装java是配置的<code>JAVA_HOME</code>环境变量 中去寻找。</p><p>所以获取验证环境变量的方法如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">getJreDir</span><span class="token punctuation">(</span>jreOption <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token comment">//如果 从cmd  -Xjre 获取到目录 并且存在</span>
	<span class="token keyword">if</span> jreOption <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exists</span><span class="token punctuation">(</span>jreOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//返回目录</span>
		<span class="token keyword">return</span> jreOption 
	<span class="token punctuation">}</span>
	<span class="token comment">//如果 当前路径下 有 jre 返回目录</span>
	<span class="token keyword">if</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">&quot;./jre&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		<span class="token keyword">return</span> <span class="token string">&quot;./jre&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//如果 上面都找不到 到系统环境 变量中寻找 </span>
	<span class="token keyword">if</span> jh <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;JAVA_HOME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jh <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token comment">//存在 就返回</span>
		<span class="token keyword">return</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>jh<span class="token punctuation">,</span> <span class="token string">&quot;jre&quot;</span><span class="token punctuation">)</span> 
	<span class="token punctuation">}</span>
	<span class="token comment">//都找不到 就报错</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Can not find jre folder!&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
<span class="token comment">//判断 目录是否存在</span>
<span class="token keyword">func</span> <span class="token function">exists</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展类路径" tabindex="-1"><a class="header-anchor" href="#扩展类路径"><span>扩展类路径</span></a></h4><p>扩展类 路径一般 在启动路径 的子目录下<code> jre/lib/ext</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Classpath<span class="token punctuation">)</span> <span class="token function">parseBootAndExtClasspath</span><span class="token punctuation">(</span>jreOption <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	jreDir <span class="token operator">:=</span> <span class="token function">getJreDir</span><span class="token punctuation">(</span>jreOption<span class="token punctuation">)</span>

	<span class="token comment">// 拼接成jre 的路径</span>
	<span class="token comment">// jre/lib/*</span>
	jreLibPath <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>jreDir<span class="token punctuation">,</span> <span class="token string">&quot;lib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">//加载 所有底下的 jar包</span>
	self<span class="token punctuation">.</span>BootClasspath <span class="token operator">=</span> <span class="token function">newWildcardEntry</span><span class="token punctuation">(</span>jreLibPath<span class="token punctuation">)</span>

	<span class="token comment">// 拼接 扩展类 的路径</span>
	<span class="token comment">// jre/lib/ext/*</span>
	jreExtPath <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>jreDir<span class="token punctuation">,</span> <span class="token string">&quot;lib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">//加载 所有底下的jar包</span>
	self<span class="token punctuation">.</span>ExtClasspath <span class="token operator">=</span> <span class="token function">newWildcardEntry</span><span class="token punctuation">(</span>jreExtPath<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用户类路径" tabindex="-1"><a class="header-anchor" href="#用户类路径"><span>用户类路径</span></a></h4><p>用户类路径通过前面提到的 -classpath 来指定 ,如果没有指定 就默认为当前路径就好</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Classpath<span class="token punctuation">)</span> <span class="token function">parseUserClasspath</span><span class="token punctuation">(</span>cpOption <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//如果没有指定</span>
	<span class="token keyword">if</span> cpOption <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
	<span class="token comment">// . 作为当前路径</span>
	cpOption <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span> 
	<span class="token punctuation">}</span>
	<span class="token comment">//创建 类目录对象</span>
	self<span class="token punctuation">.</span>UserClasspath <span class="token operator">=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>cpOption<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现类的加载" tabindex="-1"><a class="header-anchor" href="#实现类的加载"><span>实现类的加载</span></a></h4><p>对于指定文件类名取查找 我们是按前面提到的(启动路径---&gt;扩展类路径 ---&gt;用户类路径 按顺序依次去寻找，加载类),没找到就挨个查找下去。</p><p>如果用户没有提供<code>-classpath/-cp</code>选项，则使用当前目录作为用 户类路径。<code>ReadClass()</code>方法依次从启动类路径、扩展类路径和用户 类路径中搜索class文件，</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//根据类名 分别从 bootClasspath,extClasspath,userClasspath 依次加载类目录</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Classpath<span class="token punctuation">)</span> <span class="token function">ReadClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> ClassDirEntry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	className <span class="token operator">=</span> className <span class="token operator">+</span> <span class="token string">&quot;.class&quot;</span>
	<span class="token keyword">if</span> data<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> err <span class="token operator">:=</span> self<span class="token punctuation">.</span>BootClasspath<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> err <span class="token punctuation">}</span>
	<span class="token keyword">if</span> data<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> err <span class="token operator">:=</span> self<span class="token punctuation">.</span>ExtClasspath<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> err <span class="token punctuation">}</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>UserClasspath<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化类加载目录" tabindex="-1"><a class="header-anchor" href="#初始化类加载目录"><span>初始化类加载目录</span></a></h4><p>定义一个初始化函数,来作为初始函数,执行后生成一个 Classpath对象。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//jreOption 为启动类目录  cpOption 为 用户指定类目录 从cmd 命令行 中解析获取</span>
<span class="token keyword">func</span> <span class="token function">InitClassPath</span><span class="token punctuation">(</span>jreOption<span class="token punctuation">,</span> cpOption <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Classpath <span class="token punctuation">{</span>
	cp <span class="token operator">:=</span> <span class="token operator">&amp;</span>Classpath<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token comment">//初始化 启动类目录</span>
	cp<span class="token punctuation">.</span><span class="token function">parseBootAndExtClasspath</span><span class="token punctuation">(</span>jreOption<span class="token punctuation">)</span>
	<span class="token comment">//初始化 用户类目录</span>
	cp<span class="token punctuation">.</span><span class="token function">parseUserClasspath</span><span class="token punctuation">(</span>cpOption<span class="token punctuation">)</span>
	<span class="token keyword">return</span> cp
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意，传递给ReadClass()方法的类名不包含“.class”后缀。</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/b22852ac90c22b48f2eb0e3b6706002b.png" alt="" style="zoom:50%;"><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>成功获取到class文件！</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/4fa2b73dc87b40890341c98eb7cbcf11.png" alt="" style="zoom:50%;">`,58);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("接下来将使用"),s("a",r,[n("组合模式"),i(t)]),n("来设计和实现类路径。")]),k])}const h=p(l,[["render",d],["__file","获取类路径.html.vue"]]),f=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E7%B1%BB%E8%B7%AF%E5%BE%84.html","title":"获取类路径","lang":"zh-CN","frontmatter":{"title":"获取类路径","order":3,"description":"获取类路径 已经完成了JAVA应用程序如何启动：命令行启动，并获取到了启动时需要的选项和参数。 但是，如果要启动一个最简单的“Hello World”程序（如下），也需要加载很多所需的类进入JVM中 加载HelloWorld类之前，需要加载该类的父类(超类)，也就是java.lang.Object，main函数的参数为String[]类型，因此也需要将...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E8%8E%B7%E5%8F%96%E7%B1%BB%E8%B7%AF%E5%BE%84.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"获取类路径"}],["meta",{"property":"og:description","content":"获取类路径 已经完成了JAVA应用程序如何启动：命令行启动，并获取到了启动时需要的选项和参数。 但是，如果要启动一个最简单的“Hello World”程序（如下），也需要加载很多所需的类进入JVM中 加载HelloWorld类之前，需要加载该类的父类(超类)，也就是java.lang.Object，main函数的参数为String[]类型，因此也需要将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"获取类路径\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"获取类路径","slug":"获取类路径","link":"#获取类路径","children":[{"level":3,"title":"类路径介绍","slug":"类路径介绍","link":"#类路径介绍","children":[]},{"level":3,"title":"解析用户类路径","slug":"解析用户类路径","link":"#解析用户类路径","children":[]},{"level":3,"title":"获取用户类路径","slug":"获取用户类路径","link":"#获取用户类路径","children":[]},{"level":3,"title":"实现类目录","slug":"实现类目录","link":"#实现类目录","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]}],"git":{},"readingTime":{"minutes":9.82,"words":2946},"filePathRelative":"book/Go实现Java虚拟机/解析Class文件/获取类路径.md","autoDesc":true}');export{h as comp,f as data};

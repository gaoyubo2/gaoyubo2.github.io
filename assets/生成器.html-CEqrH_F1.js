import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as l,b as s,e as n,f as e,d as t}from"./app-D1py-eEI.js";const c={},r=t('<p>**亦称：**建造者模式、Builder</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261127630.png" alt="生成器设计模式" style="zoom:67%;"><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中； 甚至还有更糟糕的情况， 那就是这些代码散落在客户端代码的多个位置。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261127695.png" alt="大量子类会带来新的问题" style="zoom:67%;"><blockquote><p>如果为每种可能的对象都创建一个子类， 这可能会导致程序变得过于复杂。</p></blockquote><p>例如， 我们来思考如何创建一个 <code>房屋</code>House对象。 建造一栋简单的房屋， 首先你需要建造四面墙和地板， 安装房门和一套窗户， 然后再建造一个屋顶。 但是如果你想要一栋更宽敞更明亮的房屋， 还要有院子和其他设施 （例如暖气、 排水和供电设备）， 那又该怎么办呢？</p><p>最简单的方法是扩展 <code>房屋</code>基类， 然后创建一系列涵盖所有参数组合的子类。 但最终你将面对相当数量的子类。 任何新增的参数 （例如门廊类型） 都会让这个层次结构更加复杂。</p><p>另一种方法则无需生成子类。 你可以在 <code>房屋</code>基类中创建一个包括所有可能参数的超级构造函数， 并用它来控制房屋对象。 这种方法确实可以避免生成子类， 但它却会造成另外一个问题。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261128674.png" alt="可伸缩的构造函数" style="zoom:80%;"><blockquote><p>拥有大量输入参数的构造函数也有缺陷： 这些参数也不是每次都要全部用上的。</p></blockquote>',13),u={href:"https://refactoringguru.cn/smells/long-parameter-list",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>生成器模式建议将<strong>对象构造代码</strong>从产品类中抽取出来， 并将其放在一个名为<strong>生成器</strong>的独立对象中。</p><blockquote><p>生成器模式让你能够分步骤创建复杂对象。 生成器不允许其他对象访问正在创建中的产品。</p></blockquote><p>该模式会将对象构造过程划分为一组步骤， 比如 <code>build­Walls</code>创建墙壁和 <code>build­Door</code>创建房门创建房门等。 每次创建对象时， 你都需要通过生成器对象执行一系列步骤。 重点在于你无需调用所有步骤， 而只需调用创建特定对象配置所需的那些步骤即可。</p><p>当你需要创建不同形式的产品时， 其中的一些构造步骤可能需要不同的实现。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p><p>在这种情况下， 你可以创建多个不同的生成器， 用不同方式实现一组相同的创建步骤。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261353238.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>不同生成器以不同方式执行相同的任务。</p></blockquote><p>例如， 假设第一个建造者使用木头和玻璃制造房屋， 第二个建造者使用石头和钢铁， 而第三个建造者使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是， 只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。</p><h4 id="主管" tabindex="-1"><a class="header-anchor" href="#主管"><span>主管</span></a></h4><p>你可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的<em>主管</em>类。 主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261354790.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>严格来说， 你的程序中并不一定需要主管类。 客户端代码可直接以特定顺序调用创建步骤。 不过， 主管类中非常适合放入各种例行构造流程， <strong>以便在程序中反复使用</strong>。</p><p>此外， 对于客户端代码来说， 主管类完全隐藏了产品构造细节。 <strong>客户端只需要将一个生成器与主管类关联</strong>， 然后使用主管类来构造产品， 就能从生成器处获得构造结果了。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261354544.png" alt="生成器设计模式结构" tabindex="0" loading="lazy"><figcaption>生成器设计模式结构</figcaption></figure><ol><li><strong>生成器</strong> （Builder） 接口声明在所有类型生成器中通用的产品构造步骤。</li><li><strong>具体生成器</strong> （Concrete Builders） 提供构造过程的不同实现。 具体生成器也可以构造不遵循通用接口的产品。</li><li><strong>产品</strong> （Products） 是最终生成的对象。 由不同生成器构造的产品无需属于同一类层次结构或接口。</li><li><strong>主管</strong> （Director） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。</li><li><strong>客户端</strong> （Client） 必须将某个生成器对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用生成器对象完成后续所有的构造任务。 但在客户端将生成器对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的生成器。</li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>下面关于<strong>生成器</strong>模式的例子演示了你可以如何复用相同的对象构造代码来生成不同类型的产品——例如汽车 （Car）——及其相应的使用手册 （Manual）。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261356889.png" alt="生成器模式结构示例" tabindex="0" loading="lazy"><figcaption>生成器模式结构示例</figcaption></figure><p>汽车是一个复杂对象， 有数百种不同的制造方法。 我们没有在 <code>汽车</code>类中塞入一个巨型构造函数， 而是将汽车组装代码抽取到单独的汽车生成器类中。 该类中有一组方法可用来配置汽车的各种部件。</p><p>如果客户端代码需要组装一辆与众不同、 精心调教的汽车， 它可以直接调用生成器。 或者， 客户端可以将组装工作委托给主管类， 因为主管类知道如何使用生成器制造最受欢迎的几种型号汽车。</p><p>你或许会感到吃惊， 但确实每辆汽车都需要一本使用手册 （说真的， 谁会去读它们呢？）。 使用手册会介绍汽车的每一项功能， 因此不同型号的汽车， 其使用手册内容也不一样。 因此， 你可以复用现有流程来制造实际的汽车及其对应的手册。 当然， 编写手册和制造汽车不是一回事， 所以我们需要另外一个生成器对象来专门编写使用手册。 该类与其制造汽车的兄弟类都实现了相同的制造方法， 但是其功能不是制造汽车部件， 而是描述每个部件。 将这些生成器传递给相同的主管对象， 我们就能够生成一辆汽车或是一本使用手册了。</p><p>最后一个部分是获取结果对象。 尽管金属汽车和纸质手册存在关联， 但它们却是完全不同的东西。 我们无法在主管类和具体产品类不发生耦合的情况下， 在主管类中提供获取结果对象的方法。 因此， 我们只能通过负责制造过程的生成器来获取结果对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 只有当产品较为复杂且需要详细配置时，使用生成器模式才有意义。下面的两个</span>
<span class="token comment">// 产品尽管没有同样的接口，但却相互关联。</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span> is
    <span class="token comment">// 一辆汽车可能配备有 GPS 设备、行车电脑和几个座位。不同型号的汽车（</span>
    <span class="token comment">// 运动型轿车、SUV 和敞篷车）可能会安装或启用不同的功能。</span>

<span class="token keyword">class</span> <span class="token class-name">Manual</span> is
    <span class="token comment">// 用户使用手册应该根据汽车配置进行编制，并介绍汽车的所有功能。</span>


<span class="token comment">// 生成器接口声明了创建产品对象不同部件的方法。</span>
<span class="token keyword">interface</span> <span class="token class-name">Builder</span> is
    method <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    method <span class="token function">setSeats</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span>
    method <span class="token function">setEngine</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span>
    method <span class="token function">setTripComputer</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span>
    method <span class="token function">setGPS</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span>

<span class="token comment">// 具体生成器类将遵循生成器接口并提供生成步骤的具体实现。你的程序中可能会</span>
<span class="token comment">// 有多个以不同方式实现的生成器变体。</span>
<span class="token keyword">class</span> <span class="token class-name">CarBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> is
    <span class="token keyword">private</span> field car<span class="token operator">:</span><span class="token class-name">Car</span>

    <span class="token comment">// 一个新的生成器实例必须包含一个在后续组装过程中使用的空产品对象。</span>
    constructor <span class="token class-name">CarBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// reset（重置）方法可清除正在生成的对象。</span>
    method <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 所有生成步骤都会与同一个产品实例进行交互。</span>
    method <span class="token function">setSeats</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 设置汽车座位的数量。</span>

    method <span class="token function">setEngine</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 安装指定的引擎。</span>

    method <span class="token function">setTripComputer</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 安装行车电脑。</span>

    method <span class="token function">setGPS</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 安装全球定位系统。</span>

    <span class="token comment">// 具体生成器需要自行提供获取结果的方法。这是因为不同类型的生成器可能</span>
    <span class="token comment">// 会创建不遵循相同接口的、完全不同的产品。所以也就无法在生成器接口中</span>
    <span class="token comment">// 声明这些方法（至少在静态类型的编程语言中是这样的）。</span>
    <span class="token comment">//</span>
    <span class="token comment">// 通常在生成器实例将结果返回给客户端后，它们应该做好生成另一个产品的</span>
    <span class="token comment">// 准备。因此生成器实例通常会在 \`getProduct（获取产品）\`方法主体末尾</span>
    <span class="token comment">// 调用重置方法。但是该行为并不是必需的，你也可让生成器等待客户端明确</span>
    <span class="token comment">// 调用重置方法后再去处理之前的结果。</span>
    method <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token class-name">Car</span> is
        product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>car
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> product

<span class="token comment">// 生成器与其他创建型模式的不同之处在于：它让你能创建不遵循相同接口的产品。</span>
<span class="token keyword">class</span> <span class="token class-name">CarManualBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> is
    <span class="token keyword">private</span> field manual<span class="token operator">:</span><span class="token class-name">Manual</span>

    constructor <span class="token class-name">CarManualBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    method <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>manual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manual</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    method <span class="token function">setSeats</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 添加关于汽车座椅功能的文档。</span>

    method <span class="token function">setEngine</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 添加关于引擎的介绍。</span>

    method <span class="token function">setTripComputer</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 添加关于行车电脑的介绍。</span>

    method <span class="token function">setGPS</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span> is
        <span class="token comment">// 添加关于 GPS 的介绍。</span>

    method <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token class-name">Manual</span> is
        <span class="token comment">// 返回使用手册并重置生成器。</span>


<span class="token comment">// 主管只负责按照特定顺序执行生成步骤。其在根据特定步骤或配置来生成产品时</span>
<span class="token comment">// 会很有帮助。由于客户端可以直接控制生成器，所以严格意义上来说，主管类并</span>
<span class="token comment">// 不是必需的。</span>
<span class="token keyword">class</span> <span class="token class-name">Director</span> is
    <span class="token comment">// 主管可同由客户端代码传递给自身的任何生成器实例进行交互。客户端可通</span>
    <span class="token comment">// 过这种方式改变最新组装完毕的产品的最终类型。主管可使用同样的生成步</span>
    <span class="token comment">// 骤创建多个产品变体。</span>
    method <span class="token function">constructSportsCar</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> <span class="token class-name">Builder</span><span class="token punctuation">)</span> is
        builder<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setSeats</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SportEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setTripComputer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        builder<span class="token punctuation">.</span><span class="token function">setGPS</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

    method <span class="token function">constructSUV</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> <span class="token class-name">Builder</span><span class="token punctuation">)</span> is
        <span class="token comment">// ……</span>


<span class="token comment">// 客户端代码会创建生成器对象并将其传递给主管，然后执行构造过程。最终结果</span>
<span class="token comment">// 将需要从生成器对象中获取。</span>
<span class="token keyword">class</span> <span class="token class-name">Application</span> is

    method <span class="token function">makeCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token class-name">CarBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        director<span class="token punctuation">.</span><span class="token function">constructSportsCar</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>
        <span class="token class-name">Car</span> car <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token class-name">CarManualBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarManualBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        director<span class="token punctuation">.</span><span class="token function">constructSportsCar</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>

        <span class="token comment">// 最终产品通常需要从生成器对象中获取，因为主管不知晓具体生成器和</span>
        <span class="token comment">// 产品的存在，也不会对其产生依赖。</span>
        <span class="token class-name">Manual</span> manual <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成器模式适合应用场景" tabindex="-1"><a class="header-anchor" href="#生成器模式适合应用场景"><span>生成器模式适合应用场景</span></a></h2><p>使用生成器模式可避免 “重叠构造函数 （telescoping constructor）” 的出现。</p><p>假设你的构造函数中有十个可选参数， 那么调用该函数会非常不方便； 因此， 你需要重载这个构造函数， 新建几个只有较少参数的简化版。 但这些构造函数仍需调用主构造函数， 传递一些默认数值来替代省略掉的参数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pizza</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>
    <span class="token class-name">Pizza</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cheese<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>
    <span class="token class-name">Pizza</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cheese<span class="token punctuation">,</span> <span class="token keyword">boolean</span> pepperoni<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span>
    <span class="token comment">// ……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有在 C# 或 Java 等支持方法重载的编程语言中才能写出如此复杂的构造函数。</p><p>生成器模式让你可以分步骤生成对象， 而且允许你仅使用必须的步骤。 应用该模式后， 你再也不需要将几十个参数塞进构造函数里了。</p><p>当你希望使用代码创建不同形式的产品 （例如石头或木头房屋） 时， 可使用生成器模式。</p><p>如果你需要创建的各种形式的产品， 它们的制造过程相似且仅有细节上的差异， 此时可使用生成器模式。</p><p>基本生成器接口中定义了所有可能的制造步骤， 具体生成器将实现这些步骤来制造特定形式的产品。 同时， 主管类将负责管理制造步骤的顺序。</p>`,33),m={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},k=t('<p>生成器模式让你能分步骤构造产品。 你可以延迟执行某些步骤而不会影响最终产品。 你甚至可以递归调用这些步骤， 这在创建对象树时非常方便。</p><p>生成器在执行制造步骤时， 不能对外发布未完成的产品。 这可以避免客户端代码获取到不完整结果对象的情况。</p><h2 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法"><span>实现方法</span></a></h2><ol><li><p>清晰地定义通用步骤， 确保它们可以制造所有形式的产品。 否则你将无法进一步实施该模式。</p></li><li><p>在基本生成器接口中声明这些步骤。</p></li><li><p>为每个形式的产品创建具体生成器类， 并实现其构造步骤。</p><p>不要忘记实现获取构造结果对象的方法。 你不能在生成器接口中声明该方法， 因为不同生成器构造的产品可能没有公共接口， 因此你就不知道该方法返回的对象类型。 但是， 如果所有产品都位于单一类层次中， 你就可以安全地在基本接口中添加获取生成对象的方法。</p></li><li><p>考虑创建主管类。 它可以使用同一生成器对象来封装多种构造产品的方式。</p></li><li><p>客户端代码会同时创建生成器和主管对象。 构造开始前， 客户端必须将生成器对象传递给主管对象。 通常情况下， 客户端只需调用主管类构造函数一次即可。 主管类使用生成器对象完成后续所有制造任务。 还有另一种方式， 那就是客户端可以将生成器对象直接传递给主管类的制造方法。</p></li><li><p>只有在所有产品都遵循相同接口的情况下， 构造结果可以直接通过主管类获取。 否则， 客户端应当通过生成器获取构造结果。</p></li></ol><h2 id="生成器模式优缺点" tabindex="-1"><a class="header-anchor" href="#生成器模式优缺点"><span>生成器模式优缺点</span></a></h2><ul><li><p>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</p></li><li><p>生成不同形式的产品时， 你可以复用相同的制造代码。</p></li><li><p><em>单一职责原则</em>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</p></li><li><p>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</p></li></ul><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>',7),v={href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"},g={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},b={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},f={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},y=s("em",null,"抽象工厂",-1),E=s("em",null,"生成器",-1),w={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},B={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},C={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},j=s("em",null,"主管",-1),z=s("em",null,"生成器",-1),A=s("em",null,"实现",-1),P={href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"},S={href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"},M={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"},q={href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,"原文：https://refactoringguru.cn/design-patterns/builder",-1);function F(G,T){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,s("p",null,[n("通常情况下， 绝大部分的参数都没有使用， 这使得"),s("a",u,[n("对于构造函数的调用十分不简洁"),e(a)]),n("。 例如， 只有很少的房子有游泳池， 因此与游泳池相关的参数十之八九是毫无用处的。")]),d,s("p",null,[n("使用生成器构造"),s("a",m,[n("组合"),e(a)]),n("树或其他复杂对象。")]),k,s("ul",null,[s("li",null,[n("在许多设计工作的初期都会使用"),s("a",v,[n("工厂方法模式"),e(a)]),n(" （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用"),s("a",g,[n("抽象工厂模式"),e(a)]),n("、 "),s("a",b,[n("原型模式"),e(a)]),n("或"),s("a",h,[n("生成器模式"),e(a)]),n(" （更灵活但更加复杂）。")]),s("li",null,[s("a",f,[n("生成器"),e(a)]),n("重点关注如何分步生成复杂对象。 "),s("a",_,[n("抽象工厂"),e(a)]),n("专门用于生产一系列相关对象。 "),y,n("会马上返回产品， "),E,n("则允许你在获取产品前执行一些额外构造步骤。")]),s("li",null,[n("你可以在创建复杂"),s("a",w,[n("组合模式"),e(a)]),n("树时使用"),s("a",B,[n("生成器"),e(a)]),n("， 因为这可使其构造步骤以递归的方式运行。")]),s("li",null,[n("你可以结合使用"),s("a",C,[n("生成器"),e(a)]),n("和"),s("a",x,[n("桥接模式"),e(a)]),n("： "),j,n("类负责抽象工作， 各种不同的"),z,n("负责"),A,n("工作。")]),s("li",null,[s("a",P,[n("抽象工厂"),e(a)]),n("、 "),s("a",S,[n("生成器"),e(a)]),n("和"),s("a",M,[n("原型"),e(a)]),n("都可以用"),s("a",q,[n("单例模式"),e(a)]),n("来实现。")])]),N])}const H=p(c,[["render",F],["__file","生成器.html.vue"]]),I=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%94%9F%E6%88%90%E5%99%A8.html","title":"生成器模式","lang":"zh-CN","frontmatter":{"title":"生成器模式","description":"**亦称：**建造者模式、Builder 简介 生成器模式是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。 生成器设计模式 问题 假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%94%9F%E6%88%90%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"生成器模式"}],["meta",{"property":"og:description","content":"**亦称：**建造者模式、Builder 简介 生成器模式是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。 生成器设计模式 问题 假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261353238.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成器模式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261353238.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261354790.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261354544.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404261356889.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"生成器模式适合应用场景","slug":"生成器模式适合应用场景","link":"#生成器模式适合应用场景","children":[]},{"level":2,"title":"实现方法","slug":"实现方法","link":"#实现方法","children":[]},{"level":2,"title":"生成器模式优缺点","slug":"生成器模式优缺点","link":"#生成器模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{},"readingTime":{"minutes":14.74,"words":4422},"filePathRelative":"guide/设计模式/创建型模式/生成器.md","autoDesc":true}');export{H as comp,I as data};

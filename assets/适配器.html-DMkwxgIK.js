import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,b as n,f as e,e as s,d as c}from"./app-D1py-eEI.js";const i={},u=n("p",null,[n("strong",null,"适配器"),s("是一种结构型设计模式， 它能使不兼容的对象能够相互合作。")],-1),r=n("p",null,"适配器可担任两个对象间的封装器， 它会接收对于一个对象的调用， 并将其转换为另一个对象可识别的格式和接口。",-1),d=n("p",null,[n("strong",null,"使用示例："),s(" 适配器模式在 Java 代码中很常见。 基于一些遗留代码的系统常常会使用该模式。 在这种情况下， 适配器让遗留代码与现代的类得以相互合作。")],-1),k=n("p",null,"Java 核心程序库中有一些标准的适配器：",-1),v={href:"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"java.util.Arrays#asList()",-1),h={href:"https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"java.util.Collections#list()",-1),g={href:"https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"java.util.Collections#enumeration()",-1),w={href:"https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html#InputStreamReader-java.io.InputStream-",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"java.io.InputStreamReader(InputStream)",-1),f=n("code",null,"Reader",-1),j={href:"https://docs.oracle.com/javase/8/docs/api/java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"java.io.OutputStreamWriter(OutputStream)",-1),E=n("code",null,"Writer",-1),A={href:"https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"javax.xml.bind.annotation.adapters.XmlAdapter#marshal()",-1),S=n("code",null,"#unmarshal()",-1),x=c(`<p><strong>识别方法：</strong> 适配器可以通过以不同抽象或接口类型实例为参数的构造函数来识别。 当适配器的任何方法被调用时， 它会将参数转换为合适的格式， 然后将调用定向到其封装对象中的一个或多个方法。</p><h2 id="让方钉适配圆孔" tabindex="-1"><a class="header-anchor" href="#让方钉适配圆孔"><span>让方钉适配圆孔</span></a></h2><p>这个简单的例子展示了适配器如何让不兼容的对象相互合作。</p><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h3><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281508544.png" alt="image-20240428150846513" style="zoom:67%;"><h3 id="round" tabindex="-1"><a class="header-anchor" href="#round"><span>round</span></a></h3><h4 id="round-roundhole-java-圆孔" tabindex="-1"><a class="header-anchor" href="#round-roundhole-java-圆孔"><span>round/RoundHole.java: 圆孔</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundHole</span> <span class="token punctuation">{</span>

    <span class="token comment">// 定义一个成员变量</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">RoundHole</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义一个方法，用于判断某个圆孔是否能够放入某个圆钉</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">fits</span><span class="token punctuation">(</span><span class="token class-name">RoundPeg</span> roundPeg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> radius <span class="token operator">&gt;=</span> roundPeg<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="round-roundpeg-java-圆钉" tabindex="-1"><a class="header-anchor" href="#round-roundpeg-java-圆钉"><span>round/RoundPeg.java: 圆钉</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundPeg</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RoundPeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">RoundPeg</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="square" tabindex="-1"><a class="header-anchor" href="#square"><span>square</span></a></h3><h4 id="square-squarepeg-java-方钉" tabindex="-1"><a class="header-anchor" href="#square-squarepeg-java-方钉"><span>square/SquarePeg.java**😗* 方钉</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SquarePeg</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SquarePeg</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adapters" tabindex="-1"><a class="header-anchor" href="#adapters"><span>adapters</span></a></h3><h4 id="adapters-squarepegadapter-java-方钉到圆孔的适配器" tabindex="-1"><a class="header-anchor" href="#adapters-squarepegadapter-java-方钉到圆孔的适配器"><span>adapters/SquarePegAdapter.java: 方钉到圆孔的适配器</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 适配器允许将方形钉子安装到圆孔中，适配谁就继承谁</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SquarePegAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RoundPeg</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SquarePeg</span> peg<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SquarePegAdapter</span><span class="token punctuation">(</span><span class="token class-name">SquarePeg</span> peg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>peg <span class="token operator">=</span> peg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> result<span class="token punctuation">;</span>
        <span class="token comment">// 计算一个最小圆半径，它可以拟合这个钉子。方钉对角线的一半就是圆钉的半径</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>peg<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RoundPeg</span> roundPeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundPeg</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RoundHole</span> roundHole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundHole</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>roundHole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>roundPeg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;圆钉 r5 适合圆孔 r5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;圆钉 r5 不适合圆孔 r5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">SquarePeg</span> squarePeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePeg</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 适配器</span>
        <span class="token class-name">SquarePegAdapter</span> squarePegAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SquarePegAdapter</span><span class="token punctuation">(</span>squarePeg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正方形钉半径：&quot;</span><span class="token operator">+</span>squarePegAdapter<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>roundHole<span class="token punctuation">.</span><span class="token function">fits</span><span class="token punctuation">(</span>squarePegAdapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正方形钉 r6 适合圆孔 r5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正方形钉 r6 不适合圆孔 r5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果： <img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281405770.png" alt="image-20240428140521737" style="zoom:67%;"></p>`,19);function R(B,C){const a=p("ExternalLinkIcon");return o(),l("div",null,[u,r,d,k,n("ul",null,[n("li",null,[n("a",v,[m,e(a)])]),n("li",null,[n("a",h,[b,e(a)])]),n("li",null,[n("a",g,[y,e(a)])]),n("li",null,[n("a",w,[_,e(a)]),s(" （返回 "),f,s("对象）")]),n("li",null,[n("a",j,[q,e(a)]),s(" （返回 "),E,s("对象）")]),n("li",null,[n("a",A,[P,e(a)]),s(" 和 "),S])]),x])}const J=t(i,[["render",R],["__file","适配器.html.vue"]]),N=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/%E9%80%82%E9%85%8D%E5%99%A8.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","description":"适配器是一种结构型设计模式， 它能使不兼容的对象能够相互合作。 适配器可担任两个对象间的封装器， 它会接收对于一个对象的调用， 并将其转换为另一个对象可识别的格式和接口。 使用示例： 适配器模式在 Java 代码中很常见。 基于一些遗留代码的系统常常会使用该模式。 在这种情况下， 适配器让遗留代码与现代的类得以相互合作。 Java 核心程序库中有一些标...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/%E9%80%82%E9%85%8D%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"适配器是一种结构型设计模式， 它能使不兼容的对象能够相互合作。 适配器可担任两个对象间的封装器， 它会接收对于一个对象的调用， 并将其转换为另一个对象可识别的格式和接口。 使用示例： 适配器模式在 Java 代码中很常见。 基于一些遗留代码的系统常常会使用该模式。 在这种情况下， 适配器让遗留代码与现代的类得以相互合作。 Java 核心程序库中有一些标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"让方钉适配圆孔","slug":"让方钉适配圆孔","link":"#让方钉适配圆孔","children":[{"level":3,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]},{"level":3,"title":"round","slug":"round","link":"#round","children":[]},{"level":3,"title":"square","slug":"square","link":"#square","children":[]},{"level":3,"title":"adapters","slug":"adapters","link":"#adapters","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]}]}],"git":{},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"guide/设计模式/代码示例/适配器.md","autoDesc":true}');export{J as comp,N as data};

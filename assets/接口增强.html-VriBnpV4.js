import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,d as s}from"./app-D1py-eEI.js";const t={},i=s(`<h2 id="接口增强1" tabindex="-1"><a class="header-anchor" href="#接口增强1"><span>接口增强1</span></a></h2><p>JDK8之后对接口做了增加，接口中可以有 默认方法 和 静态方法</p><p>原因：如果接口中新增抽象方法，那么实现类都必须要抽象这个抽象方法，非常不利于接口的扩展的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
    静态常量<span class="token punctuation">;</span>
    抽象方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
    静态常量<span class="token punctuation">;</span>
    抽象方法<span class="token punctuation">;</span>
    默认方法<span class="token punctuation">;</span>
    静态方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认方法" tabindex="-1"><a class="header-anchor" href="#默认方法"><span>默认方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
    修饰符 <span class="token keyword">default</span> 返回值类型 方法名<span class="token punctuation">{</span>
    	方法体<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">使用</p><p>接口中的默认方法有两种使用方式</p><ol><li><p>实现类直接调用接口的默认方法</p></li><li><p>实现类重写接口的默认方法</p></li></ol></div><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
    修饰符 <span class="token keyword">static</span> 返回值类型 方法名<span class="token punctuation">{</span>
    	方法体<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">使用</p><p>接口中的静态方法在实现类中是不能被重写的，调用的话只能通过接口类型来实现: 接口名.静态方法名</p></div>`,11),l=[i];function c(p,o){return n(),e("div",null,l)}const u=a(t,[["render",c],["__file","接口增强.html.vue"]]),v=JSON.parse('{"path":"/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%8E%A5%E5%8F%A3%E5%A2%9E%E5%BC%BA.html","title":"接口增强","lang":"zh-CN","frontmatter":{"title":"接口增强","description":"接口增强1 JDK8之后对接口做了增加，接口中可以有 默认方法 和 静态方法 原因：如果接口中新增抽象方法，那么实现类都必须要抽象这个抽象方法，非常不利于接口的扩展的 默认方法 使用 接口中的默认方法有两种使用方式 实现类直接调用接口的默认方法 实现类重写接口的默认方法 静态方法 使用 接口中的静态方法在实现类中是不能被重写的，调用的话只能通过接口类型...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/%E6%8E%A5%E5%8F%A3%E5%A2%9E%E5%BC%BA.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"接口增强"}],["meta",{"property":"og:description","content":"接口增强1 JDK8之后对接口做了增加，接口中可以有 默认方法 和 静态方法 原因：如果接口中新增抽象方法，那么实现类都必须要抽象这个抽象方法，非常不利于接口的扩展的 默认方法 使用 接口中的默认方法有两种使用方式 实现类直接调用接口的默认方法 实现类重写接口的默认方法 静态方法 使用 接口中的静态方法在实现类中是不能被重写的，调用的话只能通过接口类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口增强\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"接口增强1","slug":"接口增强1","link":"#接口增强1","children":[{"level":3,"title":"默认方法","slug":"默认方法","link":"#默认方法","children":[]},{"level":3,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]}]}],"git":{},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"guide/JDK8新特性/接口增强.md","autoDesc":true}');export{u as comp,v as data};

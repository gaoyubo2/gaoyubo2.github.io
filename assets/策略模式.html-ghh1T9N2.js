import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as o,b as s,e as n,f as e,d as p}from"./app-D1py-eEI.js";const c={},r=p(`<p><strong>亦称：</strong> Strategy</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>策略模式</strong>是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291624275.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。</p><p>用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的最快路线。</p><p>程序的首个版本只能规划公路路线。 驾车旅行的人们对此非常满意。 但很显然， 并非所有人都会在度假时开车。 因此你在下次更新时添加了规划步行路线的功能。 此后， 你又添加了规划公共交通路线的功能。</p><p>而这只是个开始。 不久后， 你又要为骑行者规划路线。 又过了一段时间， 你又要为游览城市中的所有景点规划路线。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291624280.png" alt="导游代码将变得非常臃肿" tabindex="0" loading="lazy"><figcaption>导游代码将变得非常臃肿</figcaption></figure><blockquote><p>导游代码将变得非常臃肿</p></blockquote><p>尽管从商业角度来看， 这款应用非常成功， 但其技术部分却让你非常头疼： 每次添加新的路线规划算法后， 导游应用中主要类的体积就会增加一倍。 终于在某个时候， 你觉得自己没法继续维护这堆代码了。</p><p>无论是修复简单缺陷还是微调街道权重， 对某个算法进行任何修改都会影响整个类， 从而增加在已有正常运行代码中引入错误的风险。</p><p>此外， 团队合作将变得低效。 如果你在应用成功发布后招募了团队成员， 他们会抱怨在合并冲突的工作上花费了太多时间。 在实现新功能的过程中， 你的团队需要修改同一个巨大的类， 这样他们所编写的代码相互之间就可能会出现冲突。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>策略模式建议找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为<em>策略</em>的独立类中。</p><p>名为<em>上下文</em>的原始类必须包含一个成员变量来存储对于每种策略的引用。 上下文并不执行任务， 而是将工作委派给已连接的策略对象。</p><p>上下文不负责选择符合任务需要的算法——客户端会将所需策略传递给上下文。 实际上， 上下文并不十分了解策略， 它会通过同样的通用接口与所有策略进行交互， 而该接口只需暴露一个方法来触发所选策略中封装的算法即可。</p><p>因此， 上下文可独立于具体策略。 这样你就可在不修改上下文代码或其他策略的情况下添加新算法或修改已有算法了。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291625586.png" alt="路线规划策略" tabindex="0" loading="lazy"><figcaption>路线规划策略</figcaption></figure><blockquote><p>路线规划策略</p></blockquote><p>在导游应用中， 每个路线规划算法都可被抽取到只有一个 <code>build­Route</code>生成路线方法的独立类中。 该方法接收起点和终点作为参数， 并返回路线中途点的集合。</p><p>即使传递给每个路径规划类的参数一模一样， 其所创建的路线也可能完全不同。 主要导游类的主要工作是在地图上渲染一系列中途点， 不会在意如何选择算法。 该类中还有一个用于切换当前路径规划策略的方法， 因此客户端 （例如用户界面中的按钮） 可用其他策略替换当前选择的路径规划行为。</p><h2 id="真实世界类比" tabindex="-1"><a class="header-anchor" href="#真实世界类比"><span>真实世界类比</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291625943.png" alt="各种出行策略" tabindex="0" loading="lazy"><figcaption>各种出行策略</figcaption></figure><blockquote><p>各种前往机场的出行策略</p></blockquote><p>假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。</p><h2 id="策略模式结构" tabindex="-1"><a class="header-anchor" href="#策略模式结构"><span>策略模式结构</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291626518.png" alt="策略设计模式的结构" tabindex="0" loading="lazy"><figcaption>策略设计模式的结构</figcaption></figure><ol><li><strong>上下文</strong> （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li><li><strong>策略</strong> （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li><li><strong>具体策略</strong> （Concrete Strategies） 实现了上下文所用算法的各种不同变体。</li><li>当上下文需要运行算法时， 它会在其已连接的策略对象上调用执行方法。 上下文不清楚其所涉及的策略类型与算法的执行方式。</li><li><strong>客户端</strong> （Client） 会创建一个特定策略对象并将其传递给上下文。 上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>在本例中， 上下文使用了多个<strong>策略</strong>来执行不同的计算操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 策略接口声明了某个算法各个不同版本间所共有的操作。上下文会使用该接口来</span>
<span class="token comment">// 调用有具体策略定义的算法。</span>
<span class="token keyword">interface</span> <span class="token class-name">Strategy</span> is
    method <span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token comment">// 具体策略会在遵循策略基础接口的情况下实现算法。该接口实现了它们在上下文</span>
<span class="token comment">// 中的互换性。</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyAdd</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> is
    method <span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> is
        <span class="token keyword">return</span> a <span class="token operator">+</span> b

<span class="token keyword">class</span> <span class="token class-name">ConcreteStrategySubtract</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> is
    method <span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> is
        <span class="token keyword">return</span> a <span class="token operator">-</span> b

<span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyMultiply</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> is
    method <span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> is
        <span class="token keyword">return</span> a <span class="token operator">*</span> b

<span class="token comment">// 上下文定义了客户端关注的接口。</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> is
    <span class="token comment">// 上下文会维护指向某个策略对象的引用。上下文不知晓策略的具体类。上下</span>
    <span class="token comment">// 文必须通过策略接口来与所有策略进行交互。</span>
    <span class="token keyword">private</span> strategy<span class="token operator">:</span> <span class="token class-name">Strategy</span>

    <span class="token comment">// 上下文通常会通过构造函数来接收策略对象，同时还提供设置器以便在运行</span>
    <span class="token comment">// 时切换策略。</span>
    method <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy

    <span class="token comment">// 上下文会将一些工作委派给策略对象，而不是自行实现不同版本的算法。</span>
    method <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> is
        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>


<span class="token comment">// 客户端代码会选择具体策略并将其传递给上下文。客户端必须知晓策略之间的差</span>
<span class="token comment">// 异，才能做出正确的选择。</span>
<span class="token keyword">class</span> <span class="token class-name">ExampleApplication</span> is
    method <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is

        创建上下文对象。

        读取第一个数。
        读取最后一个数。
        从用户输入中读取期望进行的行为。

        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> addition<span class="token punctuation">)</span> then
            context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> subtraction<span class="token punctuation">)</span> then
            context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStrategySubtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> multiplication<span class="token punctuation">)</span> then
            context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyMultiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token class-name">First</span> number<span class="token punctuation">,</span> <span class="token class-name">Second</span> number<span class="token punctuation">)</span>

        打印结果。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="策略模式适合应用场景" tabindex="-1"><a class="header-anchor" href="#策略模式适合应用场景"><span>策略模式适合应用场景</span></a></h2><p>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。</p><p>策略模式让你能够将对象关联至可以不同方式执行特定子任务的不同子对象， 从而以间接方式在运行时更改对象行为。</p><p>当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。</p><p>策略模式让你能将不同行为抽取到一个独立类层次结构中， 并将原始类组合成同一个， 从而减少重复代码。</p><p>如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。</p><p>策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。</p><p>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</p><p>策略模式将所有继承自同样接口的算法抽取到独立类中， 因此不再需要条件语句。 原始对象并不实现所有算法的变体， 而是将执行工作委派给其中的一个独立算法对象。</p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><ol><li>从上下文类中找出修改频率较高的算法 （也可能是用于在运行时选择某个算法变体的复杂条件运算符）。</li><li>声明该算法所有变体的通用策略接口。</li><li>将算法逐一抽取到各自的类中， 它们都必须实现策略接口。</li><li>在上下文类中添加一个成员变量用于保存对于策略对象的引用。 然后提供设置器以修改该成员变量。 上下文仅可通过策略接口同策略对象进行交互， 如有需要还可定义一个接口来让策略访问其数据。</li><li>客户端必须将上下文类与相应策略进行关联， 使上下文可以预期的方式完成其主要工作。</li></ol><h2 id="策略模式优缺点" tabindex="-1"><a class="header-anchor" href="#策略模式优缺点"><span>策略模式优缺点</span></a></h2><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li><em>开闭原则</em>。 你无需对上下文进行修改就能够引入新的策略。</li></ul><div class="hint-container warning"><p class="hint-container-title">缺点</p><ul><li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul></div><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>`,48),d={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},u={href:"https://refactoringguru.cn/design-patterns/state",target:"_blank",rel:"noopener noreferrer"},g={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},m={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/composite",target:"_blank",rel:"noopener noreferrer"},h={href:"https://refactoringguru.cn/design-patterns/command",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},b=s("ul",null,[s("li",null,[n("你可以使用"),s("em",null,"命令"),n("来将任何操作转换为对象。 操作的参数将成为对象的成员变量。 你可以通过转换来延迟操作的执行、 将操作放入队列、 保存历史命令或者向远程服务发送命令等。")]),s("li",null,[n("另一方面， "),s("em",null,"策略"),n("通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法。")])],-1),f={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},y={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},_={href:"https://refactoringguru.cn/design-patterns/template-method",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},E=s("em",null,"模板方法",-1),A=s("em",null,"策略",-1),w={href:"https://refactoringguru.cn/design-patterns/state",target:"_blank",rel:"noopener noreferrer"},S={href:"https://refactoringguru.cn/design-patterns/strategy",target:"_blank",rel:"noopener noreferrer"},C=s("em",null,"策略",-1),j=s("em",null,"状态",-1),B=s("p",null,"原文：https://refactoringguru.cn/design-patterns/strategy",-1);function z(F,N){const a=i("ExternalLinkIcon");return l(),o("div",null,[r,s("ul",null,[s("li",null,[s("a",d,[n("桥接模式"),e(a)]),n("、 "),s("a",u,[n("状态模式"),e(a)]),n("和"),s("a",g,[n("策略模式"),e(a)]),n(" （在某种程度上包括"),s("a",m,[n("适配器模式"),e(a)]),n("） 模式的接口非常相似。 实际上， 它们都基于"),s("a",k,[n("组合模式"),e(a)]),n("——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。")]),s("li",null,[s("a",h,[n("命令模式"),e(a)]),n("和"),s("a",v,[n("策略"),e(a)]),n("看上去很像， 因为两者都能通过某些行为来参数化对象。 但是， 它们的意图有非常大的不同。 "),b]),s("li",null,[s("a",f,[n("装饰模式"),e(a)]),n("可让你更改对象的外表， "),s("a",y,[n("策略"),e(a)]),n("则让你能够改变其本质。")]),s("li",null,[s("a",_,[n("模板方法模式"),e(a)]),n("基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 "),s("a",x,[n("策略"),e(a)]),n("基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 "),E,n("在类层次上运作， 因此它是静态的。 "),A,n("在对象层次上运作， 因此允许在运行时切换行为。")]),s("li",null,[s("a",w,[n("状态"),e(a)]),n("可被视为"),s("a",S,[n("策略"),e(a)]),n("的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 "),C,n("使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但"),j,n("模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。")])]),B])}const V=t(c,[["render",z],["__file","策略模式.html.vue"]]),D=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"","lang":"zh-CN","frontmatter":{"description":"亦称： Strategy 简介 策略模式是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。 问题 一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。 用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:description","content":"亦称： Strategy 简介 策略模式是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。 问题 一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。 用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291624275.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291624275.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291624280.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291625586.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291625943.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404291626518.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"真实世界类比","slug":"真实世界类比","link":"#真实世界类比","children":[]},{"level":2,"title":"策略模式结构","slug":"策略模式结构","link":"#策略模式结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"策略模式适合应用场景","slug":"策略模式适合应用场景","link":"#策略模式适合应用场景","children":[]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":2,"title":"策略模式优缺点","slug":"策略模式优缺点","link":"#策略模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{},"readingTime":{"minutes":10.43,"words":3128},"filePathRelative":"guide/设计模式/行为模式/策略模式.md","autoDesc":true}');export{V as comp,D as data};

import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,b as n,e as o,f as c,d as i}from"./app-D1py-eEI.js";const l={},u=n("h3",{id:"解析class文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解析class文件"},[n("span",null,"解析Class文件")])],-1),d=n("h4",{id:"_1-1-class文件介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-class文件介绍"},[n("span",null,"1.1 class文件介绍")])],-1),r={href:"https://blog.csdn.net/qq_44778026/article/details/119997779",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>作为类/接口信息的载体，<strong>每一个<code>class文件</code>都完整的定义了一个类</strong>，为了使Java程序可以实现“编写一次，处处运行”，java虚拟机对class文件的格式进行了严格的规范。</p><p>但是对于从哪里加载<code>class文件</code>，给予了高度自由空间：第三节中说过，可以从文件系统读取<code>jar/zip文件</code>中的<code>class文件</code>，除此之外，也可以从网络下载，甚至是直接在运行中生成<code>class文件</code>。</p><p><strong>构成<code>class文件</code>的基本数据单位是字节</strong>，可以把整个class文件当 成一个字节流来处理。稍大一些的数据由连续多个字节构成，这些数据在class文件中以<code>大端(big-endian)</code>方式存储。</p><p>为了描述class文件格式，Java虚拟机规范定义了<code>u1</code>、<code>u2</code>和<code>u4</code>三种数据类型来表示1、 2和4字节无符号整数，分别对应Go语言的<code>uint8</code>、<code>uint16</code>和<code>uint32</code>类型。</p><p><strong>相同类型的多条数据一般按<code>表（table）</code>的形式存储在class文件中</strong>。表由<code>表头</code>和<code>表项（item）</code>构成，表头是u2或u4整数。假设表头是 n，后面就紧跟着n个表项数据。</p><p>Java虚拟机规范使用一种类似C语言的结构体语法来描述class 文件格式。整个class文件被描述为一个ClassFile结构，代码如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ClassFile {
    u4 magic;
    u2 minor_version;
    u2 major_version;
    u2 constant_pool_count;
    cp_info constant_pool[constant_pool_count-1];
    u2 access_flags;
    u2 this_class;
    u2 super_class;
    u2 interfaces_count;
    u2 interfaces[interfaces_count];
    u2 fields_count;
    field_info fields[fields_count];
    u2 methods_count;
    method_info methods[methods_count];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/21a5644f8d4ae9749d22027a4f0c78ef.png" alt="" style="zoom:67%;"><p>！表示大小不定。</p><h4 id="_1-2解析class文件" tabindex="-1"><a class="header-anchor" href="#_1-2解析class文件"><span>1.2解析class文件</span></a></h4><p>Go语言内置了丰富的数据类型，非常适合处理class文件。</p><p>如下为Go和Java语言基本数据类型对照关系：</p><table><thead><tr><th>Go语言类型</th><th>Java语言类型</th><th>说明</th></tr></thead><tbody><tr><td>int8</td><td>byte</td><td>8比特有符号整数</td></tr><tr><td>uint8(别名byte)</td><td>N/A</td><td>8比特无符号整数</td></tr><tr><td>int16</td><td>short</td><td>16比特有符号整数</td></tr><tr><td>uint16</td><td>char</td><td>16比特无符号整数</td></tr><tr><td>int32(别名rune)</td><td>int</td><td>32比特有符号整数</td></tr><tr><td>uint32</td><td>N/A</td><td>32比特无符号整数</td></tr><tr><td>int64</td><td>long</td><td>64比特有符号整数</td></tr><tr><td>uint64</td><td>N/A</td><td>64比特无符号整数</td></tr><tr><td>float32</td><td>float</td><td>32比特IEEE-754浮点数</td></tr><tr><td>float64</td><td>double</td><td>64比特IEEE-754浮点数</td></tr></tbody></table><h5 id="_1-2-1读取数据" tabindex="-1"><a class="header-anchor" href="#_1-2-1读取数据"><span>1.2.1读取数据</span></a></h5><p>解析<code>class文件</code>的第一步是从里面读取数据。虽然可以把<code>class文件</code>当成字节流来处理，但是直接操作字节很不方便，所以先定义一个结构体<code>ClassReader</code>来帮助读取数据，创建class_reader.go。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">import</span> <span class="token string">&quot;encoding/binary&quot;</span>
<span class="token keyword">type</span> ClassReader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint8</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// u1</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// u2</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// u4</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint16s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readBytes</span><span class="token punctuation">(</span>length <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ClassReader</code>只是<code>[]byte</code>类型的包装而已。<code>readUint8（）</code>读取<code>u1</code>类型数据。</p><p><code>ClassReader</code>并没有使用索引记录数据位置，而是使用Go 语言的<code>reslice语法</code>跳过已经读取的数据</p><p>实现代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// u1</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint8</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> val
<span class="token punctuation">}</span>

<span class="token comment">// u2</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint16</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> val
<span class="token punctuation">}</span>

<span class="token comment">// u4</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> val
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
    val <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> val
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readUint16s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
       s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token function">readBytes</span><span class="token punctuation">(</span>n <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    bytes <span class="token operator">:=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
    self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> bytes
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go标准库encoding/binary包中定义了一个变量<code>BigEndian</code>，可以从<code>[]byte</code>中解码多字节数据。</p><h5 id="_1-2-2解析整体结构" tabindex="-1"><a class="header-anchor" href="#_1-2-2解析整体结构"><span>1.2.2解析整体结构</span></a></h5><p>有了ClassReader，可以开始解析class文件了。创建class_file.go文件，在其中定义<code>ClassFile结构体</code>,与1.1中的class文件中字段对应。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> ClassFile <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//magic uint32</span>
    minorVersion <span class="token builtin">uint16</span>
    majorVersion <span class="token builtin">uint16</span>
    constantPool ConstantPool
    accessFlags <span class="token builtin">uint16</span>
    thisClass <span class="token builtin">uint16</span>
    superClass <span class="token builtin">uint16</span>
    interfaces <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span>
    fields <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo
    methods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo
    attributes <span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在class_file.go文件中实现一系列函数和方法。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>classData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cf <span class="token operator">*</span>ClassFile<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">readAndCheckMagic</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">readAndCheckVersion</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">MinorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">MajorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ConstantPool <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">SuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">InterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>相比Java语言，Go的访问控制非常简单：只有公开和私有两种。</p><p>所有首字母大写的类型、结构体、字段、变量、函数、方法等都是公开的，可供其他包使用。 首字母小写则是私有的，只能在包内部使用。</p></blockquote><h6 id="解析-byte" tabindex="-1"><a class="header-anchor" href="#解析-byte"><span>解析[]byte</span></a></h6><p>Parse（）函数把[]byte解析成ClassFile结构体。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>classData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cf <span class="token operator">*</span>ClassFile<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//尝试捕获 panic，并将其存储在变量 r 中。如果没有发生 panic，r 将为 nil。</span>
       <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
          <span class="token keyword">var</span> ok <span class="token builtin">bool</span>
          <span class="token comment">//判断 r 是否是一个 error 类型</span>
          err<span class="token punctuation">,</span> ok <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
             err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%v&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    cr <span class="token operator">:=</span> <span class="token operator">&amp;</span>ClassReader<span class="token punctuation">{</span>classData<span class="token punctuation">}</span>
    cf <span class="token operator">=</span> <span class="token operator">&amp;</span>ClassFile<span class="token punctuation">{</span><span class="token punctuation">}</span>
    cf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cr<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="顺序解析" tabindex="-1"><a class="header-anchor" href="#顺序解析"><span>顺序解析</span></a></h6><p>read（） 方法依次调用其他方法解析class文件，顺序一定要保证正确，与class文件相对应。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token comment">//读取并检查类文件的魔数。 </span>
    self<span class="token punctuation">.</span><span class="token function">readAndCheckMagic</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
	<span class="token comment">//读取并检查类文件的版本号。</span>
    self<span class="token punctuation">.</span><span class="token function">readAndCheckVersion</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
    <span class="token comment">//解析常量池，常量池类还没写</span>
    self<span class="token punctuation">.</span>constantPool <span class="token operator">=</span> <span class="token function">readConstantPool</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
    <span class="token comment">//读取类的访问标志</span>
    self<span class="token punctuation">.</span>accessFlags <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//读取指向当前类在常量池中的索引</span>
    self<span class="token punctuation">.</span>thisClass <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//父类在常量池中的索引</span>
    self<span class="token punctuation">.</span>superClass <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//读取接口表的数据</span>
    self<span class="token punctuation">.</span>interfaces <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16s</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//读取类的字段信息</span>
    self<span class="token punctuation">.</span>fields <span class="token operator">=</span> <span class="token function">readMembers</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">)</span>
    <span class="token comment">//读取类的方法信息</span>
    self<span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token function">readMembers</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">)</span>
    <span class="token comment">//读取类的属性信息(类级别的注解、源码文件等)</span>
    self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token function">readAttributes</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>self.readAndCheckMagic(reader)</code>: 这是一个 <code>ClassFile</code> 结构的方法，用于读取并检查类文件的魔数。魔数是类文件的标识符，用于确定文件是否为有效的类文件。</li><li><code>self.readAndCheckVersion(reader)</code>: 这个方法用于读取并检查类文件的版本号。Java类文件具有版本号，标识了它们的Java编译器版本。这里会对版本号进行检查。</li><li><code>self.constantPool = readConstantPool(reader)</code>: 这一行代码调用 <code>readConstantPool</code> 函数来读取常量池部分的数据，并将其存储在 <code>ClassFile</code> 结构的 <code>constantPool</code> 字段中。常量池是一个包含各种常量信息的表格，用于支持类文件中的各种符号引用。</li><li><code>self.accessFlags = reader.readUint16()</code>: 这一行代码读取类的访问标志，它标识类的访问权限，例如 <code>public</code>、<code>private</code> 等。</li><li><code>self.thisClass = reader.readUint16()</code>: 这行代码读取指向当前类在常量池中的索引，表示当前类的类名。</li><li><code>self.superClass = reader.readUint16()</code>: 这行代码读取指向父类在常量池中的索引，表示当前类的父类名。</li><li><code>self.interfaces = reader.readUint16s()</code>: 这行代码读取接口表的数据，表示当前类实现的接口。</li><li><code>self.fields = readMembers(reader, self.constantPool)</code>: 这行代码调用 <code>readMembers</code> 函数，以读取类的字段信息，并将它们存储在 <code>fields</code> 字段中。字段包括类的成员变量。</li><li><code>self.methods = readMembers(reader, self.constantPool)</code>: 这行代码类似于上一行，但它读取类的方法信息，并将它们存储在 <code>methods</code> 字段中。</li><li><code>self.attributes = readAttributes(reader, self.constantPool)</code>: 最后，这行代码调用 <code>readAttributes</code> 函数，以读取类的属性信息，并将它们存储在 <code>attributes</code> 字段中。属性包括类级别的注解、源码文件等信息。</li></ol><p>以下均为类似于Java的getter方法，以后将不再赘述。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">MinorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>minorVersion
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">MajorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>majorVersion
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ConstantPool <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>constantPool
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>accessFlags
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>fields
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>methods
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ClassName从常量池中获取，SuperClassName同理，常量池还未实现。</p><blockquote><p>所有类的超类(父类),<strong>Object是java中唯一没有父类的类</strong>,一个类可以不是Object的直接子类,但一定是继承于Object并拓展于Object。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>thisClass<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">SuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>superClass <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>superClass<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token comment">//Object类</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java的类是单继承，多实现的，因此获取接口应该使用循环，也从常量池中获取。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">InterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    interfaceNames <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> cpIndex <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>interfaces <span class="token punctuation">{</span>
       interfaceNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>constantPool<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>cpIndex<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> interfaceNames
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="解析魔数" tabindex="-1"><a class="header-anchor" href="#解析魔数"><span>解析魔数</span></a></h6><p>很多文件格式都会规定满足该格式的文件必须以某几个固定字节开头，这几个字节主要起标识作用，叫作<code>魔数(magic number)</code>。</p><ul><li>PDF文件以4字节“%PDF”（0x25、0x50、0x44、0x46）开头</li><li>ZIP 文件以2字节“PK”（0x50、0x4B）开头</li><li>class文件的魔数 是“0xCAFEBABE” 。</li></ul><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/93f01f916f0229e9db0151611ca605ec.png" alt="" style="zoom:80%;"><p>因此readAndCheckMagic（）方法的代码如下。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">readAndCheckMagic</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    magic <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> magic <span class="token operator">!=</span> <span class="token number">0xCAFEBABE</span> <span class="token punctuation">{</span>
       <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassFormatError: magic!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java虚拟机规范规定，如果加载的class文件不符合要求的格式，Java虚拟机实现就抛出java.lang.ClassFormatError异常。</p></blockquote><p>但是因为我们才刚刚开始编写虚拟机，还无法抛出异常，所以暂时先调用 panic()方法终止程序执行。</p><p>版本号</p><h6 id="解析版本号" tabindex="-1"><a class="header-anchor" href="#解析版本号"><span>解析版本号</span></a></h6><p>魔数之后是class文件的次版本号和主版本号，都是<code>u2类型</code>。</p><p>假设某class文件的主版本号是M，次版本号是m，那么完整的版本号 可以表示成<code>M.m</code>的形式。 次版本号只在<code>J2SE 1.2</code>之前用过，从1.2 开始基本上就没什么用了（都是0）。 主版本号在J2SE 1.2之前是45， 从1.2开始，每次有大的Java版本发布，都会加1。</p><table><thead><tr><th>Java 版本</th><th>类文件版本号</th></tr></thead><tbody><tr><td>Java 1.1</td><td>45.3</td></tr><tr><td>Java 1.2</td><td>46.0</td></tr><tr><td>Java 1.3</td><td>47.0</td></tr><tr><td>Java 1.4</td><td>48.0</td></tr><tr><td>Java 5</td><td>49.0</td></tr><tr><td>Java 6</td><td>50.0</td></tr><tr><td>Java 7</td><td>51.0</td></tr><tr><td>Java 8</td><td>52.0</td></tr></tbody></table><p>特定的Java虚拟机实现只能支持版本号在某个范围内的class文 件。 Oracle的实现是完全向后兼容的，比如<code>Java SE 8</code>支持版本号为 45.0~52.0的class文件。</p><p>如果版本号不在支持的范围内，Java虚拟机 实现就抛出<code>java.lang.UnsupportedClassVersionError</code>异常。<strong>参考 Java 8，支持版本号为45.0~52.0的class文件</strong>。如果遇到其他版本号， 调用<code>panic()</code>方法终止程序执行。 如下为检查版本号代码：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ClassFile<span class="token punctuation">)</span> <span class="token function">readAndCheckVersion</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>minorVersion <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>majorVersion <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">switch</span> self<span class="token punctuation">.</span>majorVersion <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">45</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span>
    <span class="token keyword">case</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">:</span>
       <span class="token keyword">if</span> self<span class="token punctuation">.</span>minorVersion <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.UnsupportedClassVersionError!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="解析类访问标识" tabindex="-1"><a class="header-anchor" href="#解析类访问标识"><span>解析类访问标识</span></a></h6><p>版本号之后是常量池，但是由于常量池比较复杂，所以放到1.3 节介绍。</p><p>常量池之后是类访问标志，这是一个16位的<code>bitmask</code>，指出class文件定义的是类还是接口，访问级别是<code>public</code>还是<code>private</code>，等等。</p><p>本章只对class文件进行初步解析，并不做完整验证，所以只是读取类访问标志以备后用。</p><p>ClassFileTest的类访问标志为：<code>0X21</code>: <img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/10783eb78d848bbf28d7f51032136f8a.png" alt="" style="zoom:80%;"></p><h6 id="解析类和父类索引" tabindex="-1"><a class="header-anchor" href="#解析类和父类索引"><span>解析类和父类索引</span></a></h6><p>类访问标志之后是两个u2类型的常量池索引，分别给出类名和超类名。</p><p>class文件存储的类名类似完全限定名，但是把点换成了 斜线，Java语言规范把这种名字叫作二进制名<code>binary names</code>。</p><p>因为每个类都有名字，所以<code>thisClass</code>必须是有效的常量池索引。 除 <code>java.lang.Object</code>之外，其他类都有超类，所以<code>superClass</code>只在 <code>Object.class</code>中是0，在其他class文件中必须是有效的常量池索引。如下，ClassFileTest的类索引是5，超类索引是6。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/e861efd6cc83a84daa0cd2480223d4e3.png" alt="" style="zoom:80%;"><h6 id="解析接口索引表" tabindex="-1"><a class="header-anchor" href="#解析接口索引表"><span>解析接口索引表</span></a></h6><p>类和超类索引后面是接口索引表，表中存放的也是常量池索引，给出该类实现的所有接口的名字。ClassFileTest没有实现接口， 所以接口表是空的</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/6b48552760d6f3a8d86590362788b98b.png" alt="" style="zoom:80%;"><h6 id="解析字段和方法表" tabindex="-1"><a class="header-anchor" href="#解析字段和方法表"><span>解析字段和方法表</span></a></h6><p>接口索引表之后是字段表和方法表，分别存储字段和方法信息。</p><p>字段和方法的基本结构大致相同，差别仅在于属性表。 下面是 Java虚拟机规范给出的字段结构定义</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>field_info {
    u2 access_flags;
    u2 name_index;
    u2 descriptor_index;
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和类一样，字段和方法也有自己的访问标志。访问标志之后是一个常量池索引，给出字段名或方法名，然后又是一个常量池索引，给出字段或方法的描述符，最后是属性表。</p><p>为了避免重复代 码，用一个结构体统一表示字段和方法。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">type</span> MemberInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    cp ConstantPool
    accessFlags <span class="token builtin">uint16</span>
    nameIndex <span class="token builtin">uint16</span>
    descriptorIndex <span class="token builtin">uint16</span>
    attributes <span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readMembers</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readMember</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberInfo<span class="token punctuation">)</span> <span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberInfo<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberInfo<span class="token punctuation">)</span> <span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cp字段保存常量池指针，后面会用到它。readMembers（）读取字段表或方法表，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readMembers</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span>
    memberCount <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    members <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MemberInfo<span class="token punctuation">,</span> memberCount<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> members <span class="token punctuation">{</span>
       members<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">readMember</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> members
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readMember（）函数读取字段或方法数据。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readMember</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token operator">*</span>MemberInfo <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MemberInfo<span class="token punctuation">{</span>
       cp<span class="token punctuation">:</span>              cp<span class="token punctuation">,</span>
       accessFlags<span class="token punctuation">:</span>     reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       nameIndex<span class="token punctuation">:</span>       reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       descriptorIndex<span class="token punctuation">:</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       attributes<span class="token punctuation">:</span>      <span class="token function">readAttributes</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Name（）从常量 池查找字段或方法名，Descriptor（）从常量池查找字段或方法描述 符</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberInfo<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>nameIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MemberInfo<span class="token punctuation">)</span> <span class="token function">Descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>descriptorIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-3解析常量池" tabindex="-1"><a class="header-anchor" href="#_1-2-3解析常量池"><span>1.2.3解析常量池</span></a></h5><p>常量池占据了class文件很大一部分数据，里面存放着各式各样的常量信息，包括数字和字符串常量、类和接口名、字段和方法名，等等</p><p>创建<code>constant_pool.go</code>文件，里面定义 <code>ConstantPool类型</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile

<span class="token keyword">type</span> ConstantPool <span class="token punctuation">[</span><span class="token punctuation">]</span>ConstantInfo
<span class="token keyword">func</span> <span class="token function">readConstantPool</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> ConstantPool <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getConstantInfo</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getNameAndType</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getClassName</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getUtf8</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量池实际上也是一个表，但是有三点需要特别注意。</p><p>表头给出的常量池大小比实际大1。假设表头给出的值是n，那么常量池的实际大小是n–1。</p><p>有效的常量池索引是1~n–1。0是无效索引，表示不指向任何常量。</p><p><code>CONSTANT_Long_info</code>和<code> CONSTANT_Double_info</code>各占两个位置。也就是说，如果常量池中存在这两种常量，实际的常量数量比n–1还要少，而且1~n–1的某些 数也会变成无效索引。</p><p>常量池由<code>readConstantPool()</code>函数读取，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readConstantPool</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> ConstantPool <span class="token punctuation">{</span>
    cpCount <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>ConstantInfo<span class="token punctuation">,</span> cpCount<span class="token punctuation">)</span>

    <span class="token comment">// 索引从1开始</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
       cp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">readConstantInfo</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
       <span class="token keyword">switch</span> cp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//占两个位置</span>
       <span class="token keyword">case</span> <span class="token operator">*</span>ConstantLongInfo<span class="token punctuation">,</span> <span class="token operator">*</span>ConstantDoubleInfo<span class="token punctuation">:</span>
          i<span class="token operator">++</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> cp
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getConstantInfo()</code>方法按索引查找常量</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getConstantInfo</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span>
    <span class="token keyword">if</span> cpInfo <span class="token operator">:=</span> self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> cpInfo <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> cpInfo
    <span class="token punctuation">}</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid constant pool index: %v!&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getNameAndType()</code>方法从常量池查找字段或方法的名字和描述符</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getNameAndType</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ntInfo <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getConstantInfo</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ConstantNameAndTypeInfo<span class="token punctuation">)</span>
    name <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>ntInfo<span class="token punctuation">.</span>nameIndex<span class="token punctuation">)</span>
    _type <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>ntInfo<span class="token punctuation">.</span>descriptorIndex<span class="token punctuation">)</span>
    <span class="token keyword">return</span> name<span class="token punctuation">,</span> _type
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getClassName()</code>方法从常量池查找类名</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getClassName</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    classInfo <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getConstantInfo</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ConstantClassInfo<span class="token punctuation">)</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">.</span>nameIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getUtf8()</code>方法从常量池查找UTF-8字符串</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self ConstantPool<span class="token punctuation">)</span> <span class="token function">getUtf8</span><span class="token punctuation">(</span>index <span class="token builtin">uint16</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    utf8Info <span class="token operator">:=</span> self<span class="token punctuation">.</span><span class="token function">getConstantInfo</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ConstantUtf8Info<span class="token punctuation">)</span>
    <span class="token keyword">return</span> utf8Info<span class="token punctuation">.</span>str
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constpool接口" tabindex="-1"><a class="header-anchor" href="#constpool接口"><span>ConstPool接口</span></a></h6><p>由于常量池中存放的信息各不相同，所以每种常量的格式也不同。 常量数据的第一字节是tag，用来区分常量类型。</p><p>下面是Java 虚拟机规范给出的常量结构</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cp_info {
    u1 tag;
    u1 info[];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java虚拟机规范一共定义了14种常量。创建<code>constant_info.go</code>文件，在其中定义tag常量值，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile

<span class="token comment">// Constant pool tags</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    CONSTANT_Class              <span class="token operator">=</span> <span class="token number">7</span>
    CONSTANT_Fieldref           <span class="token operator">=</span> <span class="token number">9</span>
    CONSTANT_Methodref          <span class="token operator">=</span> <span class="token number">10</span>
    CONSTANT_InterfaceMethodref <span class="token operator">=</span> <span class="token number">11</span>
    CONSTANT_String             <span class="token operator">=</span> <span class="token number">8</span>
    CONSTANT_Integer            <span class="token operator">=</span> <span class="token number">3</span>
    CONSTANT_Float              <span class="token operator">=</span> <span class="token number">4</span>
    CONSTANT_Long               <span class="token operator">=</span> <span class="token number">5</span>
    CONSTANT_Double             <span class="token operator">=</span> <span class="token number">6</span>
    CONSTANT_NameAndType        <span class="token operator">=</span> <span class="token number">12</span>
    CONSTANT_Utf8               <span class="token operator">=</span> <span class="token number">1</span>
    CONSTANT_MethodHandle       <span class="token operator">=</span> <span class="token number">15</span>
    CONSTANT_MethodType         <span class="token operator">=</span> <span class="token number">16</span>
    CONSTANT_InvokeDynamic      <span class="token operator">=</span> <span class="token number">18</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义ConstantInfo接口来表示常量信息</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantInfo <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//读取常量信息</span>
<span class="token keyword">func</span> <span class="token function">readConstantInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">newConstantInfo</span><span class="token punctuation">(</span>tag <span class="token builtin">uint8</span><span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readInfo（）方法读取常量信息，需要由具体的常量结构体实现。 readConstantInfo（）函数先读出tag值，然后调用newConstantInfo（）函数创建具体的常量，最后调用常量的readInfo（）方法读取常量信息， 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readConstantInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span>
    tag <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    c <span class="token operator">:=</span> <span class="token function">newConstantInfo</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span><span class="token function">readInfo</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>newConstantInfo（）根据tag值创建具体的常量，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newConstantInfo</span><span class="token punctuation">(</span>tag <span class="token builtin">uint8</span><span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> ConstantInfo <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> tag <span class="token punctuation">{</span>
    <span class="token keyword">case</span> CONSTANT_Integer<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantIntegerInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Float<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantFloatInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Long<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantLongInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Double<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantDoubleInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Utf8<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantUtf8Info<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_String<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantStringInfo<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Class<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantClassInfo<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Fieldref<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantFieldrefInfo<span class="token punctuation">{</span>ConstantMemberrefInfo<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_Methodref<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantMethodrefInfo<span class="token punctuation">{</span>ConstantMemberrefInfo<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_InterfaceMethodref<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantInterfaceMethodrefInfo<span class="token punctuation">{</span>ConstantMemberrefInfo<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_NameAndType<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantNameAndTypeInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_MethodType<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantMethodTypeInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_MethodHandle<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantMethodHandleInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> CONSTANT_InvokeDynamic<span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantInvokeDynamicInfo<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
       <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.ClassFormatError: constant pool tag!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-integer-info" tabindex="-1"><a class="header-anchor" href="#constant-integer-info"><span>CONSTANT_Integer_info</span></a></h6><p><code>CONSTANT_Integer_info</code>使用4字节存储整数常量，其JVM结构定义如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Integer_info {
    u1 tag;
    u4 bytes;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CONSTANT_Integer_info</code>和后面将要介绍的其他三种数字常量无论是结构，还是实现，都非常相似，所以把它们定义在同一个文件中。创建<code>cp_numeric.go</code>文件，在其中定义 <code>ConstantIntegerInfo结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">import</span> <span class="token string">&quot;math&quot;</span>
<span class="token keyword">type</span> ConstantIntegerInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	val <span class="token builtin">int32</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantIntegerInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readInfo（）先读取一个<code>uint32</code>数据，然后把它转型成<code>int32</code>类型， 代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantIntegerInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bytes <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-float-info" tabindex="-1"><a class="header-anchor" href="#constant-float-info"><span>CONSTANT_Float_info</span></a></h6><p><code>CONSTANT_Float_info</code>使用4字节存储<code>IEEE754单精度浮点数</code>常量，JVM结构如下：</p><div class="language-GO line-numbers-mode" data-ext="GO" data-title="GO"><pre class="language-GO"><code>CONSTANT_Float_info {
    u1 tag;
    u4 bytes;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>cp_numeric.go</code>文件中定义<code>ConstantFloatInfo结构体</code>，代码如下：</p><div class="language-GO line-numbers-mode" data-ext="GO" data-title="GO"><pre class="language-GO"><code>type ConstantFloatInfo struct {
	val float32
}

func (self *ConstantFloatInfo) readInfo(reader *ClassReader) {
	bytes := reader.readUint32()
	self.val = math.Float32frombits(bytes)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-long-info" tabindex="-1"><a class="header-anchor" href="#constant-long-info"><span>CONSTANT_Long_info</span></a></h6><p><code>CONSTANT_Long_info</code>使用8字节存储整数常量，结构如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Long_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>cp_numeric.go</code>文件中定义<code>ConstantLongInfo结构体</code>，代码如下：</p><div class="language-GO line-numbers-mode" data-ext="GO" data-title="GO"><pre class="language-GO"><code>type ConstantLongInfo struct {
    val int64
}

func (self *ConstantLongInfo) readInfo(reader *ClassReader) {
    bytes := reader.readUint64()
    self.val = int64(bytes)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-double-info" tabindex="-1"><a class="header-anchor" href="#constant-double-info"><span>CONSTANT_Double_info</span></a></h6><p>最后一个数字常量是<code>CONSTANT_Double_info</code>，使用8字节存储<code>IEEE754双精度浮点数</code>，结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Double_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>cp_numeric.go</code>文件中定义<code>ConstantDoubleInfo</code>结构体，代码如下：</p><div class="language-GO line-numbers-mode" data-ext="GO" data-title="GO"><pre class="language-GO"><code>type ConstantDoubleInfo struct {
    val float64
}

func (self *ConstantDoubleInfo) readInfo(reader *ClassReader) {
    bytes := reader.readUint64()
    self.val = math.Float64frombits(bytes)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-utf8-info" tabindex="-1"><a class="header-anchor" href="#constant-utf8-info"><span>CONSTANT_Utf8_info</span></a></h6><p>CONSTANT_Utf8_info常量里放的是MUTF-8编码的字符串， 结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Utf8_info {
    u1 tag;
    u2 length;
    u1 bytes[length];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java类文件中使用MUTF-8（Modified UTF-8）编码而不是标准的UTF-8，是因为MUTF-8在某些方面更适合于在Java虚拟机内部处理字符串。以下是一些原因：</p><ol><li><strong>空字符的表示</strong>: 在标准的UTF-8编码中，空字符（U+0000）会使用单个字节0x00表示，这与C字符串中的字符串终止符相同，可能引起混淆。在MUTF-8中，空字符会使用0xC0 0x80来表示，避免了混淆。</li><li><strong>编码长度</strong>: MUTF-8编码中的每个字符都使用1至3个字节来表示，这与UTF-8编码相比更紧凑。对于大多数常见的字符集，这可以减少存储和传输开销。</li><li><strong>字符的编码范围</strong>: MUTF-8编码对字符的范围进行了限制，只包含Unicode BMP（基本多文种平面）范围内的字符。这些字符通常足够用于表示Java标识符和字符串文字。</li><li><strong>兼容性</strong>: 早期版本的Java使用的是MUTF-8编码，因此为了保持与早期版本的兼容性，后续版本也继续使用MUTF-8。这有助于确保Java类文件的可互操作性。</li></ol></blockquote><p>创建<code>cp_utf8.go</code>文件，在其中定义 <code>ConstantUtf8Info结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantUtf8Info <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    str <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantUtf8Info<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    length <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    bytes <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token function">decodeMUTF8</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java序列化机制也使用了MUTF-8编码。</p><p>java.io.DataInput和 java.io.DataOutput接口分别定义了<code>readUTF()</code>和<code>writeUTF()</code>方法，可以读写MUTF-8编码的字符串。</p></blockquote><p>如下为简化版的<code>java.io.DataInputStream.readUTF()</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// mutf8 -&gt; utf16 -&gt; utf32 -&gt; string</span>
<span class="token keyword">func</span> <span class="token function">decodeMUTF8</span><span class="token punctuation">(</span>bytearr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    utflen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">)</span>
    chararr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">,</span> utflen<span class="token punctuation">)</span>

    <span class="token keyword">var</span> c<span class="token punctuation">,</span> char2<span class="token punctuation">,</span> char3 <span class="token builtin">uint16</span>
    count <span class="token operator">:=</span> <span class="token number">0</span>
    chararr_count <span class="token operator">:=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> count <span class="token operator">&lt;</span> utflen <span class="token punctuation">{</span>
       c <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">127</span> <span class="token punctuation">{</span>
          <span class="token keyword">break</span>
       <span class="token punctuation">}</span>
       count<span class="token operator">++</span>
       chararr<span class="token punctuation">[</span>chararr_count<span class="token punctuation">]</span> <span class="token operator">=</span> c
       chararr_count<span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> count <span class="token operator">&lt;</span> utflen <span class="token punctuation">{</span>
       c <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>
       <span class="token keyword">switch</span> c <span class="token operator">&gt;&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
       <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span>
          <span class="token comment">/* 0xxxxxxx*/</span>
          count<span class="token operator">++</span>
          chararr<span class="token punctuation">[</span>chararr_count<span class="token punctuation">]</span> <span class="token operator">=</span> c
          chararr_count<span class="token operator">++</span>
       <span class="token keyword">case</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span>
          <span class="token comment">/* 110x xxxx   10xx xxxx*/</span>
          count <span class="token operator">+=</span> <span class="token number">2</span>
          <span class="token keyword">if</span> count <span class="token operator">&gt;</span> utflen <span class="token punctuation">{</span>
             <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input: partial character at end&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          char2 <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">[</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> char2<span class="token operator">&amp;</span><span class="token number">0xC0</span> <span class="token operator">!=</span> <span class="token number">0x80</span> <span class="token punctuation">{</span>
             <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input around byte %v&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          chararr<span class="token punctuation">[</span>chararr_count<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">&amp;</span><span class="token number">0x1F</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> char2<span class="token operator">&amp;</span><span class="token number">0x3F</span>
          chararr_count<span class="token operator">++</span>
       <span class="token keyword">case</span> <span class="token number">14</span><span class="token punctuation">:</span>
          <span class="token comment">/* 1110 xxxx  10xx xxxx  10xx xxxx*/</span>
          count <span class="token operator">+=</span> <span class="token number">3</span>
          <span class="token keyword">if</span> count <span class="token operator">&gt;</span> utflen <span class="token punctuation">{</span>
             <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input: partial character at end&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          char2 <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">[</span>count<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          char3 <span class="token operator">=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>bytearr<span class="token punctuation">[</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> char2<span class="token operator">&amp;</span><span class="token number">0xC0</span> <span class="token operator">!=</span> <span class="token number">0x80</span> <span class="token operator">||</span> char3<span class="token operator">&amp;</span><span class="token number">0xC0</span> <span class="token operator">!=</span> <span class="token number">0x80</span> <span class="token punctuation">{</span>
             <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input around byte %v&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          chararr<span class="token punctuation">[</span>chararr_count<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">&amp;</span><span class="token number">0x0F</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span> <span class="token operator">|</span> char2<span class="token operator">&amp;</span><span class="token number">0x3F</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span> <span class="token operator">|</span> char3<span class="token operator">&amp;</span><span class="token number">0x3F</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span>
          chararr_count<span class="token operator">++</span>
       <span class="token keyword">default</span><span class="token punctuation">:</span>
          <span class="token comment">/* 10xx xxxx,  1111 xxxx */</span>
          <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input around byte %v&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// The number of chars produced may be less than utflen</span>
    chararr <span class="token operator">=</span> chararr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>chararr_count<span class="token punctuation">]</span>
    runes <span class="token operator">:=</span> utf16<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>chararr<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>runes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>初始化 <code>chararr</code> 数组，用于存储UTF-16字符。</li><li>遍历MUTF-8字节数组中的字节，根据字节的值来判断字符的编码方式。</li><li>如果字节值小于128，表示ASCII字符，直接转换为UTF-16并存储。</li><li>如果字节值在特定范围内，表示多字节字符，需要根据UTF-8编码规则进行解码。</li><li>如果遇到不符合规则的字节，抛出异常来处理错误情况。</li><li>最后，将解码后的UTF-16字符转换为Go字符串。</li></ol><h6 id="constant-string-info" tabindex="-1"><a class="header-anchor" href="#constant-string-info"><span>CONSTANT_String_info</span></a></h6><p><code>CONSTANT_String_info</code>常量表示<code>java.lang.String</code>字面量，结构如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_String_info {
    u1 tag;
    u2 string_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>CONSTANT_String_info</code>本身并不存放字符串数据 <strong>只存了<code>常量池索引</code>，这个索引指向一个<code>CONSTANT_Utf8_info常量</code></strong>。</p><p>下创建<code>cp_string.go</code>文件，在其中定义 <code>ConstantStringInfo结构体</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantStringInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    cp ConstantPool
    stringIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantStringInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>stringIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>String()</code>方法按索引从常量池中查找字符串:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantStringInfo<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stringIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-class-info" tabindex="-1"><a class="header-anchor" href="#constant-class-info"><span>CONSTANT_Class_info</span></a></h6><p><code>CONSTANT_Class_info</code>常量表示类或者接口的符号引用</p><p>他是对类或者接口的符号引用。它描述的可以是当前类型的信息，也可以描述对当前类的引用，还可以描述对其他类的引用。JVM结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Class_info {
    u1 tag;
    u2 name_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和<code>CONSTANT_String_info</code>类似，<code>name_index</code>是常量池索引，指向<code>CONSTANT_Utf8_info</code>常量。 创建 <code>cp_class.go</code>文件，定义<code>ConstantClassInfo结构体</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantClassInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    cp        ConstantPool
    nameIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantClassInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>nameIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantClassInfo<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>nameIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-nameandtype-info" tabindex="-1"><a class="header-anchor" href="#constant-nameandtype-info"><span>CONSTANT_NameAndType_info</span></a></h6><p><code>CONSTANT_NameAndType_info</code>给出字段或方法的名称和描述符。 <code>CONSTANT_Class_info</code>和<code>CONSTANT_NameAndType_info</code>加在 一起可以唯一确定一个字段或者方法。其结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_NameAndType_info {
    u1 tag;
    u2 name_index;
    u2 descriptor_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段或方法名由<code>name_index</code>给出，字段或方法的描述符由<code> descriptor_index</code>给出。</p><p><code>name_index</code>和<code>descriptor_index</code>都是常量池索引，指向<code>CONSTANT_Utf8_info常量</code>。</p><p>Java虚拟机规范定义了一种简单的语法来描述字段和方法，可以根据下面的规则生成描述符。</p><p>一、类型描述符</p><ol><li>基本类型byte、short、char、int、long、float和double的描述符是单个字母，分别对应B、S、C、I、J、F和D。注意，long的描述符是J 而不是L。</li><li>引用类型的描述符是L＋类的完全限定名＋分号。</li><li>数组类型的描述符是[＋数组元素类型描述符</li></ol><p>二、字段描述符</p><p>​ 字段类型的描述符</p><p>三、方法描述符</p><p>​ 分号分隔的参数类型描述符+返回值类型描述符，其中void返回值由单个字母V表示。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/59c6f4baa353213907ab1ecf6aa24976.png" alt="" style="zoom:80%;"><blockquote><p>Java语言支持方法重载（override），不同的方法可 以有相同的名字，只要参数列表不同即可。 这就是为什么 CONSTANT_NameAndType_info结构要同时包含名称和描述符的原因。</p></blockquote><p>创建<code>cp_name_and_type.go</code>文件，在其中定义<code>ConstantName-AndTypeInfo结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantNameAndTypeInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    nameIndex       <span class="token builtin">uint16</span>
    descriptorIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantNameAndTypeInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>nameIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>descriptorIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="constant-fieldref-info、-constant-methodref-info和-constant-interfacemethodref-info" tabindex="-1"><a class="header-anchor" href="#constant-fieldref-info、-constant-methodref-info和-constant-interfacemethodref-info"><span>CONSTANT_Fieldref_info、 CONSTANT_Methodref_info和 CONSTANT_InterfaceMethodref_info</span></a></h6><p><code>CONSTANT_Fieldref_info</code>表示字段符号引用，<code> CONSTANT_Methodref_info</code>表示普通（非接口）方法符号引用， <code>CONSTANT_InterfaceMethodref_info</code>表示接口方法符号引用。这三种常量结构一模一样。 其中<code>CONSTANT_Fieldref_info</code>的结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CONSTANT_Fieldref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>class_index</code>和<code>name_and_type_index</code>都是常量池索引，分别指向<code> CONSTANT_Class_info</code>和<code>CONSTANT_NameAndType_info</code>常量。</p><p>创建<code>cp_member_ref.go</code>文件，定义一个统一的结构体<code>ConstantMemberrefInfo</code>来表示这3种常量，然后定义三个结构体“继承”<code>ConstantMemberrefInfo</code>。</p><blockquote><p>Go语言并没有“继承”这个概念，但是可以通过结构体嵌套来模拟</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ConstantFieldrefInfo <span class="token keyword">struct</span><span class="token punctuation">{</span> ConstantMemberrefInfo <span class="token punctuation">}</span>
<span class="token keyword">type</span> ConstantMethodrefInfo <span class="token keyword">struct</span><span class="token punctuation">{</span> ConstantMemberrefInfo <span class="token punctuation">}</span>
<span class="token keyword">type</span> ConstantInterfaceMethodrefInfo <span class="token keyword">struct</span><span class="token punctuation">{</span> ConstantMemberrefInfo <span class="token punctuation">}</span>

<span class="token keyword">type</span> ConstantMemberrefInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    cp               ConstantPool
    classIndex       <span class="token builtin">uint16</span>
    nameAndTypeIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantMemberrefInfo<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>classIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>nameAndTypeIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantMemberrefInfo<span class="token punctuation">)</span> <span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>classIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantMemberrefInfo<span class="token punctuation">)</span> <span class="token function">NameAndDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getNameAndType</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>nameAndTypeIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有三个常量没有介绍：CONSTANT_MethodType_info、 CONSTANT_MethodHandle_info和 CONSTANT_InvokeDynamic_info。它们是Java SE 7才添加到class文件中的，目的是支持新增的invokedynamic指令。本次暂不实现。</p><h6 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h6><p>可以把常量池中的常量分为两类：<code>字面量(literal)</code>和<code>符号引用 (symbolic reference)</code>。</p><p><code>字面量</code>包括<code>数字常量</code>和<code>字符串常量</code>，<code>符号引用</code>包括<code>类</code>和<code>接口名</code>、<code>字段</code>和<code>方法信息</code>等。</p><p>除了字面量，其他常量都是通过索引直接或间接指向<code>CONSTANT_Utf8_info</code>常量，以 <code>CONSTANT_Fieldref_info</code>为例，如下所示。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/59ea08588bc484a971994e61cfe399a6.png" alt="" style="zoom:33%;"><h5 id="_1-2-4解析属性表" tabindex="-1"><a class="header-anchor" href="#_1-2-4解析属性表"><span>1.2.4解析属性表</span></a></h5><p>一些重要的信息没有出现，如方法的字节码等。那么这些信息存在哪里呢？答案是属性表。</p><h6 id="attributeinfo接口" tabindex="-1"><a class="header-anchor" href="#attributeinfo接口"><span>AttributeInfo接口</span></a></h6><p>和常量池类似，各种属性表达的信息也各不相同，因此无法用统一的结构来定义。不同之处在于，常量是由Java虚拟机规范严格 定义的，共有14种。</p><p>但属性是可以扩展的，不同的虚拟机实现可以定义自己的属性类型。</p><p>由于这个原因，Java虚拟机规范没有使用<code>tag</code>，而是使用属性名来区别不同的属性。</p><p>属性数据放在属性名之后的<code>u1表</code>中，这样Java虚拟机实现就可以跳过自己无法识别的属性。 属性的结构定义如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>attribute_info {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 info[attribute_length];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性表中存放的属性名实际上并不是编码后的字符串， 而是常量池索引，指向常量池中的<code>CONSTANT_Utf8_info</code>常量。</p><p>创建<code>attribute_info.go</code>文件，在其中定义 <code>AttributeInfo接口</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">type</span> AttributeInfo <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readAttributes</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">readAttribute</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> AttributeInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">newAttributeInfo</span><span class="token punctuation">(</span>attrName <span class="token builtin">string</span><span class="token punctuation">,</span> attrLen <span class="token builtin">uint32</span><span class="token punctuation">,</span>cp ConstantPool<span class="token punctuation">)</span> AttributeInfo <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和<code>ConstantInfo接口</code>一样，<code>AttributeInfo接口</code>也只定义了一个<code>readInfo()</code>方法，需要由具体的属性实现。<code>readAttributes()</code>函数读取属性表。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readAttributes</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo <span class="token punctuation">{</span>
    attributesCount <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    attributes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo<span class="token punctuation">,</span> attributesCount<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> attributes <span class="token punctuation">{</span>
       attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">readAttribute</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> attributes
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取单个属性函数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readAttribute</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> AttributeInfo <span class="token punctuation">{</span>
    attrNameIndex <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    attrName <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>attrNameIndex<span class="token punctuation">)</span>
    attrLen <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    attrInfo <span class="token operator">:=</span> <span class="token function">newAttributeInfo</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> attrLen<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
    attrInfo<span class="token punctuation">.</span><span class="token function">readInfo</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
    <span class="token keyword">return</span> attrInfo
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>readAttribute()</code>先读取属性名索引，根据它从<code>常量池</code>中找到<code>属性名</code>，然后读取属性长度，接着调用<code>newAttributeInfo()</code>函数创建具体的属性实例。</p><p>Java虚拟机规范预定义了23种属性，先解析其中的8种。<code>newAttributeInfo()</code>函数的代码如下</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newAttributeInfo</span><span class="token punctuation">(</span>attrName <span class="token builtin">string</span><span class="token punctuation">,</span> attrLen <span class="token builtin">uint32</span><span class="token punctuation">,</span> cp ConstantPool<span class="token punctuation">)</span> AttributeInfo <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> attrName <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Code&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>CodeAttribute<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;ConstantValue&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConstantValueAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Deprecated&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>DeprecatedAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Exceptions&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>ExceptionsAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;LineNumberTable&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>LineNumberTableAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;LocalVariableTable&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>LocalVariableTableAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;SourceFile&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>SourceFileAttribute<span class="token punctuation">{</span>cp<span class="token punctuation">:</span> cp<span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Synthetic&quot;</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>SyntheticAttribute<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>UnparsedAttribute<span class="token punctuation">{</span>attrName<span class="token punctuation">,</span> attrLen<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建attr_unparsed.go文件中，定义UnparsedAttribute结构体</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile

<span class="token comment">/*
attribute_info {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 info[attribute_length];
}
*/</span>
<span class="token keyword">type</span> UnparsedAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    name   <span class="token builtin">string</span>
    length <span class="token builtin">uint32</span>
    info   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>UnparsedAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>info <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>UnparsedAttribute<span class="token punctuation">)</span> <span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>info
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照用途，23种预定义属性可以分为三组。</p><ul><li>第一组属性是实现 Java虚拟机所必需的，共有5种；</li><li>第二组属性是Java类库所必需的，共有12种；</li><li>第三组属性主要提供给工具使用，共有6种。</li></ul><p>第三组属性是可选的，也就是说可以不出现在class文件中。如果class文件中存在第三组属性，Java虚拟机实现或者Java类库也是可以利用它们 的，比如使用LineNumberTable属性在异常堆栈中显示行号。</p><p>如下给出了这23 种属性出现的Java版本、分组以及它们在class文件中的位置。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/40650d78a03c9ccf694e3d17792c90a8.png" alt="" style="zoom:80%;"><h6 id="deprecated和synthetic属性" tabindex="-1"><a class="header-anchor" href="#deprecated和synthetic属性"><span>Deprecated和Synthetic属性</span></a></h6><p><code>Deprecated</code>和<code>Synthetic</code>是最简单的两种属性，仅起标记作用，不包含任何数据。</p><p>这两种属性都是JDK1.1引入的，可以出现在 ClassFile、field_info和method_info结构中，它们的结构定义如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Deprecated_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
Synthetic_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于不包含任何数据，所以<code>attribute_length</code>的值必须是0。</p><p><code>Deprecated属性</code>用于指出类、接口、字段或方法已经不建议使用，编译器等工具可以根据Deprecated属性输出警告信息。</p><p><code>J2SE 5.0</code>之前 可以使用Javadoc提供的<code>@deprecated标签</code>指示编译器给类、接口、字段或方法添加Deprecated属性，语法格式如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/** <span class="token keyword">@deprecated</span> */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从<code>J2SE 5.0</code>开始，也可以使用<code>@Deprecated注解</code>，语法格式如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java中，编译器可能会生成一些额外的方法、字段或类，用于支持内部的匿名内部类、枚举、泛型等特性。这些生成的元素可能会被标记为 <code>Synthetic</code>。</p><p>创建<code>attr_markers.go</code>文件，在其中定义 <code>DeprecatedAttribute</code>和<code>SyntheticAttribute</code>结构体，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">type</span> DeprecatedAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span> MarkerAttribute <span class="token punctuation">}</span>
<span class="token keyword">type</span> SyntheticAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span> MarkerAttribute <span class="token punctuation">}</span>
<span class="token keyword">type</span> MarkerAttribute <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>MarkerAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// read nothing</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="sourcefile属性" tabindex="-1"><a class="header-anchor" href="#sourcefile属性"><span>SourceFile属性</span></a></h6><p><code>SourceFile</code> 属性是Java类文件中的一个属性，它用于指定源文件的名称，即生成该类文件的源代码文件的名称。这个属性并不直接影响类的运行时行为。其结构定义如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SourceFile_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 sourcefile_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>attribute_length</code>的值必须是2。<code>sourcefile_index</code>是常量池索引， 指向<code>CONSTANT_Utf8_info常量</code></p><p>创建 <code>attr_source_file.go</code>文件，在其中定义<code>SourceFileAttribute结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">type</span> SourceFileAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    cp ConstantPool
    sourceFileIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>SourceFileAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>sourceFileIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>SourceFileAttribute<span class="token punctuation">)</span> <span class="token function">FileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">.</span><span class="token function">getUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sourceFileIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，如果有一个名为 <code>MyClass.java</code> 的源代码文件，它包含以下类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当编译 <code>MyClass.java</code> 文件时，会生成一个名为 <code>MyClass.class</code> 的类文件，并在其中添加一个 <code>SourceFile</code> 属性，将其值设置为 <code>MyClass.java</code>。</p><h6 id="constantvalue属性" tabindex="-1"><a class="header-anchor" href="#constantvalue属性"><span>ConstantValue属性</span></a></h6><p><code>ConstantValue</code> 属性是Java类文件中的一个属性，通常与字段（field）相关联。这个属性的作用是为字段提供一个常量初始值。这意味着，如果您在类中声明一个字段，并为其分配了 <code>ConstantValue</code> 属性，那么该字段的初始值将在类加载时被设置为 <code>ConstantValue</code> 中指定的常量。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ConstantValue_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 constantvalue_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，假设有以下Java代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> myField <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对应的类文件中，将包含一个 <code>ConstantValue</code> 属性，指定了常量值 <code>42</code>，并与 <code>myField</code> 字段相关联。当类加载时，<code>myField</code> 将被初始化为 <code>42</code>。</p><p><code>constantvalue_index</code>是常量池索引，具体指向哪种常量因字段类型而异，如下为对照表</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/5e45d0418611effabd063918a3c344b1.png" alt="" style="zoom:80%;"><p>创建<code>attr_constant_value.go</code>文件，在其中定义<code>ConstantValueAttribute</code>结构体，代码如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> classfile
<span class="token keyword">type</span> ConstantValueAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	constantValueIndex <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantValueAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>constantValueIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ConstantValueAttribute<span class="token punctuation">)</span> <span class="token function">ConstantValueIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint16</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>constantValueIndex
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="code属性" tabindex="-1"><a class="header-anchor" href="#code属性"><span>Code属性</span></a></h6><p><code>Code</code> 属性是Java类文件中的一个属性，通常与方法（Method）相关联。</p><p>它包含了方法的字节码指令，即实际的可执行代码。<code>Code</code> 属性是Java类文件中最重要的属性之一，因为它包含了方法的实际执行逻辑。</p><p>以下是关于 <code>Code</code> 属性的一些重要信息：</p><ol><li><strong>属性结构</strong>：<code>Code</code> 属性通常包含以下信息： <ul><li>最大堆栈深度（<code>max_stack</code>）：方法执行时所需的最大堆栈深度。</li><li>局部变量表的大小（<code>max_locals</code>）：方法内部局部变量表的大小。</li><li>字节码指令（<code>code</code>）：实际的字节码指令序列，即方法的执行代码。</li><li>异常处理器列表（<code>exception_table</code>）：用于捕获和处理异常的信息。</li><li>方法属性（<code>attributes</code>）：其他与方法相关的属性，例如局部变量表、行号映射表等。</li></ul></li><li><strong>字节码指令</strong>：<code>Code</code> 属性中的 <code>code</code> 部分包含了方法的实际字节码指令，这些指令由Java虚拟机执行。每个指令执行一些特定的操作，例如加载、存储、算术操作、分支、方法调用等。</li><li><strong>异常处理</strong>：<code>Code</code> 属性中的 <code>exception_table</code> 部分包含了异常处理器的信息，指定了哪些字节码范围可以抛出哪些异常，并且指定了如何处理这些异常。</li><li><strong>局部变量表</strong>：<code>Code</code> 属性中的局部变量表（<code>max_locals</code>）用于存储方法执行期间的局部变量，例如方法参数和临时变量。</li><li><strong>属性</strong>：<code>Code</code> 属性中还可以包含其他属性，如局部变量表、行号映射表等，这些属性提供了更多的调试和运行时信息。</li></ol><p><code>Code</code> 属性是Java虚拟机实际执行方法的关键部分，它描述了方法的行为和操作，包括如何处理输入和生成输出。编译器将源代码编译为字节码，然后将字节码填充到 <code>Code</code> 属性中，这使得Java程序可以在虚拟机上执行。</p><p>创建<code>attr_code.go</code>文件，定义<code>CodeAttribute结构体</code>、<code>ExceptionTableEntry结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> CodeAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	cp             ConstantPool
	maxStack       <span class="token builtin">uint16</span>
	maxLocals      <span class="token builtin">uint16</span>
	code           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	exceptionTable <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ExceptionTableEntry
	attributes     <span class="token punctuation">[</span><span class="token punctuation">]</span>AttributeInfo
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>CodeAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	self<span class="token punctuation">.</span>maxStack <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>maxLocals <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	codeLength <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint32</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>code <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>codeLength<span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>exceptionTable <span class="token operator">=</span> <span class="token function">readExceptionTable</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token function">readAttributes</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> self<span class="token punctuation">.</span>cp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ExceptionTableEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    startPc   <span class="token builtin">uint16</span>
    endPc     <span class="token builtin">uint16</span>
    handlerPc <span class="token builtin">uint16</span>
    catchType <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">readExceptionTable</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ExceptionTableEntry <span class="token punctuation">{</span>
    exceptionTableLength <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    exceptionTable <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ExceptionTableEntry<span class="token punctuation">,</span> exceptionTableLength<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> exceptionTable <span class="token punctuation">{</span>
       exceptionTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ExceptionTableEntry<span class="token punctuation">{</span>
          startPc<span class="token punctuation">:</span>   reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          endPc<span class="token punctuation">:</span>     reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          handlerPc<span class="token punctuation">:</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          catchType<span class="token punctuation">:</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> exceptionTable
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="exceptions属性" tabindex="-1"><a class="header-anchor" href="#exceptions属性"><span>Exceptions属性</span></a></h6><p>Exceptions属性通常与方法（Method）相关联，用于指定方法可能抛出的受检查异常（checked exceptions）的列表。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Exceptions_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_exceptions;
    u2 exception_index_table[number_of_exceptions];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<code>attr_exceptions.go</code>文件，在其中定义<code>ExceptionsAttribute结构体</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> ExceptionsAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    exceptionIndexTable <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ExceptionsAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>exceptionIndexTable <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16s</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>ExceptionsAttribute<span class="token punctuation">)</span> <span class="token function">ExceptionIndexTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint16</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>exceptionIndexTable
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="linenumbertable和localvariabletable属性" tabindex="-1"><a class="header-anchor" href="#linenumbertable和localvariabletable属性"><span>LineNumberTable和LocalVariableTable属性</span></a></h6><p><code>LineNumberTable</code> 和 <code>LocalVariableTable</code> 属性是Java类文件中的两个用于调试和运行时跟踪的属性，它们包含了与源代码中行号和局部变量相关的信息。</p><p><strong>LineNumberTable 属性</strong>：用于建立源代码行号和字节码指令之间的映射。它允许开发工具在调试时将异常栈轨迹映射到源代码的特定行，以便开发者可以更容易地定位和修复代码中的问题。结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>LineNumberTable {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 line_number_table_length;
    {
        u2 start_pc;
        u2 line_number;
    } line_number_table[line_number_table_length];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LocalVariableTable 属性</strong>：用于跟踪局部变量的信息，包括局部变量的名称、数据类型、作用域范围和字节码偏移。</p><p>创建<code>attr_line_number_table.go</code>文件，定义<code>LineNumberTableAttribute结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> LineNumberTableAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    lineNumberTable <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>LineNumberTableEntry
<span class="token punctuation">}</span>

<span class="token keyword">type</span> LineNumberTableEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    startPc    <span class="token builtin">uint16</span>
    lineNumber <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LineNumberTableAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lineNumberTableLength <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>lineNumberTable <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>LineNumberTableEntry<span class="token punctuation">,</span> lineNumberTableLength<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>lineNumberTable <span class="token punctuation">{</span>
       self<span class="token punctuation">.</span>lineNumberTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>LineNumberTableEntry<span class="token punctuation">{</span>
          startPc<span class="token punctuation">:</span>    reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          lineNumber<span class="token punctuation">:</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LineNumberTableAttribute<span class="token punctuation">)</span> <span class="token function">GetLineNumber</span><span class="token punctuation">(</span>pc <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lineNumberTable<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
       entry <span class="token operator">:=</span> self<span class="token punctuation">.</span>lineNumberTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
       <span class="token keyword">if</span> pc <span class="token operator">&gt;=</span> <span class="token function">int</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>startPc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>lineNumber<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<code>attr_local_variable_table.go</code>文件，定义<code>LocalVariableTableAttribute</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> LocalVariableTableAttribute <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    localVariableTable <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>LocalVariableTableEntry
<span class="token punctuation">}</span>

<span class="token keyword">type</span> LocalVariableTableEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    startPc         <span class="token builtin">uint16</span>
    length          <span class="token builtin">uint16</span>
    nameIndex       <span class="token builtin">uint16</span>
    descriptorIndex <span class="token builtin">uint16</span>
    index           <span class="token builtin">uint16</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>LocalVariableTableAttribute<span class="token punctuation">)</span> <span class="token function">readInfo</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>ClassReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localVariableTableLength <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>localVariableTable <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>LocalVariableTableEntry<span class="token punctuation">,</span> localVariableTableLength<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> self<span class="token punctuation">.</span>localVariableTable <span class="token punctuation">{</span>
       self<span class="token punctuation">.</span>localVariableTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>LocalVariableTableEntry<span class="token punctuation">{</span>
          startPc<span class="token punctuation">:</span>         reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          length<span class="token punctuation">:</span>          reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          nameIndex<span class="token punctuation">:</span>       reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          descriptorIndex<span class="token punctuation">:</span> reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          index<span class="token punctuation">:</span>           reader<span class="token punctuation">.</span><span class="token function">readUint16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3测试" tabindex="-1"><a class="header-anchor" href="#_1-3测试"><span>1.3测试</span></a></h4><p>打开ch03\\main.go文件，修改<code>import</code>语句和<code>startJVM()</code>函数，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;strings&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;jvmgo/ch03/classfile&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;jvmgo/ch03/classpath&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cmd <span class="token operator">:=</span> <span class="token function">parseCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>versionFlag <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;version 0.0.1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>helpFlag <span class="token operator">||</span> cmd<span class="token punctuation">.</span>class <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
       <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token function">startJVM</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startJVM</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>Cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cp <span class="token operator">:=</span> classpath<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>XjreOption<span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>cpOption<span class="token punctuation">)</span>
    className <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    cf <span class="token operator">:=</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>class<span class="token punctuation">)</span>
    <span class="token function">printClassInfo</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className <span class="token builtin">string</span><span class="token punctuation">,</span> cp <span class="token operator">*</span>classpath<span class="token punctuation">.</span>Classpath<span class="token punctuation">)</span> <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ClassFile <span class="token punctuation">{</span>
    classData<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> cp<span class="token punctuation">.</span><span class="token function">ReadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    cf<span class="token punctuation">,</span> err <span class="token operator">:=</span> classfile<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>classData<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> cf
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printClassInfo</span><span class="token punctuation">(</span>cf <span class="token operator">*</span>classfile<span class="token punctuation">.</span>ClassFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;version: %v.%v\\n&quot;</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">MajorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">MinorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;constants count: %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span><span class="token function">ConstantPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;access flags: 0x%x\\n&quot;</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">AccessFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;this class: %v\\n&quot;</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;super class: %v\\n&quot;</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">SuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;interfaces: %v\\n&quot;</span><span class="token punctuation">,</span> cf<span class="token punctuation">.</span><span class="token function">InterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;fields count: %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> cf<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;methods count: %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> cf<span class="token punctuation">.</span><span class="token function">Methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先go install jvmgo\\ch03 生产ch03.exe</p><p>然后执行，并输入命令行语句，得到结果如下：</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-解析class文件/2023/12/14/db872e1857e7b23d23590602380b1b1b.png" alt="" style="zoom:80%;"><ul><li><strong>version: 52.0</strong>：这表示 <code>java.lang.String</code> 类的类文件版本为 52.0。类文件版本号与Java版本号有关，52.0 对应于Java 8。</li><li><strong>constants count: 548</strong>：这表示常量池中包含 548 个常量。常量池包含了类的常量、方法、字段等信息。</li><li><strong>access flags: 0x31</strong>：这表示类的访问标志，<code>0x31</code> 是十六进制表示，对应于二进制 <code>00110001</code>。这些标志描述类的访问权限和特性。</li><li><strong>this class: java/lang/String</strong>：这表示类的名称，即 <code>java.lang.String</code>。</li><li><strong>super class: java/lang/Object</strong>：这表示 <code>java.lang.String</code> 类继承自 <code>java.lang.Object</code> 类。</li><li><strong>interfaces: [java/io/Serializable java/lang/Comparable java/lang/CharSequence]</strong>：这表示 <code>java.lang.String</code> 类实现了三个接口，分别是 <code>Serializable</code>、<code>Comparable</code> 和 <code>CharSequence</code>。</li><li><strong>fields count: 5</strong>：这表示 <code>java.lang.String</code> 类包含 5 个字段。</li><li><strong>methods count: 94</strong>：这表示 <code>java.lang.String</code> 类包含 94 个方法。其中一些是构造方法（<code>&lt;init&gt;</code>），其他是实例方法。</li></ul>`,275);function v(b,m){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,d,n("p",null,[n("a",r,[o("详细class文件分析"),c(s)])]),k])}const y=a(l,[["render",v],["__file","解析Class文件.html.vue"]]),h=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6.html","title":"解析Class文件","lang":"zh-CN","frontmatter":{"title":"解析Class文件","order":4,"description":"解析Class文件 1.1 class文件介绍 详细class文件分析 作为类/接口信息的载体，每一个class文件都完整的定义了一个类，为了使Java程序可以实现“编写一次，处处运行”，java虚拟机对class文件的格式进行了严格的规范。 但是对于从哪里加载class文件，给予了高度自由空间：第三节中说过，可以从文件系统读取jar/zip文件中的c...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6/%E8%A7%A3%E6%9E%90Class%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"解析Class文件"}],["meta",{"property":"og:description","content":"解析Class文件 1.1 class文件介绍 详细class文件分析 作为类/接口信息的载体，每一个class文件都完整的定义了一个类，为了使Java程序可以实现“编写一次，处处运行”，java虚拟机对class文件的格式进行了严格的规范。 但是对于从哪里加载class文件，给予了高度自由空间：第三节中说过，可以从文件系统读取jar/zip文件中的c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解析Class文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"解析Class文件","slug":"解析class文件","link":"#解析class文件","children":[]}],"git":{},"readingTime":{"minutes":31.42,"words":9427},"filePathRelative":"book/Go实现Java虚拟机/解析Class文件/解析Class文件.md","autoDesc":true}');export{y as comp,h as data};

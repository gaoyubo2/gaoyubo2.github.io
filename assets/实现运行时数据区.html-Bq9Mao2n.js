import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D1py-eEI.js";const p={},e=t(`<p>创建<code>\\rtda</code>目录(run-time data area)，创建object.go文件， 在其中定义Object结构体，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">type</span> Object <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// todo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本节将<strong>实现线程私有的运行时数据区</strong>，如下图。下面先从线程开始。</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-运行时数据区/2023/12/14/939d4ea9f28c136950c6cc4d36bd9c19.png" alt="" style="zoom:80%;"><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><p>下创建<code>thread.go</code>文件，在其中定义<code>Thread结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">type</span> Thread <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pc <span class="token builtin">int</span>
	stack <span class="token operator">*</span>Stack
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">NewThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Thread <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">PC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>pc <span class="token punctuation">}</span> <span class="token comment">// getter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">SetPC</span><span class="token punctuation">(</span>pc <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> self<span class="token punctuation">.</span>pc <span class="token operator">=</span> pc <span class="token punctuation">}</span> <span class="token comment">// setter</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">PushFrame</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">CurrentFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前只定义了pc和stack两个字段。</p><ul><li>pc字段代表（pc寄存器）</li><li>stack字段是Stack结构体（Java虚拟机栈）指针</li></ul><p>和堆一样，Java虚拟机规范对Java虚拟机栈的约束也相当宽松。 Java虚拟机栈可以是：连续的空间，也可以不连续；可以是固定大小，也可以在运行时动态扩展。</p><ul><li>如果Java虚拟机栈有大小限制， 且执行线程所需的栈空间超出了这个限制，会导致 <code>StackOverflowError</code>异常抛出。</li><li>如果Java虚拟机栈可以动态扩展，但 是内存已经耗尽，会导致<code>OutOfMemoryError</code>异常抛出。</li></ul><p>创建Thread实例的代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Thread <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Thread<span class="token punctuation">{</span>
		stack<span class="token punctuation">:</span> <span class="token function">newStack</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newStack（）</code>函数创建Stack结构体实例，它的参数表示要<strong>创建的Stack最多可以容纳多少帧</strong></p><p><code>PushFrame（）</code>和<code>PopFrame（）</code>方法只是调用Stack结构体的相应方法而已，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">PushFrame</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">PopFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CurrentFrame（）</code>方法返回当前帧，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Thread<span class="token punctuation">)</span> <span class="token function">CurrentFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟机栈" tabindex="-1"><a class="header-anchor" href="#虚拟机栈"><span>虚拟机栈</span></a></h2><p>用经典的<code>链表（linked list）</code>数据结构来实现Java虚拟机栈，这样<code>栈</code>就可以按需使用内存空间，而且弹出的<code>帧</code>也可以及时被Go的垃圾收集器回收。</p><p>创建<code>jvm_stack.go</code>文件，在其中定义Stack结构体，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    maxSize <span class="token builtin">uint</span>
    size <span class="token builtin">uint</span>
    _top <span class="token operator">*</span>Frame
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">newStack</span><span class="token punctuation">(</span>maxSize <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Stack <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>maxSize字段</code>保存栈的容量（最多可以容纳多少帧），<code>size字段</code>保存栈的当前大小，<code>_top字段</code>保存栈顶指针。<code>newStack（）</code>函数的代码 如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newStack</span><span class="token punctuation">(</span>maxSize <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Stack <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Stack<span class="token punctuation">{</span>
       maxSize<span class="token punctuation">:</span> maxSize<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>push（）</code>方法把帧推入栈顶，目前没有实现异常处理，采用panic代替，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>frame <span class="token operator">*</span>Frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>maxSize <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.StackOverflowError&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> self<span class="token punctuation">.</span>_top <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">//连接链表</span>
		frame<span class="token punctuation">.</span>lower <span class="token operator">=</span> self<span class="token punctuation">.</span>_top
	<span class="token punctuation">}</span>

	self<span class="token punctuation">.</span>_top <span class="token operator">=</span> frame
	self<span class="token punctuation">.</span>size<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pop（）方法把栈顶帧弹出:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_top <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;jvm stack is empty!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//取出栈顶元素</span>
    top <span class="token operator">:=</span> self<span class="token punctuation">.</span>_top
    <span class="token comment">//将当前栈顶的下一个栈帧作为栈顶元素</span>
    self<span class="token punctuation">.</span>_top <span class="token operator">=</span> top<span class="token punctuation">.</span>lower
    <span class="token comment">//取消链表链接，将栈顶元素分离</span>
    top<span class="token punctuation">.</span>lower <span class="token operator">=</span> <span class="token boolean">nil</span>
    self<span class="token punctuation">.</span>size<span class="token operator">--</span>

    <span class="token keyword">return</span> top
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>top（）方法查看栈顶栈帧，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 查看栈顶元素</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>Stack<span class="token punctuation">)</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_top <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
       <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;jvm stack is empty!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_top
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈帧" tabindex="-1"><a class="header-anchor" href="#栈帧"><span>栈帧</span></a></h2><p>创建<code>frame.go</code>文件，在其中定义<code>Frame结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">type</span> Frame <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    lower <span class="token operator">*</span>Frame               <span class="token comment">//指向下一栈帧</span>
	localVars    LocalVars     <span class="token comment">// 局部变量表</span>
	operandStack <span class="token operator">*</span>OperandStack <span class="token comment">//操作数栈</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">newFrame</span><span class="token punctuation">(</span>maxLocals<span class="token punctuation">,</span> maxStack <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Frame结构体暂时也比较简单，只有三个字段，后续还会继续完善它。</p><ul><li><code>lower字段</code>用来实现链表数据结构</li><li><code>localVars字段</code>保存局部变量表指针</li><li><code>operandStack</code>字段保存操作数栈指针</li></ul><p><code> NewFrame（）</code>函数创建Frame实例，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewFrame</span><span class="token punctuation">(</span>maxLocals<span class="token punctuation">,</span> maxStack <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Frame <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Frame<span class="token punctuation">{</span>
       localVars<span class="token punctuation">:</span>    <span class="token function">newLocalVars</span><span class="token punctuation">(</span>maxLocals<span class="token punctuation">)</span><span class="token punctuation">,</span>
       operandStack<span class="token punctuation">:</span> <span class="token function">newOperandStack</span><span class="token punctuation">(</span>maxStack<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前结构如下图：</p><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/Golang实现JAVA虚拟机-运行时数据区/2023/12/14/cc07305cf94ea634a47485e9c0bce22e.png" alt="" style="zoom:80%;"><h2 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表"><span>局部变量表</span></a></h2><p>局部变量表的容量以变量槽(Variable Slot)为最小单位，Java虚拟机规范并没有定义一个槽所应该占用内存空间的大小，但是规定了一个槽应该可以存放一个32位以内的数据类型。</p><blockquote><p>在Java程序编译为Class文件时,就在方法的Code属性中的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量。(最大Slot数量)</p></blockquote><p>局部变量表是按索引访问的，所以很自然，可以把它想象成一 个数组。</p><p>根据Java虚拟机规范，这个数组的每个元素至少可以容纳 一个int或引用值，两个连续的元素可以容纳一个long或double值。 那么使用哪种Go语言数据类型来表示这个数组呢？ 最容易想到的是[]int。Go的int类型因平台而异，在64位系统上是int64，在32 位系统上是int32，总之足够容纳Java的int类型。另外它和内置的<code>uintptr</code>类型宽度一样，所以也足够放下一个内存地址。</p><p>通过<code>unsafe包</code>可以拿到结构体实例的地址，如下所示:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>obj <span class="token operator">:=</span> <span class="token operator">&amp;</span>Object<span class="token punctuation">{</span><span class="token punctuation">}</span>
ptr <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
ref <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但Go的垃圾回收机制并不能有效处理<code>uintptr</code>指针。 也就是说，如果一个结构体实例，除了<code>uintptr</code>类型指针保存它的地址之外，其他地方都没有引用这个实例，它就会被当作垃圾回收。</p><p>另外一个方案是用<code>[]interface{}</code>类型，这个方案在实现上没有问题，只是写出来的代码可读性太差。</p><p>第三种方案是定义一个结构体，让它可以同时容纳一个int值和一个引用值。</p><p>这里将使用第三种方案。创建<code>slot.go</code>文件，在其中定义<code>Slot结构体</code>， 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda

<span class="token keyword">type</span> Slot <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	num <span class="token builtin">int32</span>
	ref <span class="token operator">*</span>Object
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>num字段</code>存放整数，<code>ref字段</code>存放引用，刚好满足我们的需求。</p><p>用它来实现局部变量表。创建<code>local_vars.go</code>文件，在其中定义<code>LocalVars</code>类型，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">import</span> <span class="token string">&quot;math&quot;</span>
<span class="token keyword">type</span> LocalVars <span class="token punctuation">[</span><span class="token punctuation">]</span>Slot

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义<code>newLocalVars（）</code>函数， 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newLocalVars</span><span class="token punctuation">(</span>maxLocals <span class="token builtin">uint</span><span class="token punctuation">)</span> LocalVars <span class="token punctuation">{</span>
    <span class="token keyword">if</span> maxLocals <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Slot<span class="token punctuation">,</span> maxLocals<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作局部变量表和操作数栈的指令都是隐含类型信息的。下面给<code>LocalVars</code>类型定义一些方法，用来存取不同类型的变量。 int变量最简单，直接存取即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">SetInt</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> val <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> val
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">GetInt</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>float变量可以先转成int类型，然后按int变量来处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">SetFloat</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> val <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Float32bits</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">GetFloat</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Float32frombits</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>long变量则需要拆成两个int变量。(用两个slot存储)</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// long consumes two slots</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">SetLong</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> val <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//后32位</span>
    self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token comment">//前32位</span>
    self<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>val <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">GetLong</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>
    low <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    high <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token comment">//拼在一起</span>
    <span class="token keyword">return</span> <span class="token function">int64</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span> <span class="token operator">|</span> <span class="token function">int64</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>double变量可以先转成long类型，然后按照long变量来处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// double consumes two slots</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">SetDouble</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> val <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Float64bits</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span><span class="token function">SetLong</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">GetDouble</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">GetLong</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Float64frombits</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是引用值，也比较简单，直接存取即可。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">SetRef</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">,</span> ref <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self LocalVars<span class="token punctuation">)</span> <span class="token function">GetRef</span><span class="token punctuation">(</span>index <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
    <span class="token keyword">return</span> self<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>ref
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，并没有真的对boolean、byte、short和char类型定义存取方法，这些类型的值都可以转换成int值类来处理。</p></blockquote><p>下面我们来实现操作数栈。</p><h2 id="操作数栈" tabindex="-1"><a class="header-anchor" href="#操作数栈"><span>操作数栈</span></a></h2><p>操作数栈的实现方式和局部变量表类似。创建<code>operand_stack.go</code>文件，在其中定义<code>OperandStack结构体</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rtda
<span class="token keyword">import</span> <span class="token string">&quot;math&quot;</span>
<span class="token keyword">type</span> OperandStack <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    size <span class="token builtin">uint</span>
    slots <span class="token punctuation">[</span><span class="token punctuation">]</span>Slot
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作数栈的大小是编译器已经确定的，所以可以用<code>[]Slot</code>实现。 <code>size字段</code>用于记录栈顶位置。 实现<code>newOperandStack（）</code>函数，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newOperandStack</span><span class="token punctuation">(</span>maxStack <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>OperandStack <span class="token punctuation">{</span>
	<span class="token keyword">if</span> maxStack <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>OperandStack<span class="token punctuation">{</span>
			slots<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Slot<span class="token punctuation">,</span> maxStack<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要定义一些方法从操作数栈中弹出，或者往其中推入各种类型的变 量。首先实现最简单的int变量。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushInt</span><span class="token punctuation">(</span>val <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> val
    self<span class="token punctuation">.</span>size<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int32</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>size<span class="token operator">--</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PushInt（）</code>方法往栈顶放一个int变量，然后把size加1。 <code>PopInt（）</code> 方法则恰好相反，先把size减1，然后返回变量值。</p><p>float变量还是先转成int类型，然后按int变量处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushFloat</span><span class="token punctuation">(</span>val <span class="token builtin">float32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Float32bits</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>size<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>size<span class="token operator">--</span>
    bits <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Float32frombits</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把long变量推入栈顶时，要拆成两个int变量。 弹出时，先弹出 两个int变量，然后组装成一个long变量。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// long 占两个solt</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushLong</span><span class="token punctuation">(</span>val <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>val <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">2</span>
    low <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    high <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">int64</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span> <span class="token operator">|</span> <span class="token function">int64</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>double变量先转成long类型，然后按long变量处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// double consumes two slots</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushDouble</span><span class="token punctuation">(</span>val <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Float64bits</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span><span class="token function">PushLong</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    bits <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">PopLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Float64frombits</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弹出引用后，把Slot结构体的ref字段设置成nil，这样做是为了帮助Go的垃圾收集器回收Object结构体实例。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PushRef</span><span class="token punctuation">(</span>ref <span class="token operator">*</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref
    self<span class="token punctuation">.</span>size<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>self <span class="token operator">*</span>OperandStack<span class="token punctuation">)</span> <span class="token function">PopRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Object <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>size<span class="token operator">--</span>
    ref <span class="token operator">:=</span> self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>ref
    <span class="token comment">//实现垃圾回收</span>
    self<span class="token punctuation">.</span>slots<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token keyword">return</span> ref
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,84),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","实现运行时数据区.html.vue"]]),r=JSON.parse('{"path":"/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.html","title":"实现运行时数据区","lang":"zh-CN","frontmatter":{"title":"实现运行时数据区","order":3,"description":"创建\\\\rtda目录(run-time data area)，创建object.go文件， 在其中定义Object结构体，代码如下： 本节将实现线程私有的运行时数据区，如下图。下面先从线程开始。 线程 下创建thread.go文件，在其中定义Thread结构体，代码如下： 目前只定义了pc和stack两个字段。 pc字段代表（pc寄存器） stack字段...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/Go%E5%AE%9E%E7%8E%B0Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"实现运行时数据区"}],["meta",{"property":"og:description","content":"创建\\\\rtda目录(run-time data area)，创建object.go文件， 在其中定义Object结构体，代码如下： 本节将实现线程私有的运行时数据区，如下图。下面先从线程开始。 线程 下创建thread.go文件，在其中定义Thread结构体，代码如下： 目前只定义了pc和stack两个字段。 pc字段代表（pc寄存器） stack字段..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现运行时数据区\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[]},{"level":2,"title":"虚拟机栈","slug":"虚拟机栈","link":"#虚拟机栈","children":[]},{"level":2,"title":"栈帧","slug":"栈帧","link":"#栈帧","children":[]},{"level":2,"title":"局部变量表","slug":"局部变量表","link":"#局部变量表","children":[]},{"level":2,"title":"操作数栈","slug":"操作数栈","link":"#操作数栈","children":[]}],"git":{},"readingTime":{"minutes":8.02,"words":2407},"filePathRelative":"book/Go实现Java虚拟机/运行时数据区/实现运行时数据区.md","autoDesc":true}');export{d as comp,r as data};

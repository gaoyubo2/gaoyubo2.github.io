import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,d as n}from"./app-D1py-eEI.js";const o={},a=n('<p><strong>亦称：</strong> 事件订阅者、监听者、Event-Subscriber、Listener、Observer</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554389.png" alt="观察者设计模式" tabindex="0" loading="lazy"><figcaption>观察者设计模式</figcaption></figure><p>假如你有两种类型的对象： <code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPhone 手机）， 而该产品很快将会在商店里出售。</p><p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554865.png" alt="访问商店或发送垃圾邮件" tabindex="0" loading="lazy"><figcaption>访问商店或发送垃圾邮件</figcaption></figure><blockquote><p>前往商店和发送垃圾邮件</p></blockquote><p>另一方面， 每次新产品到货时， 商店可以向所有顾客发送邮件 （可能会被视为垃圾邮件）。 这样， 部分顾客就无需反复前往商店了， 但也可能会惹恼对新产品没有兴趣的其他顾客。</p><p>我们似乎遇到了一个矛盾： 要么让顾客浪费时间检查产品是否到货， 要么让商店浪费资源去通知没有需求的顾客。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>拥有一些值得关注的状态的对象通常被称为<em>目标</em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为<em>发布者</em> （publisher）。 所有希望关注发布者状态变化的其他对象被称为<em>订阅者</em> （subscribers）。</p><p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括 1） 一个用于存储订阅者对象引用的列表成员变量； 2） 几个用于添加或删除该列表中订阅者的公有方法。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554609.png" alt="订阅机制" tabindex="0" loading="lazy"><figcaption>订阅机制</figcaption></figure><p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p><p>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</p><p>因此， 所有订阅者都必须实现同样的接口， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554423.png" alt="通知方法" tabindex="0" loading="lazy"><figcaption>通知方法</figcaption></figure><blockquote><p>发布者调用订阅者对象中的特定通知方法来通知订阅者</p></blockquote><p>如果你的应用中有多个不同类型的发布者， 且希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有发布者遵循同样的接口。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p><h2 id="真实世界类比" tabindex="-1"><a class="header-anchor" href="#真实世界类比"><span>真实世界类比</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281555634.png" alt="杂志和报纸订阅" tabindex="0" loading="lazy"><figcaption>杂志和报纸订阅</figcaption></figure><blockquote><p>杂志和报纸订阅</p></blockquote><p>如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。</p><p>出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</p><h2 id="观察者模式结构" tabindex="-1"><a class="header-anchor" href="#观察者模式结构"><span>观察者模式结构</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281555871.png" alt="观察者设计模式的结构" tabindex="0" loading="lazy"><figcaption>观察者设计模式的结构</figcaption></figure><ol><li><strong>发布者</strong> （Publisher） 会向其他对象发送值得关注的事件。 事件会在发布者自身状态改变或执行特定行为后发生。 发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅构架。</li><li>当新事件发生时， 发送者会遍历订阅列表并调用每个订阅者对象的通知方法。 该方法是在订阅者接口中声明的。</li><li><strong>订阅者</strong> （Subscriber） 接口声明了通知接口。 在绝大多数情况下， 该接口仅包含一个 <code>update</code>更新方法。 该方法可以拥有多个参数， 使发布者能在更新时传递事件的详细信息。</li><li><strong>具体订阅者</strong> （Concrete Subscribers） 可以执行一些操作来回应发布者的通知。 所有具体订阅者类都实现了同样的接口， 因此发布者不需要与具体类相耦合。</li><li>订阅者通常需要一些上下文信息来正确地处理更新。 因此， 发布者通常会将一些上下文数据作为通知方法的参数进行传递。 发布者也可将自身作为参数进行传递， 使订阅者直接获取所需的数据。</li><li><strong>客户端</strong> （Client） 会分别创建发布者和订阅者对象， 然后为订阅者注册发布者更新。</li></ol>',28),r=[a];function g(p,s){return t(),i("div",null,r)}const d=e(o,[["render",g],["__file","观察者.html.vue"]]),h=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85.html","title":"观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式","description":"亦称： 事件订阅者、监听者、Event-Subscriber、Listener、Observer 简介 观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。 观察者设计模式观察者设计模式 假如你有两种类型的对象： 顾客和 商店 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPh...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85.html"}],["meta",{"property":"og:site_name","content":"疼了也不哭"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"亦称： 事件订阅者、监听者、Event-Subscriber、Listener、Observer 简介 观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。 观察者设计模式观察者设计模式 假如你有两种类型的对象： 顾客和 商店 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554389.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554389.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554865.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554609.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281554423.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281555634.png\\",\\"https://cdn.jsdelivr.net/gh/gaoyubo2/image/img/202404281555871.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"真实世界类比","slug":"真实世界类比","link":"#真实世界类比","children":[]},{"level":2,"title":"观察者模式结构","slug":"观察者模式结构","link":"#观察者模式结构","children":[]}],"git":{},"readingTime":{"minutes":4.52,"words":1357},"filePathRelative":"guide/设计模式/行为模式/观察者.md","autoDesc":true}');export{d as comp,h as data};
